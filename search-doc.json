{"searchDocs":[{"title":"Ads","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/component/ads","content":"","keywords":"","version":"v6"},{"title":"IMA SDK​","type":1,"pageTitle":"Ads","url":"/react-native-video/docs/v6/component/ads#ima-sdk","content":" react-native-video includes built-in support for Google IMA SDK on Android and iOS. To enable it, refer to the installation section.  ","version":"v6","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Ads","url":"/react-native-video/docs/v6/component/ads#usage","content":" To use AVOD (Ad-Supported Video on Demand), pass the adTagUrl prop to the Video component. The adTagUrl should be a VAST-compliant URI.  Example:​  adTagUrl=&quot;https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&amp;sz=640x480&amp;cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&amp;ciu_szs=300x250&amp;gdfp_req=1&amp;ad_rule=1&amp;output=vmap&amp;unviewed_position_start=1&amp;env=vp&amp;impl=s&amp;cmsid=496&amp;vid=short_onecue&amp;correlator=&quot;   Note: Video ads cannot start when Picture-in-Picture (PiP) mode is active on iOS. More details are available in the Google IMA SDK Docs. If you are using custom controls, hide the PiP button when receiving the STARTED event from onReceiveAdEvent and show it again when receiving the ALL_ADS_COMPLETED event.  ","version":"v6","tagName":"h3"},{"title":"Events​","type":1,"pageTitle":"Ads","url":"/react-native-video/docs/v6/component/ads#events","content":" To receive events from the IMA SDK, pass the onReceiveAdEvent prop to the Video component. The full list of supported events is available here.  Example:​  ... onReceiveAdEvent={event =&gt; console.log(event)} ...   ","version":"v6","tagName":"h3"},{"title":"Localization​","type":1,"pageTitle":"Ads","url":"/react-native-video/docs/v6/component/ads#localization","content":" To change the language of the IMA SDK, pass the adLanguage prop to the Video component. The list of supported languages is available here.  By default, iOS uses the system language, and Android defaults to en (English).  Example:​  ... adLanguage=&quot;fr&quot; ...  ","version":"v6","tagName":"h3"},{"title":"A <Video> Component for React Native","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/intro","content":"","keywords":"","version":"v6"},{"title":"About​","type":1,"pageTitle":"A <Video> Component for React Native","url":"/react-native-video/docs/v6/intro#about","content":" react-native-video is a React Native library that provides a Video component to render media content like videos and streams.  It allows you to stream video files (m3u, mpd, mp4, etc.) inside your React Native application.  ExoPlayer for AndroidAVPlayer for iOS, tvOS, and visionOSWindows UWP for WindowsHTML5 for WebTrick mode supportSubtitles (embedded or side-loaded)DRM supportClient-side ad insertion (via Google IMA)PiP (Picture-in-Picture)Embedded playback controlsAnd more  The goal of this package is to provide lightweight but full control over the player.  ","version":"v6","tagName":"h2"},{"title":"V6.0.0 Information​","type":1,"pageTitle":"A <Video> Component for React Native","url":"/react-native-video/docs/v6/intro#v600-information","content":" warning Version 6: This documentation covers features available only in v6.0.0 and later. If you're unsure or need an older version, you can still use version 5.2.x.  Version 6.x requires react-native &gt;= 0.68.2  warning From 6.0.0-beta.8, it also requires iOS &gt;= 13.0 (default in React Native 0.73).  For older versions of React Native, please use version 5.x.  ","version":"v6","tagName":"h2"},{"title":"Caching","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/caching","content":"","keywords":"","version":"v6"},{"title":"Android​","type":1,"pageTitle":"Caching","url":"/react-native-video/docs/v6/other/caching#android","content":" Android uses an LRU SimpleCache with a variable cache size, which can be specified by bufferConfig - cacheSizeMB. This creates a folder named RNVCache inside the app's cache directory.  Note that react-native-video does not currently offer a native method to flush the cache, but it can be cleared by manually clearing the app's cache.  Additionally, this resolves the issue in RNV6 where the source URI was repeatedly called when looping a video on Android.  ","version":"v6","tagName":"h2"},{"title":"iOS​","type":1,"pageTitle":"Caching","url":"/react-native-video/docs/v6/other/caching#ios","content":" ","version":"v6","tagName":"h2"},{"title":"Technology​","type":1,"pageTitle":"Caching","url":"/react-native-video/docs/v6/other/caching#technology","content":" The cache is backed by SPTPersistentCache and DVAssetLoaderDelegate.  ","version":"v6","tagName":"h3"},{"title":"How It Works​","type":1,"pageTitle":"Caching","url":"/react-native-video/docs/v6/other/caching#how-it-works","content":" Caching is based on the asset's URL. SPTPersistentCache uses an LRU (Least Recently Used) caching policy.  ","version":"v6","tagName":"h3"},{"title":"Restrictions​","type":1,"pageTitle":"Caching","url":"/react-native-video/docs/v6/other/caching#restrictions","content":" Currently, caching is only supported for URLs ending in .mp4, .m4v, or .mov. In future versions, URLs with query strings (e.g., test.mp4?resolution=480p) will be supported once dependencies allow access to the Content-Type header.  At this time, HLS playlists (.m3u8) and videos with sideloaded text tracks are not supported and will bypass the cache.  You will see warnings in the Xcode logs when using debug mode. If you're unsure whether your video is cached, check your Xcode logs.  By default, files expire after 30 days, and the maximum cache size is 100MB.  Future updates may include more configurable caching options.  Note: If you are enabling video caching (using $RNVideoUseVideoCaching), you must add the following to your Gemfile: gem &quot;cocoapods-swift-modular-headers&quot; Then, install dependencies using: bundle install bundle exec pod install This enables Swift modular headers for Swift dependencies. ","version":"v6","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"A <Video> Component for React Native","url":"/react-native-video/docs/v6/intro#usage","content":" // Load the module import Video, { VideoRef } from 'react-native-video'; // Inside your render function, assuming you have a file called // &quot;background.mp4&quot; in your project. You can include multiple videos // on a single screen if needed. const VideoPlayer = () =&gt; { const videoRef = useRef&lt;VideoRef&gt;(null); const background = require('./background.mp4'); return ( &lt;Video // Can be a URL or a local file. source={background} // Store reference ref={videoRef} // Callback when remote video is buffering onBuffer={onBuffer} // Callback when the video cannot be loaded onError={onError} style={styles.backgroundVideo} /&gt; ); }; // Later in your styles... var styles = StyleSheet.create({ backgroundVideo: { position: 'absolute', top: 0, left: 0, bottom: 0, right: 0, }, });  ","version":"v6","tagName":"h2"},{"title":"Offline Video SDK","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/downloading","content":"","keywords":"","version":"v6"},{"title":"What is the Offline Video SDK?​","type":1,"pageTitle":"Offline Video SDK","url":"/react-native-video/docs/v6/other/downloading#what-is-the-offline-video-sdk","content":" The Offline Video SDK extends react-native-video (v6 or v7) with the ability to download and store video content for offline playback. It also supports DRM-protected content. The SDK manages background tasks—such as queuing, pausing, resuming, and tracking progress or errors—without requiring major changes to your existing setup.  ","version":"v6","tagName":"h2"},{"title":"Key Features​","type":1,"pageTitle":"Offline Video SDK","url":"/react-native-video/docs/v6/other/downloading#key-features","content":" Stream Downloading The SDK allows you to download streams and store them for offline playback. It also includes an asset manager to manage downloaded files on the device. Offline DRM Securely plays DRM-protected content offline while ensuring content protection and rights management.  ","version":"v6","tagName":"h3"},{"title":"Additional Capabilities​","type":1,"pageTitle":"Offline Video SDK","url":"/react-native-video/docs/v6/other/downloading#additional-capabilities","content":" Multiple Audio Tracks &amp; Subtitles Supports downloading various audio and subtitle tracks, including optional subtitle exclusion or inclusion. Selective Downloads Only the selected tracks (resolution, language, etc.) is downloaded by default to optimize storage usage. DRM License Optimization If your DRM provider issues persistent tokens, they can be stored and updated only upon expiration, reducing licensing costs. Pluggable Architecture Designed for offline capabilities without restricting additional video player features. Future react-native-video (v7+) updates will further simplify plugin integrations.  ","version":"v6","tagName":"h3"},{"title":"Implementation & Support​","type":1,"pageTitle":"Offline Video SDK","url":"/react-native-video/docs/v6/other/downloading#implementation--support","content":" Integration Options You can integrate the SDK yourself or get assistance from our team. We also offer commercial collaboration for stalled projects. Contact us for support. Basic Requirements react-native-video version 6 or 7.Actual stream downloads are required for offline playback. A content ID or persistent key alone is not sufficient.  ","version":"v6","tagName":"h3"},{"title":"Licensing & Inquiries​","type":1,"pageTitle":"Offline Video SDK","url":"/react-native-video/docs/v6/other/downloading#licensing--inquiries","content":" For licensing, trials, or further assistance, contact us. We’d be happy to discuss your needs and answer any questions. ","version":"v6","tagName":"h3"},{"title":"Debugging","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/debug","content":"","keywords":"","version":"v6"},{"title":"Using the Sample App​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#using-the-sample-app","content":" This repository contains multiple sample implementations in the example folder. It is always preferable to test behavior in a sample app rather than in a full application. The basic sample allows testing of many features.  To use the sample app, follow these steps:  Clone this repository: git clone git@github.com:TheWidlarzGroup/react-native-video.git Navigate to the root folder and build the package. This generates a transpiled version in the lib folder: cd react-native-video &amp;&amp; yarn &amp;&amp; yarn build Navigate to the sample app and install dependencies: cd example/basic &amp;&amp; yarn install Build and run the app: For Android: yarn android For iOS: cd ios &amp;&amp; pod install &amp;&amp; cd .. &amp;&amp; yarn ios   ","version":"v6","tagName":"h2"},{"title":"HTTP Playback Doesn't Work or Black Screen on Release Build (Android)​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#http-playback-doesnt-work-or-black-screen-on-release-build-android","content":" If your video works in Debug mode but shows only a black screen in Release mode, check the URL of your video. If you are using the http protocol, you need to add the following line to your AndroidManifest.xml file. More details here:  &lt;application ... android:usesCleartextTraffic=&quot;true&quot; &gt;   ","version":"v6","tagName":"h2"},{"title":"Decoder Issue (Android)​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#decoder-issue-android","content":" Some devices have a maximum number of simultaneous video playbacks. If this limit is reached, ExoPlayer returns an error: Unable to instantiate decoder.  Known issue: This happens frequently in Debug mode.  ","version":"v6","tagName":"h2"},{"title":"Unable to Play Clear Content (All OS)​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#unable-to-play-clear-content-all-os","content":" Before opening a ticket, follow these steps:  ","version":"v6","tagName":"h2"},{"title":"Check Remote File Access​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#check-remote-file-access","content":" Ensure you can download the manifest/content file using a browser.  ","version":"v6","tagName":"h3"},{"title":"Check If Another Player Can Play the Content​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#check-if-another-player-can-play-the-content","content":" Clear playback should work with any video player. Test the content with another player, such as VLC, to confirm it plays without issues.  ","version":"v6","tagName":"h3"},{"title":"Unable to Play Protected Content (All OS)​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#unable-to-play-protected-content-all-os","content":" ","version":"v6","tagName":"h2"},{"title":"Protected Content Gives an Error (Token Error / Access Forbidden)​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#protected-content-gives-an-error-token-error--access-forbidden","content":" If the content requires an access token or HTTP headers, ensure you can access the data using wget or a REST client. Provide all necessary authentication parameters.  ","version":"v6","tagName":"h3"},{"title":"Debugging Network Calls Not Visible in React Native Debugging Tools​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#debugging-network-calls-not-visible-in-react-native-debugging-tools","content":" This is a React Native limitation—React Native debugging tools only capture network calls made in JavaScript.  To debug network calls, use tools like:  Charles ProxyFiddler  These tools allow you to sniff all HTTP/HTTPS calls, including access to content, DRM, and audio/video chunks. Compare the request/response patterns with previous tests to diagnose issues.  ","version":"v6","tagName":"h2"},{"title":"Debugging Media3: Build from Media3 Source​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#debugging-media3-build-from-media3-source","content":" If you need to use a specific ExoPlayer version or modify default behavior, you may need to build from the Media3 source code.  ","version":"v6","tagName":"h2"},{"title":"Configure Player Path​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#configure-player-path","content":" Add the following lines to settings.gradle to configure your Media3 source path:  gradle.ext.androidxMediaModulePrefix = 'media-' apply from: file(&quot;../../../../media3/core_settings.gradle&quot;)   Replace this with the actual Media3 source path. Ensure that you use the same version (or a compatible API version) supported by the package.  ","version":"v6","tagName":"h3"},{"title":"Enable Building from Source​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#enable-building-from-source","content":" In your build.gradle file, add the following setting:  buildscript { ext { ... buildFromMedia3Source = true ... } }   ","version":"v6","tagName":"h3"},{"title":"Still Not Working?​","type":1,"pageTitle":"Debugging","url":"/react-native-video/docs/v6/other/debug#still-not-working","content":" You can open a ticket or contact us for premium support. ","version":"v6","tagName":"h2"},{"title":"DRM","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/component/drm","content":"","keywords":"","version":"v6"},{"title":"DRM Example​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#drm-example","content":" We provide a sample implementation in the example app demonstrating how to use DRM with react-native-video. You’ll need a valid token—visit our site to obtain a free 24-hour token.  ","version":"v6","tagName":"h2"},{"title":"DRM Offline​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#drm-offline","content":" If you need DRM-protected content available offline, our Offline Video SDK enables downloading, storing, and managing streams with and without DRM. It also handles many edge cases you may encounter over time.  ","version":"v6","tagName":"h2"},{"title":"Prerequisites:​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#prerequisites","content":" Use react-native-video v6 or v7. If you're still on v5 or lower, contact us for assistance.  Supporting our software kits helps maintain this open-source project. Thank you!  ","version":"v6","tagName":"h3"},{"title":"Providing DRM Data (Tested with HTTP/HTTPS Assets)​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#providing-drm-data-tested-with-httphttps-assets","content":" You can configure DRM playback by providing a DRM object with the following properties. This feature disables the use of TextureView on Android.  ","version":"v6","tagName":"h2"},{"title":"DRM Properties​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#drm-properties","content":" ","version":"v6","tagName":"h3"},{"title":"base64Certificate​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#base64certificate","content":" Platforms: iOS | visionOS  Type: booleanDefault: false  Indicates whether the certificate URL returns data in Base64 format.  ","version":"v6","tagName":"h3"},{"title":"certificateUrl​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#certificateurl","content":" Platforms: iOS | visionOS  Type: stringDefault: undefined  The URL used to fetch a valid certificate for FairPlay.  ","version":"v6","tagName":"h3"},{"title":"getLicense​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#getlicense","content":" Platforms: iOS | visionOS  Type: functionDefault: undefined  Instead of setting licenseServer, you can manually acquire the license in JavaScript and send the result to the native module for FairPlay DRM configuration.  The following parameters are available in getLicense:  contentId: The content ID from the DRM object or loadingRequest.request.url?.hostloadedLicenseUrl: The URL retrieved from loadingRequest.request.URL.absoluteString, starting with skd:// or clearkey://licenseServer: The URL passed in the DRM objectspcString: The SPC used for DRM validation  You should return a Base64-encoded CKC response, either directly or as a Promise.  Example:​  getLicense: (spcString, contentId, licenseUrl, loadedLicenseUrl) =&gt; { const base64spc = Base64.encode(spcString); const formData = new FormData(); formData.append(&quot;spc&quot;, base64spc); return fetch(`https://license.pallycon.com/ri/licenseManager.do`, { method: &quot;POST&quot;, headers: { &quot;pallycon-customdata-v2&quot;: &quot;your-custom-header&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, }, body: formData, }) .then((response) =&gt; response.text()) .then((response) =&gt; response) .catch((error) =&gt; console.error(&quot;Error&quot;, error)); };   ","version":"v6","tagName":"h3"},{"title":"contentId​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#contentid","content":" Platforms: iOS | visionOS  Type: stringDefault: undefined  Sets the content ID for the stream. If not specified, the system uses the host value from loadingRequest.request.URL.host.  ","version":"v6","tagName":"h3"},{"title":"headers​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#headers","content":" Platforms: Android | iOS | visionOS  Type: ObjectDefault: undefined  Custom headers for the license server request.  Example:​  drm: { type: DRMType.WIDEVINE, licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense', headers: { 'X-AxDRM-Message': 'your-drm-header', }, }   ","version":"v6","tagName":"h3"},{"title":"Expo","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/expo","content":"","keywords":"","version":"v6"},{"title":"Expo Plugin​","type":1,"pageTitle":"Expo","url":"/react-native-video/docs/v6/other/expo#expo-plugin","content":" Starting from version 6.3.1, react-native-video supports an Expo plugin. You can configure react-native-video properties in the app.json, app.config.json, or app.config.js file.  This is particularly useful when using the Expo managed workflow (expo prebuild), as it automatically sets up react-native-video properties in the native part of the Expo project.  ","version":"v6","tagName":"h2"},{"title":"Example Configuration​","type":1,"pageTitle":"Expo","url":"/react-native-video/docs/v6/other/expo#example-configuration","content":" // app.json { &quot;name&quot;: &quot;my app&quot;, &quot;plugins&quot;: [ [ &quot;react-native-video&quot;, { &quot;enableNotificationControls&quot;: true, &quot;androidExtensions&quot;: { &quot;useExoplayerRtsp&quot;: false, &quot;useExoplayerSmoothStreaming&quot;: false, &quot;useExoplayerHls&quot;: false, &quot;useExoplayerDash&quot;: false } } ] ] }   ","version":"v6","tagName":"h3"},{"title":"Expo Plugin Properties​","type":1,"pageTitle":"Expo","url":"/react-native-video/docs/v6/other/expo#expo-plugin-properties","content":" Property\tType\tDefault\tDescriptionenableNotificationControls\tboolean\tfalse\tAdd required changes on android to use notification controls for video player enableBackgroundAudio\tboolean\tfalse\tAdd required changes to play video in background on iOS enableADSExtension\tboolean\tfalse\tAdd required changes to use ads extension for video player enableCacheExtension\tboolean\tfalse\tAdd required changes to use cache extension for video player on iOS androidExtensions\tobject You can enable/disable extensions as per your requirement - this allow to reduce library size on android enableAndroidPictureInPicture\tboolean\tfalse\tApply configs to be able to use Picture-in-picture on android ","version":"v6","tagName":"h2"},{"title":"licenseServer​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#licenseserver","content":" Platforms: Android | iOS | visionOS  Type: stringDefault: undefined  The license server URL that authorizes protected content playback.  ","version":"v6","tagName":"h3"},{"title":"multiDrm​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#multidrm","content":" Platform: Android  Type: booleanDefault: false  Indicates whether the DRM system should support key rotation. See Android Developer Docs for more details.  ","version":"v6","tagName":"h3"},{"title":"type​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#type","content":" Platforms: Android | iOS  Type: DRMTypeDefault: undefined  Defines the DRM type:  Android: DRMType.WIDEVINE, DRMType.PLAYREADY, DRMType.CLEARKEYiOS: DRMType.FAIRPLAY  ","version":"v6","tagName":"h3"},{"title":"localSourceEncryptionKeyScheme​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#localsourceencryptionkeyscheme","content":" Platforms: iOS | visionOS  Type: string  Sets the URL scheme for stream encryption keys used in local assets.  Example:​  localSourceEncryptionKeyScheme = &quot;my-offline-key&quot;;   ","version":"v6","tagName":"h3"},{"title":"Common Usage Scenarios​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#common-usage-scenarios","content":" ","version":"v6","tagName":"h2"},{"title":"Sending Cookies to the License Server​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#sending-cookies-to-the-license-server","content":" You can send cookies using the headers prop.  Example:​  drm: { type: DRMType.WIDEVINE, licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense', headers: { 'Cookie': 'PHPSESSID=your-session-id; csrftoken=mytoken; _gat=1; foo=bar' }, }   ","version":"v6","tagName":"h3"},{"title":"Custom License Acquisition (iOS Only)​","type":1,"pageTitle":"DRM","url":"/react-native-video/docs/v6/component/drm#custom-license-acquisition-ios-only","content":" Example:​  drm: { type: DRMType.FAIRPLAY, getLicense: (spcString) =&gt; { const base64spc = Base64.encode(spcString); return fetch('YOUR_LICENSE_SERVER_URL', { method: 'POST', headers: { 'Content-Type': 'application/json', Accept: 'application/json', }, body: JSON.stringify({ getFairplayLicense: { foo: 'bar', spcMessage: base64spc, } }) }) .then(response =&gt; response.json()) .then((response) =&gt; { if (response?.getFairplayLicenseResponse?.ckcResponse) { return response.getFairplayLicenseResponse.ckcResponse; } throw new Error('No valid response'); }) .catch((error) =&gt; console.error('CKC error', error)); } }  ","version":"v6","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/installation","content":"Installation Using npm: npm install --save react-native-video or using yarn: yarn add react-native-video Then follow the instructions for your platform to link react-native-video into your project. Specific Platform Installation iOS iOS​ Standard Method​ Run pod install in the ios directory of your project. warning From version 6.0.0, the minimum iOS version required is 13.0. For more information, see the updating section. Enable Custom Features in the Podfile​ Sample configurations are available in the sample app. See the sample pod file. Video Caching​ To enable video caching, add the following line to your Podfile: (more info here) # Enable Video Caching $RNVideoUseVideoCaching=true Google IMA​ Google IMA is the SDK for client-side ads integration. See the Google documentation for more details. To enable Google IMA, add the following line to your Podfile: $RNVideoUseGoogleIMA=true If you are using Expo, you can use the Expo plugin. Note: If you are enabling video caching (using $RNVideoUseVideoCaching), you must add the following to your Gemfile: gem &quot;cocoapods-swift-modular-headers&quot; Then, install dependencies using: bundle install bundle exec pod install This enables Swift modular headers for Swift dependencies. Android Android​ From version &gt;= 6.0.0, your application must use Kotlin version &gt;= 1.8.0. buildscript { ... ext.kotlinVersion = '1.8.0' ext.compileSdkVersion = 34 ext.targetSdkVersion = 34 ... } Enable Custom Features in the Gradle File​ If you are using Expo, you can use the Expo plugin. You can enable or disable the following features by setting the corresponding variables in your android/build.gradle file: useExoplayerIMA - Enable Google IMA SDK (ads support)useExoplayerRtsp - Enable RTSP supportuseExoplayerSmoothStreaming - Enable SmoothStreaming supportuseExoplayerDash - Enable Dash supportuseExoplayerHls - Enable HLS support Each enabled feature increases the APK size, so only enable what you need. By default, the enabled features are: useExoplayerSmoothStreaminguseExoplayerDashuseExoplayerHls Example: buildscript { ext { ... useExoplayerIMA = true useExoplayerRtsp = true useExoplayerSmoothStreaming = true useExoplayerDash = true useExoplayerHls = true ... } } See the sample app. Windows Windows​ Autolinking​ React Native Windows 0.63 and above Autolinking should automatically add react-native-video to your app. Manual Linking​ React Native Windows 0.62 Make the following manual additions: windows\\myapp.sln​ Add the ReactNativeVideoCPP project to your solution: Open your solution in Visual Studio 2019.Right-click the Solution icon in Solution Explorer &gt; Add &gt; Existing Project...Select node_modules\\react-native-video\\windows\\ReactNativeVideoCPP\\ReactNativeVideoCPP.vcxproj. windows\\myapp\\myapp.vcxproj​ Add a reference to ReactNativeVideoCPP to your main application project: Open your solution in Visual Studio 2019.Right-click the main application project &gt; Add &gt; Reference...Check ReactNativeVideoCPP from Solution Projects. pch.h​ Add: #include &quot;winrt/ReactNativeVideoCPP.h&quot; app.cpp​ Add: PackageProviders().Append(winrt::ReactNativeVideoCPP::ReactPackageProvider()); before InitializeComponent();. React Native Windows 0.61 and below Follow the manual linking steps for React Native Windows 0.62, but use ReactNativeVideoCPP61 instead of ReactNativeVideoCPP. tvOS tvOS​ react-native link react-native-video does not work properly with the tvOS target, so the library must be added manually. Steps:​ Select your project in Xcode. Select the tvOS target of your application and open the &quot;General&quot; tab. Scroll to &quot;Linked Frameworks and Libraries&quot; and click the + button. Select RCTVideo-tvOS. visionOS visionOS​ Run pod install in the visionos directory of your project. Web Web​ No additional setup is required. Everything should work out of the box. However, only basic video support is available. HLS, Dash, ads, and DRM are not currently supported.","keywords":"","version":"v6"},{"title":"Miscellaneous","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/misc","content":"","keywords":"","version":"v6"},{"title":"iOS App Transport Security​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#ios-app-transport-security","content":" By default, iOS only allows loading encrypted (https) URLs. If you need to load content from an unencrypted (http) source, you must modify your Info.plist file and add the following entry:    For more details, check this article.  ","version":"v6","tagName":"h2"},{"title":"Audio Mixing​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#audio-mixing","content":" In future versions, react-native-video will include an Audio Manager for configuring how videos mix with other audio-playing apps.  On iOS, if you want to allow background music from other apps to continue playing over your video component, update your AppDelegate.m file:  ","version":"v6","tagName":"h2"},{"title":"AppDelegate.m​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#appdelegatem","content":" #import &lt;AVFoundation/AVFoundation.h&gt; // Import the AVFoundation framework - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions { ... [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryAmbient error:nil]; // Allow background audio ... }   You can also use the ignoreSilentSwitch prop.  ","version":"v6","tagName":"h3"},{"title":"Android Expansion File Usage​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#android-expansion-file-usage","content":" Expansion files allow you to include assets exceeding the 100MB APK size limit without requiring an update every time you push a new version.  Only supports .mp4 files, and they must not be compressed.Example command to prevent compression:  zip -r -n .mp4 *.mp4 player.video.example.com   ","version":"v6","tagName":"h2"},{"title":"Example Usage in Code:​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#example-usage-in-code","content":" // Assuming &quot;background.mp4&quot; is included in your expansion file. &lt;Video source={{uri: &quot;background&quot;, mainVer: 1, patchVer: 0}} // Looks for &quot;background.mp4&quot; in the specified expansion version. resizeMode=&quot;cover&quot; // Fill the whole screen while maintaining aspect ratio. style={styles.backgroundVideo} /&gt;   ","version":"v6","tagName":"h3"},{"title":"Load Files with the React Native Asset System​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#load-files-with-the-react-native-asset-system","content":" The asset system introduced in RN 0.14 allows loading shared image resources across iOS and Android without modifying native code. As of RN 0.31, the same applies to .mp4 video assets on Android. From RN 0.33, iOS support was added. Requires react-native-video@0.9.0 or later.  ","version":"v6","tagName":"h2"},{"title":"Example:​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#example","content":" &lt;Video source={require('../assets/video/turntable.mp4')} /&gt;   ","version":"v6","tagName":"h3"},{"title":"Play in Background on iOS​","type":1,"pageTitle":"Miscellaneous","url":"/react-native-video/docs/v6/other/misc#play-in-background-on-ios","content":" To allow audio playback in the background on iOS, set the audio session to AVAudioSessionCategoryPlayback. See the Apple documentation for more details.  (Note: There is an open ticket to expose this as a prop.) ","version":"v6","tagName":"h2"},{"title":"New Architecture","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/new-arch","content":"","keywords":"","version":"v6"},{"title":"Fabric​","type":1,"pageTitle":"New Architecture","url":"/react-native-video/docs/v6/other/new-arch#fabric","content":" The library currently does not support Fabric. We are working on adding support. In the meantime, you can use the Interop Layer.  ","version":"v6","tagName":"h2"},{"title":"Interop Layer​","type":1,"pageTitle":"New Architecture","url":"/react-native-video/docs/v6/other/new-arch#interop-layer","content":" You can use this library with the New Architecture by enabling the Interop Layer.  ","version":"v6","tagName":"h2"},{"title":"Requirements:​","type":1,"pageTitle":"New Architecture","url":"/react-native-video/docs/v6/other/new-arch#requirements","content":" react-native &gt;= 0.72.0react-native-video &gt;= 6.0.0-beta.5  For react-native versions &lt; 0.74, you need to add the following configuration in the react-native.config.js file:  module.exports = { project: { android: { unstable_reactLegacyComponentNames: ['Video'], }, ios: { unstable_reactLegacyComponentNames: ['Video'], }, }, };   ","version":"v6","tagName":"h3"},{"title":"Bridgeless Mode​","type":1,"pageTitle":"New Architecture","url":"/react-native-video/docs/v6/other/new-arch#bridgeless-mode","content":" The library currently does not support Bridgeless Mode. We are working on adding support. ","version":"v6","tagName":"h2"},{"title":"Useful Projects","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/projects","content":"","keywords":"","version":"v6"},{"title":"Our (TheWidlarzGroup) Libraries​","type":1,"pageTitle":"Useful Projects","url":"/react-native-video/docs/v6/projects#our-thewidlarzgroup-libraries","content":" react-native-video-player: Our video player UI library.  ","version":"v6","tagName":"h2"},{"title":"Community Libraries​","type":1,"pageTitle":"Useful Projects","url":"/react-native-video/docs/v6/projects#community-libraries","content":" react-native-corner-video: A floating video player.react-native-track-player: A toolbox for audio playback.react-native-video-controls: A video player UI.react-native-media-console: An updated version of react-native-video-controls, rewritten in TypeScript. ","version":"v6","tagName":"h2"},{"title":"API Reference","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/","content":"","keywords":"","version":"v7 Alpha"},{"title":"Classes​","type":1,"pageTitle":"API Reference","url":"/react-native-video/docs/v7/api-reference/#classes","content":" VideoComponentErrorVideoErrorVideoPlayerVideoRuntimeError  ","version":"v7 Alpha","tagName":"h2"},{"title":"Interfaces​","type":1,"pageTitle":"API Reference","url":"/react-native-video/docs/v7/api-reference/#interfaces","content":" BandwidthDataonLoadDataonLoadStartDataonPlaybackStateChangeDataonProgressDataTextTrackTimedMetadataVideoPlayerEventsVideoViewEventsVideoViewPropsVideoViewRef  ","version":"v7 Alpha","tagName":"h2"},{"title":"Type Aliases​","type":1,"pageTitle":"API Reference","url":"/react-native-video/docs/v7/api-reference/#type-aliases","content":" IgnoreSilentSwitchModeLibraryErrorMixAudioModePlayerErrorResizeModeSourceErrorSourceTypeTimedMetadataObjectUnknownErrorVideoConfigVideoErrorCodeVideoPlayerStatusVideoSourceVideoViewError  ","version":"v7 Alpha","tagName":"h2"},{"title":"Variables​","type":1,"pageTitle":"API Reference","url":"/react-native-video/docs/v7/api-reference/#variables","content":" VideoView  ","version":"v7 Alpha","tagName":"h2"},{"title":"Functions​","type":1,"pageTitle":"API Reference","url":"/react-native-video/docs/v7/api-reference/#functions","content":" useEventuseVideoPlayer ","version":"v7 Alpha","tagName":"h2"},{"title":"Class: VideoComponentError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError","content":"","keywords":"","version":"v7 Alpha"},{"title":"Extends​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#extends","content":" VideoError&lt;VideoViewError&gt;  ","version":"v7 Alpha","tagName":"h2"},{"title":"Accessors​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#accessors","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"code​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#code","content":" Get Signature​  get code(): TCode;   Defined in: types/VideoError.ts:37  Returns​  TCode  Inherited from​  VideoError.code    ","version":"v7 Alpha","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#message","content":" Get Signature​  get message(): string;   Defined in: types/VideoError.ts:40  Returns​  string  Inherited from​  VideoError.message    ","version":"v7 Alpha","tagName":"h3"},{"title":"stack​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#stack","content":" Get Signature​  get stack(): undefined | string;   Defined in: types/VideoError.ts:44  Returns​  undefined | string  Inherited from​  VideoError.stack  ","version":"v7 Alpha","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#methods","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"toString()​","type":1,"pageTitle":"Class: VideoComponentError","url":"/react-native-video/docs/v7/api-reference/classes/VideoComponentError#tostring","content":" toString(): string;   Defined in: types/VideoError.ts:61  Returns a string representation of an object.  Returns​  string  Inherited from​  VideoError.toString ","version":"v7 Alpha","tagName":"h3"},{"title":"Updating","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/updating","content":"","keywords":"","version":"v6"},{"title":"Version 6.0.0​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v6/updating#version-600","content":" ","version":"v6","tagName":"h2"},{"title":"iOS​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v6/updating#ios","content":" Minimum iOS Version​  Starting from version 6.0.0, the minimum supported iOS version is 13.0. Projects using react-native &lt; 0.73 must set the minimum iOS version to 13.0 in the Podfile.  You can do this by adding the following code to your Podfile:  - platform :ios, min_ios_version_supported + MIN_IOS_OVERRIDE = '13.0' + if Gem::Version.new(MIN_IOS_OVERRIDE) &gt; Gem::Version.new(min_ios_version_supported) + min_ios_version_supported = MIN_IOS_OVERRIDE + end   Linking​  In your project's Podfile, add support for static dependency linking. This is required to support the new Promises subdependency in the iOS Swift conversion.  Add use_frameworks! :linkage =&gt; :static right below platform :ios in your iOS project Podfile.  See the example iOS project for reference.  Podspec​  You can remove the following lines from your Podfile as they are no longer needed:  - `pod 'react-native-video', :path =&gt; '../node_modules/react-native-video/react-native-video.podspec'` - `pod 'react-native-video/VideoCaching', :path =&gt; '../node_modules/react-native-video/react-native-video.podspec'`   If you were previously using VideoCaching, you should set the $RNVideoUseVideoCaching flag in your Podspec. See the installation section for details.  Note: If you are enabling video caching (using $RNVideoUseVideoCaching), you must add the following to your Gemfile: gem &quot;cocoapods-swift-modular-headers&quot; Then, install dependencies using: bundle install bundle exec pod install This enables Swift modular headers for Swift dependencies.  ","version":"v6","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v6/updating#android","content":" If you were using ExoPlayer on V5, remove the patch from android/settings.gradle:  - include ':react-native-video' - project(':react-native-video').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-video/android-exoplayer')   Using App Build Settings​  You need to create a project.ext section in the top-level build.gradle file (not app/build.gradle). Fill in the values from the example below using the ones found in your app/build.gradle file.  // Top-level build file where you can add configuration options common to all sub-projects/modules. buildscript { ... // Various other settings go here } allprojects { ... // Various other settings go here project.ext { compileSdkVersion = 31 buildToolsVersion = &quot;30.0.2&quot; minSdkVersion = 21 targetSdkVersion = 22 } }   If you encounter the error Could not find com.android.support:support-annotations:27.0.0., reinstall your Android Support Repository. ","version":"v6","tagName":"h3"},{"title":"Class: VideoRuntimeError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError","content":"","keywords":"","version":"v7 Alpha"},{"title":"Extends​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#extends","content":" VideoError&lt; | LibraryError| PlayerError| SourceError| UnknownError&gt;  ","version":"v7 Alpha","tagName":"h2"},{"title":"Accessors​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#accessors","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"code​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#code","content":" Get Signature​  get code(): TCode;   Defined in: types/VideoError.ts:37  Returns​  TCode  Inherited from​  VideoError.code    ","version":"v7 Alpha","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#message","content":" Get Signature​  get message(): string;   Defined in: types/VideoError.ts:40  Returns​  string  Inherited from​  VideoError.message    ","version":"v7 Alpha","tagName":"h3"},{"title":"stack​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#stack","content":" Get Signature​  get stack(): undefined | string;   Defined in: types/VideoError.ts:44  Returns​  undefined | string  Inherited from​  VideoError.stack  ","version":"v7 Alpha","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#methods","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"toString()​","type":1,"pageTitle":"Class: VideoRuntimeError","url":"/react-native-video/docs/v7/api-reference/classes/VideoRuntimeError#tostring","content":" toString(): string;   Defined in: types/VideoError.ts:61  Returns a string representation of an object.  Returns​  string  Inherited from​  VideoError.toString ","version":"v7 Alpha","tagName":"h3"},{"title":"Class: VideoError<TCode>","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/classes/VideoError","content":"","keywords":"","version":"v7 Alpha"},{"title":"Extends​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#extends","content":" Error  ","version":"v7 Alpha","tagName":"h2"},{"title":"Extended by​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#extended-by","content":" VideoComponentErrorVideoRuntimeError  ","version":"v7 Alpha","tagName":"h2"},{"title":"Type Parameters​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#type-parameters","content":" Type ParameterTCode extends VideoErrorCode  ","version":"v7 Alpha","tagName":"h2"},{"title":"Accessors​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#accessors","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"code​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#code","content":" Get Signature​  get code(): TCode;   Defined in: types/VideoError.ts:37  Returns​  TCode    ","version":"v7 Alpha","tagName":"h3"},{"title":"message​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#message","content":" Get Signature​  get message(): string;   Defined in: types/VideoError.ts:40  Returns​  string  Overrides​  Error.message     ","version":"v7 Alpha","tagName":"h3"},{"title":"stack​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#stack","content":" Get Signature​  get stack(): undefined | string;   Defined in: types/VideoError.ts:44  Returns​  undefined | string  Overrides​  Error.stack   ","version":"v7 Alpha","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#methods","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"toString()​","type":1,"pageTitle":"Class: VideoError<TCode>","url":"/react-native-video/docs/v7/api-reference/classes/VideoError#tostring","content":" toString(): string;   Defined in: types/VideoError.ts:61  Returns a string representation of an object.  Returns​  string ","version":"v7 Alpha","tagName":"h3"},{"title":"Methods","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/component/methods","content":"","keywords":"","version":"v6"},{"title":"Details​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#details","content":" ","version":"v6","tagName":"h2"},{"title":"dismissFullscreenPlayer​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#dismissfullscreenplayer","content":" Platforms: Android | iOS | web  dismissFullscreenPlayer(): Promise&lt;void&gt;   Exits fullscreen mode.  Deprecated: Use setFullScreen(false) instead.    ","version":"v6","tagName":"h3"},{"title":"pause​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#pause","content":" Platforms: Android | iOS | web  pause(): Promise&lt;void&gt;   Pauses the video.    ","version":"v6","tagName":"h3"},{"title":"presentFullscreenPlayer​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#presentfullscreenplayer","content":" Platforms: Android | iOS | web  presentFullscreenPlayer(): Promise&lt;void&gt;   Enters fullscreen mode.  On iOS, this opens a fullscreen view controller with controls.On Android, this makes the player fullscreen but requires styling to match screen dimensions.  Deprecated: Use setFullScreen(true) instead.    ","version":"v6","tagName":"h3"},{"title":"resume​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#resume","content":" Platforms: Android | iOS | web  resume(): Promise&lt;void&gt;   Resumes video playback.    ","version":"v6","tagName":"h3"},{"title":"restoreUserInterfaceForPictureInPictureStopCompleted​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#restoreuserinterfaceforpictureinpicturestopcompleted","content":" Platform: iOS  restoreUserInterfaceForPictureInPictureStopCompleted(restored);   Must be called after onRestoreUserInterfaceForPictureInPictureStop. Corresponds to Apple's restoreUserInterfaceForPictureInPictureStop.    ","version":"v6","tagName":"h3"},{"title":"save​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#save","content":" Platform: iOS  save(): Promise&lt;{ uri: string }&gt;   Saves the video to the user's Photos app with the current filter.  Notes:​  Supports MP4 export only.Exports to the cache directory with a generated UUID filename.Requires internet connection if the video is not already buffered.Video remains in the Photos app until manually deleted.Works with cached videos.  Future improvements:​  Support for multiple quality options.Support for more formats.Support for custom directory and filename.    ","version":"v6","tagName":"h3"},{"title":"enterPictureInPicture​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#enterpictureinpicture","content":" Platforms: Android | iOS | web  enterPictureInPicture();   Activates Picture-in-Picture (PiP) mode.  Android setup:​  For Expo, enable PiP in app.json:  &quot;plugins&quot;: [ [ &quot;react-native-video&quot;, { &quot;enableAndroidPictureInPicture&quot;: true } ] ]   For Bare React Native, update AndroidManifest.xml:  &lt;activity android:name=&quot;.MainActivity&quot; android:supportsPictureInPicture=&quot;true&quot;&gt; &lt;/activity&gt;   Note: On Android, entering PiP moves the app to the background.On iOS, video ads cannot start in PiP mode (Google IMA SDK).    ","version":"v6","tagName":"h3"},{"title":"exitPictureInPicture​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#exitpictureinpicture","content":" Platforms: Android | iOS | web  exitPictureInPicture();   Exits Picture-in-Picture (PiP) mode.    ","version":"v6","tagName":"h3"},{"title":"seek​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#seek","content":" Platforms: All  seek(seconds: number)   Seeks to the specified position (in seconds).  Notes:​  Must be called after onLoad.Triggers the onSeek event.  iOS Exact Seek:​  seek(seconds, tolerance: number)   Default tolerance: ±100ms.Set tolerance = 0 for precise seeking.    ","version":"v6","tagName":"h3"},{"title":"setVolume​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#setvolume","content":" Platforms: Android | iOS | web  setVolume(value: number): Promise&lt;void&gt;   Changes the volume level. Same behavior as the volume prop.    ","version":"v6","tagName":"h3"},{"title":"getCurrentPosition​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#getcurrentposition","content":" Platforms: Android | iOS | web  getCurrentPosition(): Promise&lt;number&gt;   Returns the current playback position in seconds.  Throws an error if the player is not initialized.    ","version":"v6","tagName":"h3"},{"title":"setSource​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#setsource","content":" Platforms: Android | iOS  setSource(source: ReactVideoSource): Promise&lt;void&gt;   Updates the media source dynamically.  Note: This overrides the source prop.    ","version":"v6","tagName":"h3"},{"title":"setFullScreen​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#setfullscreen","content":" Platforms: Android | iOS | web  setFullScreen(fullscreen: boolean): Promise&lt;void&gt;   Toggles fullscreen mode.  true → Enters fullscreen.false → Exits fullscreen.    ","version":"v6","tagName":"h3"},{"title":"nativeHtmlVideoRef​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#nativehtmlvideoref","content":" Platform: web  A reference to the native HTML &lt;video&gt; element. Useful for integrating third-party video libraries like hls.js, shaka, video.js, etc..    ","version":"v6","tagName":"h3"},{"title":"Example Usage​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#example-usage","content":" const videoRef = useRef&lt;VideoRef&gt;(null); const handleVideoControls = async () =&gt; { if (!videoRef.current) return; // Fullscreen controls videoRef.current.presentFullscreenPlayer(); videoRef.current.dismissFullscreenPlayer(); // Playback controls videoRef.current.pause(); videoRef.current.resume(); // Save video const response = await videoRef.current.save(); console.log(&quot;Saved video path:&quot;, response.uri); // Seek to 200s (or with tolerance on iOS) videoRef.current.seek(200); videoRef.current.seek(200, 10); }; return ( &lt;Video ref={videoRef} source={{ uri: &quot;https://www.w3schools.com/html/mov_bbb.mp4&quot; }} /&gt; );   ","version":"v6","tagName":"h3"},{"title":"Static Methods​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#static-methods","content":" ","version":"v6","tagName":"h2"},{"title":"getWidevineLevel​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#getwidevinelevel","content":" Platform: Android  getWidevineLevel(): Promise&lt;number&gt;   Returns the Widevine DRM level:  0 → Unknown / Not supported.1, 2, 3 → Supported Widevine levels.    ","version":"v6","tagName":"h3"},{"title":"isCodecSupported​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#iscodecsupported","content":" Platforms: Android | web  isCodecSupported(mimetype: string, width: number, height: number): Promise&lt;'hardware' | 'software' | 'unsupported'&gt;   Checks if the given video codec is supported.  Result\tMeaninghardware\tHardware decoding supported software\tOnly software decoding available unsupported\tCodec not supported    ","version":"v6","tagName":"h3"},{"title":"isHEVCSupported​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#ishevcsupported","content":" Platform: Android  isHEVCSupported(): Promise&lt;boolean&gt;   Checks if HEVC (H.265) is supported at 1920×1080 resolution.  Uses isCodecSupported internally.    ","version":"v6","tagName":"h3"},{"title":"Static Methods Example Usage​","type":1,"pageTitle":"Methods","url":"/react-native-video/docs/v6/component/methods#static-methods-example-usage","content":" import { VideoDecoderProperties } from &quot;react-native-video&quot;; VideoDecoderProperties.getWidevineLevel().then((level) =&gt; { console.log(&quot;Widevine Level:&quot;, level); }); VideoDecoderProperties.isCodecSupported(&quot;video/hevc&quot;, 1920, 1080).then( (support) =&gt; { console.log(&quot;HEVC Support:&quot;, support); } ); VideoDecoderProperties.isHEVCSupported().then((support) =&gt; { console.log(&quot;HEVC 1080p Support:&quot;, support); });  ","version":"v6","tagName":"h3"},{"title":"Function: useVideoPlayer()","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/functions/useVideoPlayer","content":"","keywords":"","version":"v7 Alpha"},{"title":"Parameters​","type":1,"pageTitle":"Function: useVideoPlayer()","url":"/react-native-video/docs/v7/api-reference/functions/useVideoPlayer#parameters","content":" Parameter\tType\tDescriptionsource\t| VideoSource | VideoConfig\tThe source of the video to play setup?\t(player) =&gt; void\tA function to setup the player  ","version":"v7 Alpha","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: useVideoPlayer()","url":"/react-native-video/docs/v7/api-reference/functions/useVideoPlayer#returns","content":" VideoPlayer  The VideoPlayer instance ","version":"v7 Alpha","tagName":"h2"},{"title":"Interface: onLoadStartData","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadStartData","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: onLoadStartData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadStartData#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"source​","type":1,"pageTitle":"Interface: onLoadStartData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadStartData#source","content":" source: VideoPlayerSource;   Defined in: types/Events.ts:176  The source of the video.    ","version":"v7 Alpha","tagName":"h3"},{"title":"sourceType​","type":1,"pageTitle":"Interface: onLoadStartData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadStartData#sourcetype","content":" sourceType: SourceType;   Defined in: types/Events.ts:172  The type of the source.  Note​  local for local files, network for network sources. ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: BandwidthData","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/BandwidthData","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: BandwidthData","url":"/react-native-video/docs/v7/api-reference/interfaces/BandwidthData#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"bitrate​","type":1,"pageTitle":"Interface: BandwidthData","url":"/react-native-video/docs/v7/api-reference/interfaces/BandwidthData#bitrate","content":" bitrate: number;   Defined in: types/Events.ts:128  The bitrate of the video in bits per second.    ","version":"v7 Alpha","tagName":"h3"},{"title":"height?​","type":1,"pageTitle":"Interface: BandwidthData","url":"/react-native-video/docs/v7/api-reference/interfaces/BandwidthData#height","content":" optional height: number;   Defined in: types/Events.ts:138  The height of the video in pixels.  Platform​  Android    ","version":"v7 Alpha","tagName":"h3"},{"title":"width?​","type":1,"pageTitle":"Interface: BandwidthData","url":"/react-native-video/docs/v7/api-reference/interfaces/BandwidthData#width","content":" optional width: number;   Defined in: types/Events.ts:133  The width of the video in pixels.  Platform​  android ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: onPlaybackStateChangeData","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/onPlaybackStateChangeData","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: onPlaybackStateChangeData","url":"/react-native-video/docs/v7/api-reference/interfaces/onPlaybackStateChangeData#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"isBuffering​","type":1,"pageTitle":"Interface: onPlaybackStateChangeData","url":"/react-native-video/docs/v7/api-reference/interfaces/onPlaybackStateChangeData#isbuffering","content":" isBuffering: boolean;   Defined in: types/Events.ts:187  Whether the video is buffering.    ","version":"v7 Alpha","tagName":"h3"},{"title":"isPlaying​","type":1,"pageTitle":"Interface: onPlaybackStateChangeData","url":"/react-native-video/docs/v7/api-reference/interfaces/onPlaybackStateChangeData#isplaying","content":" isPlaying: boolean;   Defined in: types/Events.ts:183  Whether the video is playing. ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: onProgressData","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/onProgressData","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: onProgressData","url":"/react-native-video/docs/v7/api-reference/interfaces/onProgressData#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"bufferDuration​","type":1,"pageTitle":"Interface: onProgressData","url":"/react-native-video/docs/v7/api-reference/interfaces/onProgressData#bufferduration","content":" bufferDuration: number;   Defined in: types/Events.ts:198  The time that player is able to play with only buffer.    ","version":"v7 Alpha","tagName":"h3"},{"title":"currentTime​","type":1,"pageTitle":"Interface: onProgressData","url":"/react-native-video/docs/v7/api-reference/interfaces/onProgressData#currenttime","content":" currentTime: number;   Defined in: types/Events.ts:194  The current time of the video in seconds. ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: TextTrack","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: TextTrack","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"id​","type":1,"pageTitle":"Interface: TextTrack","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack#id","content":" id: string;   Defined in: types/TextTrack.ts:5  Unique identifier for the text track    ","version":"v7 Alpha","tagName":"h3"},{"title":"label​","type":1,"pageTitle":"Interface: TextTrack","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack#label","content":" label: string;   Defined in: types/TextTrack.ts:10  Display label for the text track    ","version":"v7 Alpha","tagName":"h3"},{"title":"language?​","type":1,"pageTitle":"Interface: TextTrack","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack#language","content":" optional language: string;   Defined in: types/TextTrack.ts:16  Language code (ISO 639-1 or ISO 639-2)  Example​  &quot;en&quot;, &quot;es&quot;, &quot;fr&quot;     ","version":"v7 Alpha","tagName":"h3"},{"title":"selected​","type":1,"pageTitle":"Interface: TextTrack","url":"/react-native-video/docs/v7/api-reference/interfaces/TextTrack#selected","content":" selected: boolean;   Defined in: types/TextTrack.ts:21  Whether this track is currently selected ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: TimedMetadata","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/TimedMetadata","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: TimedMetadata","url":"/react-native-video/docs/v7/api-reference/interfaces/TimedMetadata#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"metadata​","type":1,"pageTitle":"Interface: TimedMetadata","url":"/react-native-video/docs/v7/api-reference/interfaces/TimedMetadata#metadata","content":" metadata: TimedMetadataObject[];   Defined in: types/Events.ts:210  The timed metadata of the video. ","version":"v7 Alpha","tagName":"h3"},{"title":"Plugins","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/other/plugin","content":"","keywords":"","version":"v6"},{"title":"Commercial Plugins​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#commercial-plugins","content":" We at The Widlarz Group have created a set of plugins for comprehensive offline video support. If you are interested, check out our Offline Video SDK. If you need additional plugins (analytics, processing, etc.), let us know.  Using or recommending our commercial software helps support the maintenance of this open-source project. Thank you!  ","version":"v6","tagName":"h2"},{"title":"Plugins for Analytics​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#plugins-for-analytics","content":" Most analytics systems that track player data (e.g., bitrate, errors) can be integrated directly with ExoPlayer or AVPlayer. This plugin system allows for non-intrusive analytics integration with react-native-video. It should be implemented in native languages (Kotlin/Swift) to ensure efficiency.  The goal is to enable easy analytics integration without modifying react-native-video itself.  ","version":"v6","tagName":"h2"},{"title":"Warnings & Considerations​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#warnings--considerations","content":" This is an experimental API and may change over time. The API is simple yet flexible enough to implement analytics systems. If additional metadata is needed, you should implement a setter in your custom package.  Since the API is flexible, misuse is possible. The player handle should be treated as read-only. Modifying player behavior may cause unexpected issues in react-native-video.  ","version":"v6","tagName":"h2"},{"title":"General Setup​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#general-setup","content":" First, create a new React Native package:  npx create-react-native-library@latest react-native-video-custom-analytics   Both Android and iOS implementations expose an RNVPlugin interface. Your react-native-video-custom-analytics package should implement this interface and register itself as a plugin for react-native-video.  ","version":"v6","tagName":"h2"},{"title":"Plugin Types​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#plugin-types","content":" There are two types of plugins you can implement:  Base Plugin (RNVPlugin): For general-purpose plugins that don't need specific player implementation details.Player-Specific Plugins: RNVAVPlayerPlugin for iOS: Provides type-safe access to AVPlayer instancesRNVExoplayerPlugin for Android: Provides type-safe access to ExoPlayer instances  Choose the appropriate plugin type based on your needs. If you need direct access to player-specific APIs, use the player-specific plugin classes.  ","version":"v6","tagName":"h2"},{"title":"Android Implementation​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#android-implementation","content":" ","version":"v6","tagName":"h2"},{"title":"1. Create the Plugin​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#1-create-the-plugin","content":" You can implement either the base RNVPlugin interface or the player-specific RNVExoplayerPlugin interface.  Base Plugin​  class MyAnalyticsPlugin : RNVPlugin { override fun onInstanceCreated(id: String, player: Any) { // Handle player creation } override fun onInstanceRemoved(id: String, player: Any) { // Handle player removal } }   ExoPlayer-Specific Plugin​  class MyExoPlayerAnalyticsPlugin : RNVExoplayerPlugin { override fun onInstanceCreated(id: String, player: ExoPlayer) { // Handle ExoPlayer creation with type-safe access } override fun onInstanceRemoved(id: String, player: ExoPlayer) { // Handle ExoPlayer removal with type-safe access } }   The RNVPlugin interface defines two functions:  /** * Function called when a new player is created * @param id: a random string identifying the player * @param player: the instantiated player reference */ fun onInstanceCreated(id: String, player: Any) /** * Function called when a player should be destroyed * when this callback is called, the plugin shall free all * resources and release all reference to Player object * @param id: a random string identifying the player * @param player: the player to release */ fun onInstanceRemoved(id: String, player: Any)   ","version":"v6","tagName":"h3"},{"title":"2. Register the Plugin​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#2-register-the-plugin","content":" To register the plugin within the main react-native-video package, call:  ReactNativeVideoManager.getInstance().registerPlugin(plugin)   In the sample implementation, the plugin is registered in the createNativeModules entry point.  Once registered, your module can track player updates and report analytics data.  ","version":"v6","tagName":"h3"},{"title":"Extending Core Functionality via Plugins​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#extending-core-functionality-via-plugins","content":" In addition to analytics, plugins can also be used to modify or override core behavior of react-native-video.  This allows native modules to deeply integrate with the playback system - for example:  replacing the media source factory,modifying the media item before playback starts (e.g., injecting stream keys),disabling caching dynamically per source.  These capabilities are available through the advanced Android plugin interface: RNVExoplayerPlugin.  warning These extension points are optional — if no plugin provides them, the player behaves exactly as it did before.    Plugin Extension Points (Android)​  If your plugin implements RNVExoplayerPlugin, you can override the following methods:  1. overrideMediaItemBuilder​  Allows you to modify the MediaItem.Builder before it’s used. You can inject stream keys, cache keys, or override URIs.  override fun overrideMediaItemBuilder( source: Source, mediaItemBuilder: MediaItem.Builder ): MediaItem.Builder? { // Return modified builder or null to use default }   2. overrideMediaDataSourceFactory​  Lets you replace the data source used by ExoPlayer. Useful for implementing read-only cache or request interception.  override fun overrideMediaDataSourceFactory( source: Source, mediaDataSourceFactory: DataSource.Factory ): DataSource.Factory? { // Return your custom factory or null to use default }   3. overrideMediaSourceFactory​  Allows you to override the default MediaSource.Factory used by ExoPlayer for creating media sources. Use this if you need to inject a custom media source implementation. If you return null, the default media source factory will be used.  override fun overrideMediaSourceFactory( source: Source, mediaSourceFactory: MediaSource.Factory, mediaDataSourceFactory: DataSource.Factory ): MediaSource.Factory? { // Return your custom factory or null to use default }   4. shouldDisableCache​  Enables dynamic disabling of the caching system per source.  override fun shouldDisableCache(source: Source): Boolean { return true // your own logic }     Once implemented, react-native-video will automatically invoke these methods for each &lt;Video /&gt; instance.  ","version":"v6","tagName":"h3"},{"title":"iOS Implementation​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#ios-implementation","content":" ","version":"v6","tagName":"h2"},{"title":"1. Podspec Integration​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#1-podspec-integration","content":" Your new module must have access to react-native-video. Add it as a dependency in your Podspec file:  s.dependency &quot;react-native-video&quot;   ","version":"v6","tagName":"h3"},{"title":"2. Create the Plugin​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#2-create-the-plugin","content":" You can implement either the base RNVPlugin class or the player-specific RNVAVPlayerPlugin class.  Base Plugin​  class MyAnalyticsPlugin: RNVPlugin { override func onInstanceCreated(id: String, player: Any) { // Handle player creation } override func onInstanceRemoved(id: String, player: Any) { // Handle player removal } }   AVPlayer-Specific Plugin​  class MyAVPlayerAnalyticsPlugin: RNVAVPlayerPlugin { override func onInstanceCreated(id: String, player: AVPlayer) { // Handle AVPlayer creation with type-safe access } override func onInstanceRemoved(id: String, player: AVPlayer) { // Handle AVPlayer removal with type-safe access } /// Optionally override the asset used by the player before playback starts override func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -&gt; OverridePlayerAssetResult? { // Return a modified asset or nil to use the default return nil } }   The RNVAVPlayerPlugin class defines several extension points:  /** * Function called when a new AVPlayer instance is created * @param id: a random string identifying the player * @param player: the instantiated AVPlayer */ open func onInstanceCreated(id: String, player: AVPlayer) { /* no-op */ } /** * Function called when an AVPlayer instance is being removed * @param id: a random string identifying the player * @param player: the AVPlayer to release */ open func onInstanceRemoved(id: String, player: AVPlayer) { /* no-op */ } /** * Optionally override the asset used by the player before playback starts. * Allows you to modify or replace the AVAsset before it is used to create the AVPlayerItem. * Return nil to use the default asset. * * @param source: The VideoSource describing the video (uri, type, headers, etc.) * @param asset: The AVAsset prepared by the player * @return: OverridePlayerAssetResult if you want to override, or nil to use the default */ open func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -&gt; OverridePlayerAssetResult? { nil }   OverridePlayerAssetResult and OverridePlayerAssetType​  To override the asset, return an OverridePlayerAssetResult:  public struct OverridePlayerAssetResult { public let type: OverridePlayerAssetType public let asset: AVAsset public init(type: OverridePlayerAssetType, asset: AVAsset) { self.type = type self.asset = asset } } public enum OverridePlayerAssetType { case partial // Return a partially modified asset; will go through the default prepare process case full // Return a fully modified asset; will skip the default prepare process }   Use .partial if you want the asset to continue through the player's normal preparation (e.g., for text tracks or metadata injection).Use .full if you want to provide a fully prepared asset that will be used as-is for playback.  Example:  override func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -&gt; OverridePlayerAssetResult? { // Example: Replace the asset URL let newAsset = AVAsset(url: URL(string: &quot;https://example.com/override.mp4&quot;)!) return Result(type: .full, asset: newAsset) }   Only one plugin can override the player asset at a time. If multiple plugins implement this, only the first will be used.  ","version":"v6","tagName":"h3"},{"title":"3. Register the Plugin​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#3-register-the-plugin","content":" To register the plugin in react-native-video, call:  ReactNativeVideoManager.shared.registerPlugin(plugin: plugin)   In the sample implementation, the plugin is registered inside the VideoPluginSample file within the init function:  import react_native_video ... override init() { super.init() ReactNativeVideoManager.shared.registerPlugin(plugin: self) }   Once registered, your module can track player updates and report analytics data to your backend.  ","version":"v6","tagName":"h3"},{"title":"Custom DRM Manager​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#custom-drm-manager","content":" You can provide a custom DRM manager through your plugin to handle DRM in a custom way. This is useful when you need to integrate with a specific DRM provider or implement custom DRM logic.  ","version":"v6","tagName":"h2"},{"title":"Android Implementation​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#android-implementation-1","content":" 1/ Create custom DRM manager​  Create a class that implements the DRMManagerSpec interface:  class CustomDRMManager : DRMManagerSpec { @Throws(UnsupportedDrmException::class) override fun buildDrmSessionManager(uuid: UUID, drmProps: DRMProps): DrmSessionManager? { // Your custom implementation for building DRM session manager // Return null if the DRM scheme is not supported // Throw UnsupportedDrmException if the DRM scheme is invalid } }   2/ Register DRM manager in your plugin​  Implement getDRMManager() in your ExoPlayer plugin to provide the custom DRM manager:  class CustomVideoPlugin : RNVExoplayerPlugin { private val drmManager = CustomDRMManager() override fun getDRMManager(): DRMManagerSpec? { return drmManager } override fun onInstanceCreated(id: String, player: ExoPlayer) { // Handle player creation } override fun onInstanceRemoved(id: String, player: ExoPlayer) { // Handle player removal } }   ","version":"v6","tagName":"h3"},{"title":"iOS Implementation​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#ios-implementation-1","content":" 1/ Create custom DRM manager​  Create a class that implements the DRMManagerSpec protocol:  class CustomDRMManager: NSObject, DRMManagerSpec { func createContentKeyRequest( asset: AVContentKeyRecipient, drmProps: DRMParams?, reactTag: NSNumber?, onVideoError: RCTDirectEventBlock?, onGetLicense: RCTDirectEventBlock? ) { // Initialize content key session and handle key request } func handleContentKeyRequest(keyRequest: AVContentKeyRequest) { // Process the content key request } func finishProcessingContentKeyRequest(keyRequest: AVContentKeyRequest, license: Data) throws { // Finish processing the key request with the obtained license } func handleError(_ error: Error, for keyRequest: AVContentKeyRequest) { // Handle any errors during the DRM process } func setJSLicenseResult(license: String, licenseUrl: String) { // Handle successful license acquisition from JS side } func setJSLicenseError(error: String, licenseUrl: String) { // Handle license acquisition errors from JS side } }   2/ Register DRM manager in your plugin​  Implement getDRMManager() in your AVPlayer plugin to provide the custom DRM manager:  class CustomVideoPlugin: RNVAVPlayerPlugin { override func getDRMManager() -&gt; DRMManagerSpec? { return CustomDRMManager() } override func onInstanceCreated(id: String, player: AVPlayer) { // Handle player creation } override func onInstanceRemoved(id: String, player: AVPlayer) { // Handle player removal } }   ","version":"v6","tagName":"h3"},{"title":"Important notes about DRM managers:​","type":1,"pageTitle":"Plugins","url":"/react-native-video/docs/v6/other/plugin#important-notes-about-drm-managers","content":" Only one plugin can provide a DRM manager at a time. If multiple plugins try to provide DRM managers, only the first one will be used.The custom DRM manager will be used for all video instances in the app.If no custom DRM manager is provided: On iOS, the default FairPlay-based implementation will be usedOn Android, the default ExoPlayer DRM implementation will be used The DRM manager must handle all DRM-related functionality: On iOS: key requests, license acquisition, and error handling through AVContentKeySessionOn Android: DRM session management and license acquisition through ExoPlayer's DrmSessionManager ","version":"v6","tagName":"h3"},{"title":"Function: useEvent()","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/functions/useEvent","content":"","keywords":"","version":"v7 Alpha"},{"title":"Type Parameters​","type":1,"pageTitle":"Function: useEvent()","url":"/react-native-video/docs/v7/api-reference/functions/useEvent#type-parameters","content":" Type ParameterT extends Events  ","version":"v7 Alpha","tagName":"h2"},{"title":"Parameters​","type":1,"pageTitle":"Function: useEvent()","url":"/react-native-video/docs/v7/api-reference/functions/useEvent#parameters","content":" Parameter\tType\tDescriptionplayer\tVideoPlayer\tThe player to attach the event to event\tT\tThe name of the event to attach the callback to callback\t(...args) =&gt; void\tThe callback for the event  ","version":"v7 Alpha","tagName":"h2"},{"title":"Returns​","type":1,"pageTitle":"Function: useEvent()","url":"/react-native-video/docs/v7/api-reference/functions/useEvent#returns","content":" void ","version":"v7 Alpha","tagName":"h2"},{"title":"Interface: VideoViewEvents","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"onFullscreenChange()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#onfullscreenchange","content":" onFullscreenChange: (fullscreen) =&gt; void;   Defined in: types/Events.ts:105  Called when the video view's fullscreen state changes.  Parameters​  Parameter\tType\tDescriptionfullscreen\tboolean\tWhether the video view is in fullscreen mode.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onPictureInPictureChange()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#onpictureinpicturechange","content":" onPictureInPictureChange: (isInPictureInPicture) =&gt; void;   Defined in: types/Events.ts:100  Called when the video view's picture in picture state changes.  Parameters​  Parameter\tType\tDescriptionisInPictureInPicture\tboolean\tWhether the video view is in picture in picture mode.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"willEnterFullscreen()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#willenterfullscreen","content":" willEnterFullscreen: () =&gt; void;   Defined in: types/Events.ts:109  Called when the video view will enter fullscreen mode.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"willEnterPictureInPicture()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#willenterpictureinpicture","content":" willEnterPictureInPicture: () =&gt; void;   Defined in: types/Events.ts:117  Called when the video view will enter picture in picture mode.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"willExitFullscreen()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#willexitfullscreen","content":" willExitFullscreen: () =&gt; void;   Defined in: types/Events.ts:113  Called when the video view will exit fullscreen mode.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"willExitPictureInPicture()​","type":1,"pageTitle":"Interface: VideoViewEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewEvents#willexitpictureinpicture","content":" willExitPictureInPicture: () =&gt; void;   Defined in: types/Events.ts:121  Called when the video view will exit picture in picture mode.  Returns​  void ","version":"v7 Alpha","tagName":"h3"},{"title":"Type Alias: IgnoreSilentSwitchMode","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/IgnoreSilentSwitchMode","content":"Type Alias: IgnoreSilentSwitchMode type IgnoreSilentSwitchMode = &quot;auto&quot; | &quot;ignore&quot; | &quot;obey&quot;; Defined in: types/IgnoreSilentSwitchMode.ts:1","keywords":"","version":"v7 Alpha"},{"title":"Interface: VideoViewProps","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps","content":"","keywords":"","version":"v7 Alpha"},{"title":"Extends​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#extends","content":" Partial&lt;VideoViewEvents&gt;.ViewProps  ","version":"v7 Alpha","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"autoEnterPictureInPicture?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#autoenterpictureinpicture","content":" optional autoEnterPictureInPicture: boolean;   Defined in: video-view/VideoView.tsx:34  Whether to automatically enter picture in picture mode when the video is playing. Defaults to false.    ","version":"v7 Alpha","tagName":"h3"},{"title":"controls?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#controls","content":" optional controls: boolean;   Defined in: video-view/VideoView.tsx:26  Whether to show the controls. Defaults to false.    ","version":"v7 Alpha","tagName":"h3"},{"title":"onFullscreenChange()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#onfullscreenchange","content":" optional onFullscreenChange: (fullscreen) =&gt; void;   Defined in: types/Events.ts:105  Called when the video view's fullscreen state changes.  Parameters​  Parameter\tType\tDescriptionfullscreen\tboolean\tWhether the video view is in fullscreen mode.  Returns​  void  Inherited from​  Partial.onFullscreenChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onPictureInPictureChange()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#onpictureinpicturechange","content":" optional onPictureInPictureChange: (isInPictureInPicture) =&gt; void;   Defined in: types/Events.ts:100  Called when the video view's picture in picture state changes.  Parameters​  Parameter\tType\tDescriptionisInPictureInPicture\tboolean\tWhether the video view is in picture in picture mode.  Returns​  void  Inherited from​  Partial.onPictureInPictureChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"pictureInPicture?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#pictureinpicture","content":" optional pictureInPicture: boolean;   Defined in: video-view/VideoView.tsx:30  Whether to enable &amp; show the picture in picture button in native controls. Defaults to false.    ","version":"v7 Alpha","tagName":"h3"},{"title":"player​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#player","content":" player: VideoPlayer;   Defined in: video-view/VideoView.tsx:18  The player to play the video - VideoPlayer    ","version":"v7 Alpha","tagName":"h3"},{"title":"resizeMode?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#resizemode","content":" optional resizeMode: ResizeMode;   Defined in: video-view/VideoView.tsx:42  How the video should be resized to fit the view. Defaults to 'none'.  'contain': Scale the video uniformly (maintain aspect ratio) so that it fits entirely within the view'cover': Scale the video uniformly (maintain aspect ratio) so that it fills the entire view (may crop)'stretch': Scale the video to fill the entire view without maintaining aspect ratio'none': Do not resize the video    ","version":"v7 Alpha","tagName":"h3"},{"title":"style?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#style","content":" optional style: ViewStyle;   Defined in: video-view/VideoView.tsx:22  The style of the video view - ViewStyle  Overrides​  ViewProps.style     ","version":"v7 Alpha","tagName":"h3"},{"title":"willEnterFullscreen()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#willenterfullscreen","content":" optional willEnterFullscreen: () =&gt; void;   Defined in: types/Events.ts:109  Called when the video view will enter fullscreen mode.  Returns​  void  Inherited from​  Partial.willEnterFullscreen     ","version":"v7 Alpha","tagName":"h3"},{"title":"willEnterPictureInPicture()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#willenterpictureinpicture","content":" optional willEnterPictureInPicture: () =&gt; void;   Defined in: types/Events.ts:117  Called when the video view will enter picture in picture mode.  Returns​  void  Inherited from​  Partial.willEnterPictureInPicture     ","version":"v7 Alpha","tagName":"h3"},{"title":"willExitFullscreen()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#willexitfullscreen","content":" optional willExitFullscreen: () =&gt; void;   Defined in: types/Events.ts:113  Called when the video view will exit fullscreen mode.  Returns​  void  Inherited from​  Partial.willExitFullscreen     ","version":"v7 Alpha","tagName":"h3"},{"title":"willExitPictureInPicture()?​","type":1,"pageTitle":"Interface: VideoViewProps","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewProps#willexitpictureinpicture","content":" optional willExitPictureInPicture: () =&gt; void;   Defined in: types/Events.ts:121  Called when the video view will exit picture in picture mode.  Returns​  void  Inherited from​  Partial.willExitPictureInPicture  ","version":"v7 Alpha","tagName":"h3"},{"title":"Type Alias: MixAudioMode","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/MixAudioMode","content":"Type Alias: MixAudioMode type MixAudioMode = &quot;mixWithOthers&quot; | &quot;doNotMix&quot; | &quot;duckOthers&quot; | &quot;auto&quot;; Defined in: types/MixAudioMode.ts:1","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: LibraryError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/LibraryError","content":"Type Alias: LibraryError type LibraryError = &quot;library/deallocated&quot; | &quot;library/application-context-not-found&quot;; Defined in: types/VideoError.ts:1","keywords":"","version":"v7 Alpha"},{"title":"Interface: VideoPlayerEvents","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"onAudioBecomingNoisy()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onaudiobecomingnoisy","content":" onAudioBecomingNoisy: () =&gt; void;   Defined in: types/Events.ts:11  Called when the audio becomes noisy.  Returns​  void  Platform​  Android    ","version":"v7 Alpha","tagName":"h3"},{"title":"onAudioFocusChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onaudiofocuschange","content":" onAudioFocusChange: (hasAudioFocus) =&gt; void;   Defined in: types/Events.ts:17  Called when the audio focus changes.  Parameters​  Parameter\tType\tDescriptionhasAudioFocus\tboolean\tWhether the audio has focus.  Returns​  void  Platform​  Android    ","version":"v7 Alpha","tagName":"h3"},{"title":"onBandwidthUpdate()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onbandwidthupdate","content":" onBandwidthUpdate: (data) =&gt; void;   Defined in: types/Events.ts:21  Called when the bandwidth of the video changes.  Parameters​  Parameter\tTypedata\tBandwidthData  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onBuffer()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onbuffer","content":" onBuffer: (buffering) =&gt; void;   Defined in: types/Events.ts:26  Called when the video is buffering.  Parameters​  Parameter\tType\tDescriptionbuffering\tboolean\tWhether the video is buffering.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onControlsVisibleChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#oncontrolsvisiblechange","content":" onControlsVisibleChange: (visible) =&gt; void;   Defined in: types/Events.ts:31  Called when the video view's controls visibility changes.  Parameters​  Parameter\tType\tDescriptionvisible\tboolean\tWhether the video view's controls are visible.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onEnd()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onend","content":" onEnd: () =&gt; void;   Defined in: types/Events.ts:35  Called when the video ends.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onExternalPlaybackChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onexternalplaybackchange","content":" onExternalPlaybackChange: (externalPlaybackActive) =&gt; void;   Defined in: types/Events.ts:41  Called when the external playback state changes.  Parameters​  Parameter\tType\tDescriptionexternalPlaybackActive\tboolean\tWhether the external playback is active.  Returns​  void  Platform​  iOS    ","version":"v7 Alpha","tagName":"h3"},{"title":"onLoad()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onload","content":" onLoad: (data) =&gt; void;   Defined in: types/Events.ts:46  Called when the video is loaded.  Parameters​  Parameter\tTypedata\tonLoadData  Returns​  void  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad    ","version":"v7 Alpha","tagName":"h3"},{"title":"onLoadStart()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onloadstart","content":" onLoadStart: (data) =&gt; void;   Defined in: types/Events.ts:51  Called when the video starts loading.  Parameters​  Parameter\tTypedata\tonLoadStartData  Returns​  void  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad    ","version":"v7 Alpha","tagName":"h3"},{"title":"onPlaybackRateChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onplaybackratechange","content":" onPlaybackRateChange: (rate) =&gt; void;   Defined in: types/Events.ts:59  Called when the player playback rate changes.  Parameters​  Parameter\tTyperate\tnumber  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onPlaybackStateChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onplaybackstatechange","content":" onPlaybackStateChange: (data) =&gt; void;   Defined in: types/Events.ts:55  Called when the player playback state changes.  Parameters​  Parameter\tTypedata\tonPlaybackStateChangeData  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onProgress()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onprogress","content":" onProgress: (data) =&gt; void;   Defined in: types/Events.ts:63  Called when the player progress changes.  Parameters​  Parameter\tTypedata\tonProgressData  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onReadyToDisplay()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onreadytodisplay","content":" onReadyToDisplay: () =&gt; void;   Defined in: types/Events.ts:67  Called when the video is ready to display.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onSeek()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onseek","content":" onSeek: (seekTime) =&gt; void;   Defined in: types/Events.ts:71  Called when the player seeks.  Parameters​  Parameter\tTypeseekTime\tnumber  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onStatusChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onstatuschange","content":" onStatusChange: (status) =&gt; void;   Defined in: types/Events.ts:92  Called when the player status changes.  Parameters​  Parameter\tTypestatus\tVideoPlayerStatus  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onTextTrackDataChanged()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#ontexttrackdatachanged","content":" onTextTrackDataChanged: (texts) =&gt; void;   Defined in: types/Events.ts:79  Called when the text track (currently displayed subtitle) data changes.  Parameters​  Parameter\tTypetexts\tstring[]  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onTimedMetadata()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#ontimedmetadata","content":" onTimedMetadata: (metadata) =&gt; void;   Defined in: types/Events.ts:75  Called when player receives timed metadata.  Parameters​  Parameter\tTypemetadata\tTimedMetadata  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onTrackChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#ontrackchange","content":" onTrackChange: (track) =&gt; void;   Defined in: types/Events.ts:84  Called when the selected text track changes.  Parameters​  Parameter\tType\tDescriptiontrack\tnull | TextTrack\tThe newly selected text track, or null if no track is selected  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"onVolumeChange()​","type":1,"pageTitle":"Interface: VideoPlayerEvents","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoPlayerEvents#onvolumechange","content":" onVolumeChange: (volume) =&gt; void;   Defined in: types/Events.ts:88  Called when the volume of the player changes.  Parameters​  Parameter\tTypevolume\tnumber  Returns​  void ","version":"v7 Alpha","tagName":"h3"},{"title":"Events","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/component/events","content":"","keywords":"","version":"v6"},{"title":"Details​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#details","content":" ","version":"v6","tagName":"h2"},{"title":"onAudioBecomingNoisy​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onaudiobecomingnoisy","content":" Platforms: Android | iOS  Triggered when audio output changes (e.g., switching from headphones to speakers). It's recommended to pause the media when this event occurs.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onAudioFocusChanged​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onaudiofocuschanged","content":" Platform: Android  Called when audio focus is gained or lost.  Payload:  Property\tType\tDescriptionhasAudioFocus\tboolean\ttrue if media has audio focus, false otherwise  Example:  { hasAudioFocus: true; }     ","version":"v6","tagName":"h3"},{"title":"onAudioTracks​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onaudiotracks","content":" Platforms: Android | iOS  Triggered when available audio tracks change.  Payload: Array of objects with track details  Property\tType\tDescriptionindex\tnumber\tInternal track ID title\tstring\tDescriptive track name language\tstring\tISO 639-1 language code bitrate\tnumber\tTrack bitrate type\tstring\tTrack MIME type selected\tboolean\ttrue if track is currently playing  Example:  { audioTracks: [ { language: &quot;es&quot;, title: &quot;Spanish&quot;, type: &quot;audio/mpeg&quot;, index: 0, selected: true, }, { language: &quot;en&quot;, title: &quot;English&quot;, type: &quot;audio/mpeg&quot;, index: 1 }, ]; }     ","version":"v6","tagName":"h3"},{"title":"onBandwidthUpdate​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onbandwidthupdate","content":" Platforms: Android | iOS  Called when available bandwidth changes.  Payload:  Property\tType\tDescriptionbitrate\tnumber\tEstimated bitrate in bits/sec width\tnumber\tVideo width (Android only) height\tnumber\tVideo height (Android only) trackId\tstring\tVideo track ID (Android only)  Example (iOS):  { bitrate: 1000000; }   Example (Android):  { bitrate: 1000000, width: 1920, height: 1080, trackId: 'some-track-id' }   Note: On Android, set the reportBandwidth prop to enable this event.    ","version":"v6","tagName":"h3"},{"title":"onBuffer​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onbuffer","content":" Platforms: Android | iOS | web  Triggered when buffering starts or stops.  Payload:  Property\tType\tDescriptionisBuffering\tboolean\ttrue if buffering is active  Example:  { isBuffering: true; }     ","version":"v6","tagName":"h3"},{"title":"onControlsVisibilityChange​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#oncontrolsvisibilitychange","content":" Platform: Android  Triggered when the video player controls become visible or hidden.  Payload:  Property\tType\tDescriptionisVisible\tboolean\ttrue if controls are visible  Example:  { isVisible: true; }     ","version":"v6","tagName":"h3"},{"title":"onEnd​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onend","content":" Platforms: All  Triggered when the media reaches the end.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onError​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onerror","content":" Platforms: All  Called when a playback error occurs.  Payload:  Property\tType\tDescriptionerror\tobject\tError details    ","version":"v6","tagName":"h3"},{"title":"onExternalPlaybackChange​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onexternalplaybackchange","content":" Platform: iOS  Called when external playback mode changes (e.g., Apple TV connection/disconnection).  Payload:  Property\tType\tDescriptionisExternalPlaybackActive\tboolean\ttrue if external playback is active  Example:  { isExternalPlaybackActive: true; }     ","version":"v6","tagName":"h3"},{"title":"onFullscreenPlayerWillPresent​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onfullscreenplayerwillpresent","content":" Platforms: Android | iOS | visionOS  Called before entering fullscreen mode.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onFullscreenPlayerDidPresent​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onfullscreenplayerdidpresent","content":" Platforms: Android | iOS | visionOS  Called when fullscreen mode is active.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onFullscreenPlayerWillDismiss​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onfullscreenplayerwilldismiss","content":" Platforms: Android | iOS | visionOS  Called before exiting fullscreen mode.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onFullscreenPlayerDidDismiss​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onfullscreenplayerdiddismiss","content":" Platforms: Android | iOS | visionOS  Called when fullscreen mode is exited.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onLoad​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onload","content":" Platforms: All  Triggered when the media is loaded and ready to play.  ","version":"v6","tagName":"h3"},{"title":"Payload:​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#payload","content":" Property\tType\tDescriptioncurrentTime\tnumber\tTime in seconds where the media will start duration\tnumber\tLength of the media in seconds naturalSize\tobject\tProperties: width - Width in pixels that the video was encoded at height - Height in pixels that the video was encoded at orientation - &quot;portrait&quot;, &quot;landscape&quot; or &quot;square&quot; audioTracks\tarray\tAn array of audio track info objects with the following properties: index - Index number title - Description of the track language - 2 letter ISO 639-1 or 3 letter ISO639-2 language code type - Mime type of track textTracks\tarray\tAn array of text track info objects with the following properties: index - Index number title - Description of the track language - 2 letter ISO 639-1 or 3 letter ISO 639-2 language code type - Mime type of track videoTracks\tarray\tAn array of video track info objects with the following properties: trackId - ID for the track bitrate - Bit rate in bits per second codecs - Comma separated list of codecs height - Height of the video width - Width of the video trackId\tstring\tProvide key information about the video track, typically including: Resolution, Bitrate.  Example:  { canPlaySlowForward: true, canPlayReverse: false, canPlaySlowReverse: false, canPlayFastForward: false, canStepForward: false, canStepBackward: false, currentTime: 0, duration: 5910.208984375, naturalSize: { height: 1080 orientation: 'landscape' width: '1920' }, audioTracks: [ { language: 'es', title: 'Spanish', type: 'audio/mpeg', index: 0 }, { language: 'en', title: 'English', type: 'audio/mpeg', index: 1 } ], textTracks: [ { title: '#1 French', language: 'fr', index: 0, type: 'text/vtt' }, { title: '#2 English CC', language: 'en', index: 1, type: 'text/vtt' }, { title: '#3 English Director Commentary', language: 'en', index: 2, type: 'text/vtt' } ], videoTracks: [ { index: 0, bitrate: 3987904, codecs: &quot;avc1.640028&quot;, height: 720, trackId: &quot;f1-v1-x3&quot;, width: 1280 }, { index: 1, bitrate: 7981888, codecs: &quot;avc1.640028&quot;, height: 1080, trackId: &quot;f2-v1-x3&quot;, width: 1920 }, { index: 2, bitrate: 1994979, codecs: &quot;avc1.4d401f&quot;, height: 480, trackId: &quot;f3-v1-x3&quot;, width: 848 } ], trackId: &quot;720p 2400kbps&quot;, }   Note: audioTracks, textTracks, and videoTracks are not available on the web.    ","version":"v6","tagName":"h3"},{"title":"onLoadStart​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onloadstart","content":" Platforms: All  Triggered when media starts loading.  Payload:  Property\tType\tDescriptionisNetwork\tboolean\ttrue if media is loaded from a network type\tstring\tMedia type (not available on Windows) uri\tstring\tMedia source URI (not available on Windows)  Example:  { isNetwork: true, type: '', uri: 'https://example.com/video.mp4' }     ","version":"v6","tagName":"h3"},{"title":"onPlaybackStateChanged​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onplaybackstatechanged","content":" Platforms: Android | iOS | visionOS | web  Triggered when playback state changes.  Payload:  Property\tType\tDescriptionisPlaying\tboolean\ttrue if media is playing isSeeking\tboolean\ttrue if seeking is in progress  Example:  { isPlaying: true, isSeeking: false }     ","version":"v6","tagName":"h3"},{"title":"onPictureInPictureStatusChanged​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onpictureinpicturestatuschanged","content":" Platforms: iOS | Android | web  Triggered when Picture-in-Picture (PiP) mode is activated or deactivated.  Payload:  Property\tType\tDescriptionisActive\tboolean\ttrue if PiP mode is active  Example:  { isActive: true; }     ","version":"v6","tagName":"h3"},{"title":"onPlaybackRateChange​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onplaybackratechange","content":" Platforms: All  Triggered when playback speed changes.  Payload:  Property\tType\tDescriptionplaybackRate\tnumber\t0 (paused), 1 (normal speed), other values indicate speed changes  Example:  { playbackRate: 0; // indicates paused }     ","version":"v6","tagName":"h3"},{"title":"onProgress​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onprogress","content":" Platforms: All  Triggered every progressUpdateInterval milliseconds, providing information about the current playback position.  Payload:  Property\tType\tDescriptioncurrentTime\tnumber\tCurrent playback position (seconds) playableDuration\tnumber\tDuration that can be played using only the buffer (seconds) seekableDuration\tnumber\tDuration that can be seeked to (usually the total length of the media)  Example:  { currentTime: 5.2, playableDuration: 34.6, seekableDuration: 888 }     ","version":"v6","tagName":"h3"},{"title":"onReadyForDisplay​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onreadyfordisplay","content":" Platforms: Android | iOS | Web  Triggered when the first video frame is ready to be displayed. This is when the poster is removed.  Payload: none  iOS: readyForDisplayAndroid: STATE_READY    ","version":"v6","tagName":"h3"},{"title":"onReceiveAdEvent​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onreceiveadevent","content":" Platforms: Android | iOS  Triggered when an AdEvent is received from the IMA SDK.  Enum AdEvent possible values for Android and iOS:  AdEvent Event\tPlatform\tDescriptionAD_BREAK_ENDED\tiOS\tFired the first time each ad break ends. Applications must reenable seeking when this occurs (only used for dynamic ad insertion). AD_BREAK_READY\tAndroid, iOS\tFires when an ad rule or a VMAP ad break would have played if autoPlayAdBreaks is false. AD_BREAK_STARTED\tiOS\tFired first time each ad break begins playback. If an ad break is watched subsequent times this will not be fired. Applications must disable seeking when this occurs (only used for dynamic ad insertion). AD_BUFFERING\tAndroid\tFires when the ad has stalled playback to buffer. AD_CAN_PLAY\tAndroid\tFires when the ad is ready to play without buffering, either at the beginning of the ad or after buffering completes. AD_METADATA\tAndroid\tFires when an ads list is loaded. AD_PERIOD_ENDED\tiOS\tFired every time the stream switches from advertising or slate to content. This will be fired even when an ad is played a second time or when seeking into an ad (only used for dynamic ad insertion). AD_PERIOD_STARTED\tiOS\tFired every time the stream switches from content to advertising or slate. This will be fired even when an ad is played a second time or when seeking into an ad (only used for dynamic ad insertion). AD_PROGRESS\tAndroid\tFires when the ad's current time value changes. The event data will be populated with an AdProgressData object. ALL_ADS_COMPLETED\tAndroid, iOS\tFires when the ads manager is done playing all the valid ads in the ads response, or when the response doesn't return any valid ads. CLICK\tAndroid, iOS\tFires when the ad is clicked. COMPLETED\tAndroid, iOS\tFires when the ad completes playing. CONTENT_PAUSE_REQUESTED\tAndroid\tFires when content should be paused. This usually happens right before an ad is about to cover the content. CONTENT_RESUME_REQUESTED\tAndroid\tFires when content should be resumed. This usually happens when an ad finishes or collapses. CUEPOINTS_CHANGED\tiOS\tCuepoints changed for VOD stream (only used for dynamic ad insertion). DURATION_CHANGE\tAndroid\tFires when the ad's duration changes. ERROR\tAndroid, iOS\tFires when an error occurred while loading the ad and prevent it from playing. FIRST_QUARTILE\tAndroid, iOS\tFires when the ad playhead crosses first quartile. IMPRESSION\tAndroid\tFires when the impression URL has been pinged. INTERACTION\tAndroid\tFires when an ad triggers the interaction callback. Ad interactions contain an interaction ID string in the ad data. LINEAR_CHANGED\tAndroid\tFires when the displayed ad changes from linear to nonlinear, or the reverse. LOADED\tAndroid, iOS\tFires when ad data is available. LOG\tAndroid, iOS\tFires when a non-fatal error is encountered. The user need not take any action since the SDK will continue with the same or next ad playback depending on the error situation. MIDPOINT\tAndroid, iOS\tFires when the ad playhead crosses midpoint. PAUSED\tAndroid, iOS\tFires when the ad is paused. RESUMED\tAndroid, iOS\tFires when the ad is resumed. SKIPPABLE_STATE_CHANGED\tAndroid\tFires when the displayed ads skippable state is changed. SKIPPED\tAndroid, iOS\tFires when the ad is skipped by the user. STARTED\tAndroid, iOS\tFires when the ad starts playing. STREAM_LOADED\tiOS\tStream request has loaded (only used for dynamic ad insertion). TAPPED\tiOS\tFires when the ad is tapped. THIRD_QUARTILE\tAndroid, iOS\tFires when the ad playhead crosses third quartile. UNKNOWN\tiOS\tAn unknown event has fired USER_CLOSE\tAndroid\tFires when the ad is closed by the user. VIDEO_CLICKED\tAndroid\tFires when the non-clickthrough portion of a video ad is clicked. VIDEO_ICON_CLICKED\tAndroid\tFires when a user clicks a video icon. VOLUME_CHANGED\tAndroid\tFires when the ad volume has changed. VOLUME_MUTED\tAndroid\tFires when the ad volume has been muted.  Payload:  Property\tType\tDescriptionevent\tAdEvent\tThe ad event received data\tRecord&lt;string, string&gt; | undefined\tAdditional ad event data  Example:  { &quot;data&quot;: { &quot;key&quot;: &quot;value&quot; }, &quot;event&quot;: &quot;LOG&quot; }     ","version":"v6","tagName":"h3"},{"title":"onRestoreUserInterfaceForPictureInPictureStop​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onrestoreuserinterfaceforpictureinpicturestop","content":" Platforms: iOS | visionOS  Corresponds to Apple's restoreUserInterfaceForPictureInPictureStopWithCompletionHandler. Call restoreUserInterfaceForPictureInPictureStopCompleted inside this function when the UI is restored.  Payload: none    ","version":"v6","tagName":"h3"},{"title":"onSeek​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onseek","content":" Platforms: Android | iOS | Windows UWP | web  Triggered when a seek operation completes.  Payload:  Property\tType\tDescriptioncurrentTime\tnumber\tCurrent time after seeking seekTime\tnumber\tRequested seek time  Example:  { currentTime: 100.5, seekTime: 100 }   Note: On iOS, this callback is not reported when native controls are enabled.    ","version":"v6","tagName":"h3"},{"title":"onTimedMetadata​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#ontimedmetadata","content":" Platforms: Android | iOS | visionOS  Triggered when timed metadata is available.  Payload:  Property\tType\tDescriptionmetadata\tarray\tArray of metadata objects  Example:  { metadata: [ { value: &quot;Streaming Encoder&quot;, identifier: &quot;TRSN&quot; }, { value: &quot;Internet Stream&quot;, identifier: &quot;TRSO&quot; }, { value: &quot;Any Time You Like&quot;, identifier: &quot;TIT2&quot; }, ]; }     ","version":"v6","tagName":"h3"},{"title":"onTextTrackDataChanged​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#ontexttrackdatachanged","content":" Platforms: Android | iOS  Triggered when new subtitle data becomes available.  Payload:  Property\tType\tDescriptionsubtitleTracks\tstring\tThe subtitle text content in a compatible format  Example:  { subtitleTracks: &quot;This blade has a dark past.&quot;; }     ","version":"v6","tagName":"h3"},{"title":"onTextTracks​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#ontexttracks","content":" Platforms: Android | iOS  Triggered when available text (subtitle) tracks change.  Payload:  Property\tType\tDescriptionindex\tnumber\tInternal track ID title\tstring\tTrack name language\tstring\t2 letter ISO 639-1 language code type\tstring\tTrack MIME type (VTT, SRT, TTML) selected\tboolean\ttrue if the track is currently playing  Example:  { textTracks: [ { index: 0, title: &quot;English Subtitles&quot;, type: &quot;vtt&quot;, selected: true, }, ]; }     ","version":"v6","tagName":"h3"},{"title":"onVideoTracks​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onvideotracks","content":" Platform: Android  Triggered when video tracks change.  Payload:  Property\tType\tDescriptionindex\tnumber\tTrack index trackId\tstring\tInternal track ID codecs\tstring\tCodec type width\tnumber\tVideo width height\tnumber\tVideo height bitrate\tnumber\tTrack bitrate (bps) selected\tboolean\ttrue if the track is playing rotation\tnumber\tRotation angle (0, 90, 180, 270)  Example:  { videoTracks: [ { index: 0, trackId: &quot;1&quot;, codecs: &quot;video/mp4&quot;, width: 1920, height: 1080, bitrate: 5000000, selected: true, rotation: 0, }, ]; }     ","version":"v6","tagName":"h3"},{"title":"onVolumeChange​","type":1,"pageTitle":"Events","url":"/react-native-video/docs/v6/component/events#onvolumechange","content":" Platforms: Android | iOS | visionOS | web  Triggered when the player volume changes.  Note: This event applies to the player's volume, not the device's system volume.  Payload:  Property\tType\tDescriptionvolume\tnumber\tVolume level (0 to 1)  Example:  { volume: 0.5; }  ","version":"v6","tagName":"h3"},{"title":"Type Alias: PlayerError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/PlayerError","content":"Type Alias: PlayerError type PlayerError = | &quot;player/released&quot; | &quot;player/not-initialized&quot; | &quot;player/asset-not-initialized&quot; | &quot;player/invalid-source&quot;; Defined in: types/VideoError.ts:5","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: SourceError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/SourceError","content":"Type Alias: SourceError type SourceError = | &quot;source/invalid-uri&quot; | &quot;source/missing-read-file-permission&quot; | &quot;source/file-does-not-exist&quot; | &quot;source/failed-to-initialize-asset&quot; | &quot;source/unsupported-content-type&quot;; Defined in: types/VideoError.ts:11","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: ResizeMode","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/ResizeMode","content":"Type Alias: ResizeMode type ResizeMode = &quot;contain&quot; | &quot;cover&quot; | &quot;stretch&quot; | &quot;none&quot;; Defined in: types/ResizeMode.ts:9 Video resize modes that determine how video content is resized to fit the view 'contain': Scale the video uniformly (maintain aspect ratio) so that it fits entirely within the view'cover': Scale the video uniformly (maintain aspect ratio) so that it fills the entire view (may crop)'stretch': Scale the video to fill the entire view without maintaining aspect ratio'none': Do not resize the video - it will fallback to default behavior (contain)","keywords":"","version":"v7 Alpha"},{"title":"Interface: VideoViewRef","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"canEnterPictureInPicture()​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#canenterpictureinpicture","content":" canEnterPictureInPicture: () =&gt; boolean;   Defined in: video-view/VideoView.tsx:66  Check if picture in picture mode is supported  Returns​  boolean  true if picture in picture mode is supported, false otherwise    ","version":"v7 Alpha","tagName":"h3"},{"title":"enterFullscreen()​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#enterfullscreen","content":" enterFullscreen: () =&gt; void;   Defined in: video-view/VideoView.tsx:49  Enter fullscreen mode  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"enterPictureInPicture()​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#enterpictureinpicture","content":" enterPictureInPicture: () =&gt; void;   Defined in: video-view/VideoView.tsx:57  Enter picture in picture mode  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"exitFullscreen()​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#exitfullscreen","content":" exitFullscreen: () =&gt; void;   Defined in: video-view/VideoView.tsx:53  Exit fullscreen mode  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"exitPictureInPicture()​","type":1,"pageTitle":"Interface: VideoViewRef","url":"/react-native-video/docs/v7/api-reference/interfaces/VideoViewRef#exitpictureinpicture","content":" exitPictureInPicture: () =&gt; void;   Defined in: video-view/VideoView.tsx:61  Exit picture in picture mode  Returns​  void ","version":"v7 Alpha","tagName":"h3"},{"title":"Interface: onLoadData","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"currentTime​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#currenttime","content":" currentTime: number;   Defined in: types/Events.ts:145  The current time of the video in seconds.    ","version":"v7 Alpha","tagName":"h3"},{"title":"duration​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#duration","content":" duration: number;   Defined in: types/Events.ts:150  The duration of the video in seconds.  Note​  NaN if the duration is unknown.    ","version":"v7 Alpha","tagName":"h3"},{"title":"height​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#height","content":" height: number;   Defined in: types/Events.ts:154  The height of the video in pixels.    ","version":"v7 Alpha","tagName":"h3"},{"title":"orientation​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#orientation","content":" orientation: VideoOrientation;   Defined in: types/Events.ts:162  The orientation of the video.    ","version":"v7 Alpha","tagName":"h3"},{"title":"width​","type":1,"pageTitle":"Interface: onLoadData","url":"/react-native-video/docs/v7/api-reference/interfaces/onLoadData#width","content":" width: number;   Defined in: types/Events.ts:158  The width of the video in pixels. ","version":"v7 Alpha","tagName":"h3"},{"title":"Type Alias: UnknownError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/UnknownError","content":"Type Alias: UnknownError type UnknownError = &quot;unknown/unknown&quot;; Defined in: types/VideoError.ts:23","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: VideoConfig","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoConfig","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Type Alias: VideoConfig","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoConfig#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"externalSubtitles?​","type":1,"pageTitle":"Type Alias: VideoConfig","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoConfig#externalsubtitles","content":" optional externalSubtitles: ExternalSubtitle[];   Defined in: types/VideoConfig.ts:40  The external subtitles to be used.  Note​  on iOS, only WebVTT (.vtt) subtitles are supported (for HLS streams and MP4 files).  Note​  on iOS, label can be overridden by player and there is no way to get around it.  Example​  externalSubtitles: [ { uri: 'https://example.com/subtitles_en.vtt', label: 'English', type: 'vtt', language: 'en' }, { uri: 'https://example.com/subtitles_es.vtt', label: 'Español', type: 'vtt', language: 'es' } ]     ","version":"v7 Alpha","tagName":"h3"},{"title":"headers?​","type":1,"pageTitle":"Type Alias: VideoConfig","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoConfig#headers","content":" optional headers: Record&lt;string, string&gt;;   Defined in: types/VideoConfig.ts:17  The headers to be sent with the request.    ","version":"v7 Alpha","tagName":"h3"},{"title":"uri​","type":1,"pageTitle":"Type Alias: VideoConfig","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoConfig#uri","content":" uri: VideoSource;   Defined in: types/VideoConfig.ts:13  The uri of the video.  Example​  uri: 'https://example.com/video.mp4' // or uri: require('./assets/video.mp4')  ","version":"v7 Alpha","tagName":"h3"},{"title":"Type Alias: VideoSource","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoSource","content":"Type Alias: VideoSource type VideoSource = number | string; Defined in: types/VideoConfig.ts:1","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: VideoPlayerStatus","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoPlayerStatus","content":"","keywords":"","version":"v7 Alpha"},{"title":"Param​","type":1,"pageTitle":"Type Alias: VideoPlayerStatus","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoPlayerStatus#param","content":" The player is idle (source is not loaded)  ","version":"v7 Alpha","tagName":"h2"},{"title":"Param​","type":1,"pageTitle":"Type Alias: VideoPlayerStatus","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoPlayerStatus#param-1","content":" The player is loading (source is loading).  ","version":"v7 Alpha","tagName":"h2"},{"title":"Param​","type":1,"pageTitle":"Type Alias: VideoPlayerStatus","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoPlayerStatus#param-2","content":" The player is ready to play (source is loaded).  ","version":"v7 Alpha","tagName":"h2"},{"title":"Param​","type":1,"pageTitle":"Type Alias: VideoPlayerStatus","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoPlayerStatus#param-3","content":" The player has an error (source is not loaded). ","version":"v7 Alpha","tagName":"h2"},{"title":"Variable: VideoView","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/variables/VideoView","content":"Variable: VideoView VideoView: MemoExoticComponent&lt;ForwardRefExoticComponent&lt;VideoViewProps &amp; RefAttributes&lt;VideoViewRef&gt;&gt;&gt;; Defined in: video-view/VideoView.tsx:246","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: TimedMetadataObject","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/TimedMetadataObject","content":"","keywords":"","version":"v7 Alpha"},{"title":"Properties​","type":1,"pageTitle":"Type Alias: TimedMetadataObject","url":"/react-native-video/docs/v7/api-reference/type-aliases/TimedMetadataObject#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"identifier​","type":1,"pageTitle":"Type Alias: TimedMetadataObject","url":"/react-native-video/docs/v7/api-reference/type-aliases/TimedMetadataObject#identifier","content":" identifier: string;   Defined in: types/Events.ts:203    ","version":"v7 Alpha","tagName":"h3"},{"title":"value​","type":1,"pageTitle":"Type Alias: TimedMetadataObject","url":"/react-native-video/docs/v7/api-reference/type-aliases/TimedMetadataObject#value","content":" value: string;   Defined in: types/Events.ts:202 ","version":"v7 Alpha","tagName":"h3"},{"title":"Type Alias: VideoViewError","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoViewError","content":"Type Alias: VideoViewError type VideoViewError = | &quot;view/not-found&quot; | &quot;view/deallocated&quot; | &quot;view/picture-in-picture-not-supported&quot;; Defined in: types/VideoError.ts:18","keywords":"","version":"v7 Alpha"},{"title":"Manual Configuration","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/configuration/manual","content":"","keywords":"","version":"v7 Alpha"},{"title":"iOS​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#ios","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"Enable Background Audio​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#enable-background-audio","content":" To allow video sound to continue when the app goes to the background add the audio mode to Info.plist:  ios/YourApp/Info.plist &lt;key&gt;UIBackgroundModes&lt;/key&gt; &lt;array&gt; &lt;string&gt;audio&lt;/string&gt; &lt;/array&gt;   ","version":"v7 Alpha","tagName":"h3"},{"title":"Android​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#android","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"Configure ExoPlayer extensions​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#configure-exoplayer-extensions","content":" By default the library enables DASH &amp; HLS extensions. You can fine-tune this by adding properties to gradle.properties:  android/gradle.properties # Enable / disable ExoPlayer extensions used by react-native-video RNVideo_useExoplayerDash=true # DASH playback support RNVideo_useExoplayerHls=true # HLS playback support   Set a value to false to exclude the corresponding extension and reduce APK size.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Enable Picture-in-Picture (PiP)​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#enable-picture-in-picture-pip","content":" Add the android:supportsPictureInPicture flag to your main activity in AndroidManifest.xml:  android/app/src/main/AndroidManifest.xml &lt;application&gt; &lt;activity android:name=&quot;.MainActivity&quot; android:supportsPictureInPicture=&quot;true&quot; ...&gt; &lt;!-- other attributes --&gt; &lt;/activity&gt; &lt;/application&gt;   PiP requires API 26+ (Android 8.0). Make sure minSdkVersion is at least 26 when enabling this feature.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Verification​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#verification","content":" After the modifications:  iOS – run cd ios &amp;&amp; pod install then build the app from Xcode or via npx react-native run-ios / npx expo run:ios.Android – clean &amp; rebuild the project: ./gradlew clean &amp;&amp; ./gradlew :app:assembleDebug or simply run npx react-native run-android / npx expo run:android.  If the build succeeds your manual configuration is complete.    ","version":"v7 Alpha","tagName":"h2"},{"title":"Need an easier way?​","type":1,"pageTitle":"Manual Configuration","url":"/react-native-video/docs/v7/configuration/manual#need-an-easier-way","content":" Use the Expo plugin to apply exactly the same changes automatically during expo prebuild. ","version":"v7 Alpha","tagName":"h3"},{"title":"Installation","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/installation","content":"","keywords":"","version":"v7 Alpha"},{"title":"Requirements​","type":1,"pageTitle":"Installation","url":"/react-native-video/docs/v7/installation#requirements","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"System Requirements​","type":1,"pageTitle":"Installation","url":"/react-native-video/docs/v7/installation#system-requirements","content":" iOS 15.0 or higherAndroid 6.0 or higher  ","version":"v7 Alpha","tagName":"h3"},{"title":"Minimal Package Requirements​","type":1,"pageTitle":"Installation","url":"/react-native-video/docs/v7/installation#minimal-package-requirements","content":" react-native 0.75.0 or higherreact-native-nitro-modules 0.26.0 or higher  ","version":"v7 Alpha","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"Installation","url":"/react-native-video/docs/v7/installation#installation-1","content":" Install dependencies:  npm install react-native-video@next react-native-nitro-modules   Configure Library: You can configure the library in two ways:  Using expo pluginsManually editing needed files  Run the project: If you are using Expo, you will need to generate native files:  npx expo prebuild   And then run the project:  npx expo run:ios # run on iOS npx expo run:android # run on Android   If you are using React Native CLI, you will need to install Pods for iOS:  cd ios &amp;&amp; pod install &amp;&amp; cd ..   And then run the project:  npx react-native run-ios # run on iOS npx react-native run-android # run on Android   ","version":"v7 Alpha","tagName":"h2"},{"title":"Usage​","type":1,"pageTitle":"Installation","url":"/react-native-video/docs/v7/installation#usage","content":" App.tsx import { VideoView, useVideoPlayer } from 'react-native-video'; export default function App() { const player = useVideoPlayer({ source: { uri: 'https://www.w3schools.com/html/mov_bbb.mp4', }, }); return &lt;VideoView player={player} /&gt;; }  ","version":"v7 Alpha","tagName":"h2"},{"title":"Expo Plugin","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/configuration/expo-plugin","content":"","keywords":"","version":"v7 Alpha"},{"title":"Installation​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#installation","content":" To use the Expo plugin, you need to add it to your app's configuration file (app.json or app.config.js).  app.json { &quot;expo&quot;: { &quot;plugins&quot;: [ [ &quot;react-native-video&quot;, { &quot;enableAndroidPictureInPicture&quot;: true, &quot;enableBackgroundAudio&quot;: true, &quot;androidExtensions&quot;: { &quot;useExoplayerDash&quot;: true, &quot;useExoplayerHls&quot;: true } } ] ] } }   app.config.js export default { plugins: [ [ 'react-native-video', { enableAndroidPictureInPicture: true, enableBackgroundAudio: true, androidExtensions: { useExoplayerDash: true, useExoplayerHls: true, }, }, ], ], };   ","version":"v7 Alpha","tagName":"h2"},{"title":"Configuration Options​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#configuration-options","content":" The plugin accepts an optional configuration object with the following properties:  ","version":"v7 Alpha","tagName":"h2"},{"title":"enableAndroidPictureInPicture (optional)​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#enableandroidpictureinpicture-optional","content":" Type: booleanDefault: falseDescription: Enables Picture-in-Picture (PiP) mode on Android. This will apply the necessary configurations to your Android project.  ","version":"v7 Alpha","tagName":"h3"},{"title":"enableBackgroundAudio (optional)​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#enablebackgroundaudio-optional","content":" Type: booleanDefault: falseDescription: Enables audio playback to continue when the app is in the background on Android. Ensure you have also configured the necessary background modes capabilities in your app if required by the operating system.  ","version":"v7 Alpha","tagName":"h3"},{"title":"androidExtensions (optional)​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#androidextensions-optional","content":" Type: objectDefault: { useExoplayerDash: true, useExoplayerHls: true }Description: Allows you to specify which Android ExoPlayer extensions to include. This can help reduce the size of your app by only including the extensions you need. useExoplayerDash (boolean, default: true): Whether to include ExoPlayer's Dash extension.useExoplayerHls (boolean, default: true): Whether to include ExoPlayer's HLS extension.  ","version":"v7 Alpha","tagName":"h3"},{"title":"reactNativeTestApp (optional)​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#reactnativetestapp-optional","content":" Type: booleanDefault: falseDescription: Whether to use react-native-test-app compatible mode.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Expo Plugin","url":"/react-native-video/docs/v7/configuration/expo-plugin#usage","content":" Once configured in your app.json or app.config.js, the plugin will automatically apply the necessary native project changes during the prebuild process (e.g., when running npx expo prebuild). No further manual setup is typically required for these features. ","version":"v7 Alpha","tagName":"h2"},{"title":"Type Alias: SourceType","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/SourceType","content":"Type Alias: SourceType type SourceType = &quot;local&quot; | &quot;network&quot;; Defined in: types/Events.ts:165","keywords":"","version":"v7 Alpha"},{"title":"Type Alias: VideoErrorCode","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/type-aliases/VideoErrorCode","content":"Type Alias: VideoErrorCode type VideoErrorCode = | LibraryError | PlayerError | SourceError | VideoViewError | UnknownError; Defined in: types/VideoError.ts:25","keywords":"","version":"v7 Alpha"},{"title":"Intro","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/intro","content":"","keywords":"","version":"v7 Alpha"},{"title":"Why Choose React Native Video?​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#why-choose-react-native-video","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"Native Performance​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#native-performance","content":" React Native Video is built with native video players (AVPlayer on iOS, ExoPlayer on Android) to ensure hardware-accelerated playback for smooth performance. The library includes optimized memory management and resource handling to provide the best possible user experience.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Rich Feature Set​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#rich-feature-set","content":" The library offers advanced playback controls including play, pause, seek, volume control, and playback rate adjustment. It supports multiple source types including HTTP/HTTPS streams, local files, HLS, and DASH. React Native Video includes subtitle support for both built-in and external subtitle files (WebVTT, SRT), native Picture-in-Picture support on both platforms, background audio playback and native fullscreen implementation.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Developer Experience​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#developer-experience","content":" React Native Video is TypeScript-first with full TypeScript support and comprehensive type definitions. It provides intuitive React hooks for easy integration. The library is compatible with React Native's New Architecture and works seamlessly with Expo managed and bare workflows.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Quick Start​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#quick-start","content":" Get started in minutes with a simple video player:  npm install react-native-video@next react-native-nitro-modules   import { VideoView, useVideoPlayer } from 'react-native-video'; export default function App() { const player = useVideoPlayer({ uri: 'https://www.w3schools.com/html/mov_bbb.mp4', }); return &lt;VideoView player={player} /&gt;; }   ","version":"v7 Alpha","tagName":"h2"},{"title":"What's Next?​","type":1,"pageTitle":"Intro","url":"/react-native-video/docs/v7/intro#whats-next","content":" Installation Guide - Get started with React Native VideoVideoPlayer - Learn about the core player functionalityVideoView Component - Understand the video display componentEvent Handling - Master player events and callbacksConfiguration - Configure the playerAPI Reference - Complete API documentation   ","version":"v7 Alpha","tagName":"h2"},{"title":"Class: VideoPlayer","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer","content":"","keywords":"","version":"v7 Alpha"},{"title":"Extends​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#extends","content":" VideoPlayerEvents  ","version":"v7 Alpha","tagName":"h2"},{"title":"Implements​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#implements","content":" VideoPlayerBase  ","version":"v7 Alpha","tagName":"h2"},{"title":"Constructors​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#constructors","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"Constructor​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#constructor","content":" new VideoPlayer(source): VideoPlayer;   Defined in: VideoPlayer.ts:25  Parameters​  Parameter\tTypesource\t| VideoSource | VideoConfig | VideoPlayerSource  Returns​  VideoPlayer  Overrides​  VideoPlayerEvents.constructor   ","version":"v7 Alpha","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#properties","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"onError()?​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onerror","content":" optional onError: (error) =&gt; void = undefined;   Defined in: VideoPlayer.ts:23  Parameters​  Parameter\tTypeerror\tVideoRuntimeError  Returns​  void  ","version":"v7 Alpha","tagName":"h3"},{"title":"Accessors​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#accessors","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"currentTime​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#currenttime","content":" Get Signature​  get currentTime(): number;   Defined in: VideoPlayer.ts:109  The duration of the video in seconds (1.0 = 1 sec). Returns NaN if the duration is not available.  Returns​  number  Set Signature​  set currentTime(value): void;   Defined in: VideoPlayer.ts:113  The duration of the video in seconds (1.0 = 1 sec). Returns NaN if the duration is not available.  Parameters​  Parameter\tTypevalue\tnumber  Returns​  void  Implementation of​  VideoPlayerBase.currentTime     ","version":"v7 Alpha","tagName":"h3"},{"title":"duration​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#duration","content":" Get Signature​  get duration(): number;   Defined in: VideoPlayer.ts:95  The current time of the video in seconds (1.0 = 1 sec). Returns NaN if the current time is not available.  Returns​  number  Implementation of​  VideoPlayerBase.duration     ","version":"v7 Alpha","tagName":"h3"},{"title":"ignoreSilentSwitchMode​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#ignoresilentswitchmode","content":" Get Signature​  get ignoreSilentSwitchMode(): IgnoreSilentSwitchMode;   Defined in: VideoPlayer.ts:154  Controls the silent switch mode of the player.  Note​  This is only supported on iOS.  auto - uses default behavior for player.ignore - ignore the silent switch.obey - obey the silent switch.  Returns​  IgnoreSilentSwitchMode  Set Signature​  set ignoreSilentSwitchMode(value): void;   Defined in: VideoPlayer.ts:158  Controls the silent switch mode of the player.  Note​  This is only supported on iOS.  auto - uses default behavior for player.ignore - ignore the silent switch.obey - obey the silent switch.  Parameters​  Parameter\tTypevalue\tIgnoreSilentSwitchMode  Returns​  void  Implementation of​  VideoPlayerBase.ignoreSilentSwitchMode     ","version":"v7 Alpha","tagName":"h3"},{"title":"isPlaying​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#isplaying","content":" Get Signature​  get isPlaying(): boolean;   Defined in: VideoPlayer.ts:187  Whether the player is playing.  Note​  This is a read-only property.  Note​  To pause/resume the player, you need to use play and pause methods.  Returns​  boolean  Implementation of​  VideoPlayerBase.isPlaying     ","version":"v7 Alpha","tagName":"h3"},{"title":"loop​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#loop","content":" Get Signature​  get loop(): boolean;   Defined in: VideoPlayer.ts:127  Whether the player is looped.  Returns​  boolean  Set Signature​  set loop(value): void;   Defined in: VideoPlayer.ts:131  Whether the player is looped.  Parameters​  Parameter\tTypevalue\tboolean  Returns​  void  Implementation of​  VideoPlayerBase.loop     ","version":"v7 Alpha","tagName":"h3"},{"title":"mixAudioMode​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#mixaudiomode","content":" Get Signature​  get mixAudioMode(): MixAudioMode;   Defined in: VideoPlayer.ts:145  Controls the audio mixing mode of the player.  mixWithOthers - Mix with other players.doNotMix - Do not mix with other players.duckOthers - Duck other players.auto - uses default behavior for player.  default is auto.  Returns​  MixAudioMode  Set Signature​  set mixAudioMode(value): void;   Defined in: VideoPlayer.ts:149  Controls the audio mixing mode of the player.  mixWithOthers - Mix with other players.doNotMix - Do not mix with other players.duckOthers - Duck other players.auto - uses default behavior for player.  default is auto.  Parameters​  Parameter\tTypevalue\tMixAudioMode  Returns​  void  Implementation of​  VideoPlayerBase.mixAudioMode     ","version":"v7 Alpha","tagName":"h3"},{"title":"muted​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#muted","content":" Get Signature​  get muted(): boolean;   Defined in: VideoPlayer.ts:118  Whether the player is muted.  Returns​  boolean  Set Signature​  set muted(value): void;   Defined in: VideoPlayer.ts:122  Whether the player is muted.  Parameters​  Parameter\tTypevalue\tboolean  Returns​  void  Implementation of​  VideoPlayerBase.muted     ","version":"v7 Alpha","tagName":"h3"},{"title":"onAudioBecomingNoisy​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onaudiobecomingnoisy","content":" Get Signature​  get onAudioBecomingNoisy(): () =&gt; void;   Defined in: VideoPlayerEvents.ts:58  Called when the audio becomes noisy.  Platform​  Android  Returns​  (): void;   Returns​  void  Set Signature​  set onAudioBecomingNoisy(value): void;   Defined in: VideoPlayerEvents.ts:52  Called when the audio becomes noisy.  Platform​  Android  Parameters​  Parameter\tTypevalue\t() =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onAudioBecomingNoisy     ","version":"v7 Alpha","tagName":"h3"},{"title":"onAudioFocusChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onaudiofocuschange","content":" Get Signature​  get onAudioFocusChange(): (hasAudioFocus) =&gt; void;   Defined in: VideoPlayerEvents.ts:68  Called when the audio focus changes.  Platform​  Android  Returns​  (hasAudioFocus): void;   Parameters​  Parameter\tTypehasAudioFocus\tboolean  Returns​  void  Set Signature​  set onAudioFocusChange(value): void;   Defined in: VideoPlayerEvents.ts:62  Called when the audio focus changes.  Platform​  Android  Parameters​  Parameter\tTypevalue\t(hasAudioFocus) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onAudioFocusChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onBandwidthUpdate​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onbandwidthupdate","content":" Get Signature​  get onBandwidthUpdate(): (data) =&gt; void;   Defined in: VideoPlayerEvents.ts:78  Called when the bandwidth of the video changes.  Returns​  (data): void;   Parameters​  Parameter\tTypedata\tBandwidthData  Returns​  void  Set Signature​  set onBandwidthUpdate(value): void;   Defined in: VideoPlayerEvents.ts:72  Called when the bandwidth of the video changes.  Parameters​  Parameter\tTypevalue\t(data) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onBandwidthUpdate     ","version":"v7 Alpha","tagName":"h3"},{"title":"onBuffer​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onbuffer","content":" Get Signature​  get onBuffer(): (buffering) =&gt; void;   Defined in: VideoPlayerEvents.ts:86  Called when the video is buffering.  Returns​  (buffering): void;   Parameters​  Parameter\tTypebuffering\tboolean  Returns​  void  Set Signature​  set onBuffer(value): void;   Defined in: VideoPlayerEvents.ts:82  Called when the video is buffering.  Parameters​  Parameter\tTypevalue\t(buffering) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onBuffer     ","version":"v7 Alpha","tagName":"h3"},{"title":"onControlsVisibleChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#oncontrolsvisiblechange","content":" Get Signature​  get onControlsVisibleChange(): (visible) =&gt; void;   Defined in: VideoPlayerEvents.ts:96  Called when the video view's controls visibility changes.  Returns​  (visible): void;   Parameters​  Parameter\tTypevisible\tboolean  Returns​  void  Set Signature​  set onControlsVisibleChange(value): void;   Defined in: VideoPlayerEvents.ts:90  Called when the video view's controls visibility changes.  Parameters​  Parameter\tTypevalue\t(visible) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onControlsVisibleChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onEnd​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onend","content":" Get Signature​  get onEnd(): () =&gt; void;   Defined in: VideoPlayerEvents.ts:104  Called when the video ends.  Returns​  (): void;   Returns​  void  Set Signature​  set onEnd(value): void;   Defined in: VideoPlayerEvents.ts:100  Called when the video ends.  Parameters​  Parameter\tTypevalue\t() =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onEnd     ","version":"v7 Alpha","tagName":"h3"},{"title":"onExternalPlaybackChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onexternalplaybackchange","content":" Get Signature​  get onExternalPlaybackChange(): (externalPlaybackActive) =&gt; void;   Defined in: VideoPlayerEvents.ts:114  Called when the external playback state changes.  Platform​  iOS  Returns​  (externalPlaybackActive): void;   Parameters​  Parameter\tTypeexternalPlaybackActive\tboolean  Returns​  void  Set Signature​  set onExternalPlaybackChange(value): void;   Defined in: VideoPlayerEvents.ts:108  Called when the external playback state changes.  Platform​  iOS  Parameters​  Parameter\tTypevalue\t(externalPlaybackActive) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onExternalPlaybackChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onLoad​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onload","content":" Get Signature​  get onLoad(): (data) =&gt; void;   Defined in: VideoPlayerEvents.ts:122  Called when the video is loaded.  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad  Returns​  (data): void;   Parameters​  Parameter\tTypedata\tonLoadData  Returns​  void  Set Signature​  set onLoad(value): void;   Defined in: VideoPlayerEvents.ts:118  Called when the video is loaded.  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad  Parameters​  Parameter\tTypevalue\t(data) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onLoad     ","version":"v7 Alpha","tagName":"h3"},{"title":"onLoadStart​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onloadstart","content":" Get Signature​  get onLoadStart(): (data) =&gt; void;   Defined in: VideoPlayerEvents.ts:130  Called when the video starts loading.  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad  Returns​  (data): void;   Parameters​  Parameter\tTypedata\tonLoadStartData  Returns​  void  Set Signature​  set onLoadStart(value): void;   Defined in: VideoPlayerEvents.ts:126  Called when the video starts loading.  Note​  onLoadStart -&gt; initialize the player -&gt; onLoad  Parameters​  Parameter\tTypevalue\t(data) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onLoadStart     ","version":"v7 Alpha","tagName":"h3"},{"title":"onPlaybackRateChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onplaybackratechange","content":" Get Signature​  get onPlaybackRateChange(): (rate) =&gt; void;   Defined in: VideoPlayerEvents.ts:150  Called when the player playback rate changes.  Returns​  (rate): void;   Parameters​  Parameter\tTyperate\tnumber  Returns​  void  Set Signature​  set onPlaybackRateChange(value): void;   Defined in: VideoPlayerEvents.ts:144  Called when the player playback rate changes.  Parameters​  Parameter\tTypevalue\t(rate) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onPlaybackRateChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onPlaybackStateChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onplaybackstatechange","content":" Get Signature​  get onPlaybackStateChange(): (data) =&gt; void;   Defined in: VideoPlayerEvents.ts:140  Called when the player playback state changes.  Returns​  (data): void;   Parameters​  Parameter\tTypedata\tonPlaybackStateChangeData  Returns​  void  Set Signature​  set onPlaybackStateChange(value): void;   Defined in: VideoPlayerEvents.ts:134  Called when the player playback state changes.  Parameters​  Parameter\tTypevalue\t(data) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onPlaybackStateChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onProgress​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onprogress","content":" Get Signature​  get onProgress(): (data) =&gt; void;   Defined in: VideoPlayerEvents.ts:158  Called when the player progress changes.  Returns​  (data): void;   Parameters​  Parameter\tTypedata\tonProgressData  Returns​  void  Set Signature​  set onProgress(value): void;   Defined in: VideoPlayerEvents.ts:154  Called when the player progress changes.  Parameters​  Parameter\tTypevalue\t(data) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onProgress     ","version":"v7 Alpha","tagName":"h3"},{"title":"onReadyToDisplay​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onreadytodisplay","content":" Get Signature​  get onReadyToDisplay(): () =&gt; void;   Defined in: VideoPlayerEvents.ts:166  Called when the video is ready to display.  Returns​  (): void;   Returns​  void  Set Signature​  set onReadyToDisplay(value): void;   Defined in: VideoPlayerEvents.ts:162  Called when the video is ready to display.  Parameters​  Parameter\tTypevalue\t() =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onReadyToDisplay     ","version":"v7 Alpha","tagName":"h3"},{"title":"onSeek​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onseek","content":" Get Signature​  get onSeek(): (seekTime) =&gt; void;   Defined in: VideoPlayerEvents.ts:174  Called when the player seeks.  Returns​  (seekTime): void;   Parameters​  Parameter\tTypeseekTime\tnumber  Returns​  void  Set Signature​  set onSeek(value): void;   Defined in: VideoPlayerEvents.ts:170  Called when the player seeks.  Parameters​  Parameter\tTypevalue\t(seekTime) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onSeek     ","version":"v7 Alpha","tagName":"h3"},{"title":"onStatusChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onstatuschange","content":" Get Signature​  get onStatusChange(): (status) =&gt; void;   Defined in: VideoPlayerEvents.ts:182  Called when the player status changes.  Returns​  (status): void;   Parameters​  Parameter\tTypestatus\tVideoPlayerStatus  Returns​  void  Set Signature​  set onStatusChange(value): void;   Defined in: VideoPlayerEvents.ts:178  Called when the player status changes.  Parameters​  Parameter\tTypevalue\t(status) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onStatusChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onTextTrackDataChanged​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#ontexttrackdatachanged","content":" Get Signature​  get onTextTrackDataChanged(): (texts) =&gt; void;   Defined in: VideoPlayerEvents.ts:200  Called when the text track (currently displayed subtitle) data changes.  Returns​  (texts): void;   Parameters​  Parameter\tTypetexts\tstring[]  Returns​  void  Set Signature​  set onTextTrackDataChanged(value): void;   Defined in: VideoPlayerEvents.ts:194  Called when the text track (currently displayed subtitle) data changes.  Parameters​  Parameter\tTypevalue\t(texts) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onTextTrackDataChanged     ","version":"v7 Alpha","tagName":"h3"},{"title":"onTimedMetadata​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#ontimedmetadata","content":" Get Signature​  get onTimedMetadata(): (metadata) =&gt; void;   Defined in: VideoPlayerEvents.ts:190  Called when player receives timed metadata.  Returns​  (metadata): void;   Parameters​  Parameter\tTypemetadata\tTimedMetadata  Returns​  void  Set Signature​  set onTimedMetadata(value): void;   Defined in: VideoPlayerEvents.ts:186  Called when player receives timed metadata.  Parameters​  Parameter\tTypevalue\t(metadata) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onTimedMetadata     ","version":"v7 Alpha","tagName":"h3"},{"title":"onTrackChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#ontrackchange","content":" Get Signature​  get onTrackChange(): (track) =&gt; void;   Defined in: VideoPlayerEvents.ts:208  Called when the selected text track changes.  Returns​  (track): void;   Parameters​  Parameter\tTypetrack\tnull | TextTrack  Returns​  void  Set Signature​  set onTrackChange(value): void;   Defined in: VideoPlayerEvents.ts:204  Called when the selected text track changes.  Parameters​  Parameter\tTypevalue\t(track) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onTrackChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"onVolumeChange​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#onvolumechange","content":" Get Signature​  get onVolumeChange(): (volume) =&gt; void;   Defined in: VideoPlayerEvents.ts:216  Called when the volume of the player changes.  Returns​  (volume): void;   Parameters​  Parameter\tTypevolume\tnumber  Returns​  void  Set Signature​  set onVolumeChange(value): void;   Defined in: VideoPlayerEvents.ts:212  Called when the volume of the player changes.  Parameters​  Parameter\tTypevalue\t(volume) =&gt; void  Returns​  void  Inherited from​  VideoPlayerEvents.onVolumeChange     ","version":"v7 Alpha","tagName":"h3"},{"title":"playInBackground​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#playinbackground","content":" Get Signature​  get playInBackground(): boolean;   Defined in: VideoPlayer.ts:169  Whether the player should play in background.  true - play in background.false - pause in background (default).  Note​  this can override playWhenInactive.  Returns​  boolean  Set Signature​  set playInBackground(value): void;   Defined in: VideoPlayer.ts:173  Whether the player should play in background.  true - play in background.false - pause in background (default).  Note​  this can override playWhenInactive.  Parameters​  Parameter\tTypevalue\tboolean  Returns​  void  Implementation of​  VideoPlayerBase.playInBackground     ","version":"v7 Alpha","tagName":"h3"},{"title":"playWhenInactive​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#playwheninactive","content":" Get Signature​  get playWhenInactive(): boolean;   Defined in: VideoPlayer.ts:178  Whether the player should play when the app is inactive (user opened control center).  true - play when the app is inactive.false - pause when the app is inactive (default).  Note​  this can be overridden by playInBackground.  Note​  This is only supported on iOS.  Returns​  boolean  Set Signature​  set playWhenInactive(value): void;   Defined in: VideoPlayer.ts:182  Whether the player should play when the app is inactive (user opened control center).  true - play when the app is inactive.false - pause when the app is inactive (default).  Note​  this can be overridden by playInBackground.  Note​  This is only supported on iOS.  Parameters​  Parameter\tTypevalue\tboolean  Returns​  void  Implementation of​  VideoPlayerBase.playWhenInactive     ","version":"v7 Alpha","tagName":"h3"},{"title":"rate​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#rate","content":" Get Signature​  get rate(): number;   Defined in: VideoPlayer.ts:136  Controls the speed at which the player should play.  Note​  if rate is = 0, it will pause video.  Returns​  number  Set Signature​  set rate(value): void;   Defined in: VideoPlayer.ts:140  Controls the speed at which the player should play.  Note​  if rate is = 0, it will pause video.  Parameters​  Parameter\tTypevalue\tnumber  Returns​  void  Implementation of​  VideoPlayerBase.rate     ","version":"v7 Alpha","tagName":"h3"},{"title":"selectedTrack​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#selectedtrack","content":" Get Signature​  get selectedTrack(): undefined | TextTrack;   Defined in: VideoPlayer.ts:270  Get the currently selected text track.  Returns​  undefined | TextTrack  The currently selected text track, or undefined if none is selected  Implementation of​  VideoPlayerBase.selectedTrack     ","version":"v7 Alpha","tagName":"h3"},{"title":"source​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#source","content":" Get Signature​  get source(): VideoPlayerSource;   Defined in: VideoPlayer.ts:85  The source of the video. Source is immutable. To change the source, you need to call replaceSourceAsync method. see VideoPlayerSourceBase  Returns​  VideoPlayerSource  Implementation of​  VideoPlayerBase.source     ","version":"v7 Alpha","tagName":"h3"},{"title":"status​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#status","content":" Get Signature​  get status(): VideoPlayerStatus;   Defined in: VideoPlayer.ts:90  The status of the player.  Returns​  VideoPlayerStatus  Implementation of​  VideoPlayerBase.status     ","version":"v7 Alpha","tagName":"h3"},{"title":"volume​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#volume","content":" Get Signature​  get volume(): number;   Defined in: VideoPlayer.ts:100  The volume of the video (0.0 = 0%, 1.0 = 100%).  Note​  If the player is muted, the volume will be 0.0.  Returns​  number  Set Signature​  set volume(value): void;   Defined in: VideoPlayer.ts:104  The volume of the video (0.0 = 0%, 1.0 = 100%).  Note​  If the player is muted, the volume will be 0.0.  Parameters​  Parameter\tTypevalue\tnumber  Returns​  void  Implementation of​  VideoPlayerBase.volume   ","version":"v7 Alpha","tagName":"h3"},{"title":"Methods​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#methods","content":" ","version":"v7 Alpha","tagName":"h2"},{"title":"clearAllEvents()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#clearallevents","content":" clearAllEvents(): void;   Defined in: VideoPlayerEvents.ts:36  Clears all events from the event emitter.  Returns​  void  Inherited from​  VideoPlayerEvents.clearAllEvents     ","version":"v7 Alpha","tagName":"h3"},{"title":"clearEvent()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#clearevent","content":" clearEvent(event): void;   Defined in: VideoPlayerEvents.ts:46  Clears a specific event from the event emitter.  Parameters​  Parameter\tType\tDescriptionevent\tkeyof VideoPlayerEvents\tThe name of the event to clear.  Returns​  void  Inherited from​  VideoPlayerEvents.clearEvent     ","version":"v7 Alpha","tagName":"h3"},{"title":"getAvailableTextTracks()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#getavailabletexttracks","content":" getAvailableTextTracks(): TextTrack[];   Defined in: VideoPlayer.ts:252  Get all available text tracks for the current source.  Returns​  TextTrack[]  Array of available text tracks  Implementation of​  VideoPlayerBase.getAvailableTextTracks     ","version":"v7 Alpha","tagName":"h3"},{"title":"pause()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#pause","content":" pause(): void;   Defined in: VideoPlayer.ts:215  Pause playback of player.  Returns​  void  Implementation of​  VideoPlayerBase.pause     ","version":"v7 Alpha","tagName":"h3"},{"title":"play()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#play","content":" play(): void;   Defined in: VideoPlayer.ts:207  Start playback of player.  Returns​  void  Implementation of​  VideoPlayerBase.play     ","version":"v7 Alpha","tagName":"h3"},{"title":"preload()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#preload","content":" preload(): Promise&lt;void&gt;;   Defined in: VideoPlayer.ts:191  Preload the video. This is useful to avoid delay when the user plays the video. Preloading too many videos can lead to memory issues or performance issues.  Returns​  Promise&lt;void&gt;  Implementation of​  VideoPlayerBase.preload     ","version":"v7 Alpha","tagName":"h3"},{"title":"release()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#release","content":" release(): void;   Defined in: VideoPlayer.ts:203  Releases the player's native resources and releases native state. After calling this method, the player is no longer usable. Accessing any properties or methods of the player after calling this method will throw an error. If you want to clean player resource use replaceSourceAsync with null instead.  Returns​  void    ","version":"v7 Alpha","tagName":"h3"},{"title":"replaceSourceAsync()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#replacesourceasync","content":" replaceSourceAsync(source): Promise&lt;void&gt;;   Defined in: VideoPlayer.ts:239  Replace the current source of the player.  Parameters​  Parameter\tType\tDescriptionsource\t| null | VideoSource | VideoConfig\tThe new source of the video.  Returns​  Promise&lt;void&gt;  Note​  If you want to clear the source, you can pass null. see VideoPlayerSourceBase  Implementation of​  VideoPlayerBase.replaceSourceAsync     ","version":"v7 Alpha","tagName":"h3"},{"title":"seekBy()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#seekby","content":" seekBy(time): void;   Defined in: VideoPlayer.ts:223  Seek by given time. If the time is negative, it will seek backward. time will be clamped if it is out of range (0 ~ duration).  Parameters​  Parameter\tType\tDescriptiontime\tnumber\tThe time to seek from current time in seconds.  Returns​  void  Implementation of​  VideoPlayerBase.seekBy     ","version":"v7 Alpha","tagName":"h3"},{"title":"seekTo()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#seekto","content":" seekTo(time): void;   Defined in: VideoPlayer.ts:231  Seek to a specific time in the video.  Parameters​  Parameter\tType\tDescriptiontime\tnumber\tThe time to seek to in seconds.  Returns​  void  Note​  This have same effect as currentTime setter.  Note​  time will be clamped if it is out of range (0 ~ duration).  Implementation of​  VideoPlayerBase.seekTo     ","version":"v7 Alpha","tagName":"h3"},{"title":"selectTextTrack()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#selecttexttrack","content":" selectTextTrack(textTrack): void;   Defined in: VideoPlayer.ts:261  Select a text track to display.  Parameters​  Parameter\tType\tDescriptiontextTrack\tnull | TextTrack\tText track to select, or null to unselect current track  Returns​  void  Implementation of​  VideoPlayerBase.selectTextTrack     ","version":"v7 Alpha","tagName":"h3"},{"title":"NOOP()​","type":1,"pageTitle":"Class: VideoPlayer","url":"/react-native-video/docs/v7/api-reference/classes/VideoPlayer#noop","content":" static NOOP(): void;   Defined in: VideoPlayerEvents.ts:50  Returns​  void  Inherited from​  VideoPlayerEvents.NOOP  ","version":"v7 Alpha","tagName":"h3"},{"title":"Handling Player Events","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/events/","content":"","keywords":"","version":"v7 Alpha"},{"title":"Using the useEvent Hook​","type":1,"pageTitle":"Handling Player Events","url":"/react-native-video/docs/v7/events/#using-the-useevent-hook","content":" For React functional components, the useEvent hook provides a convenient way to subscribe to player events and automatically manage cleanup.  import { useVideoPlayer, useEvent } from 'react-native-video'; import { useEffect } from 'react'; const MyVideoComponent = () =&gt; { const player = useVideoPlayer('https://example.com/video.mp4', (_player) =&gt; { _player.play(); }); useEvent(player, 'onLoad', (data) =&gt; { console.log('Video loaded via useEvent! Duration:', data.duration); }); useEvent(player, 'onProgress', (data) =&gt; { console.log('Progress via useEvent:', data.currentTime); }); // For onError, which is a direct property on VideoPlayer, not from VideoPlayerEvents useEvent(player, 'onError', (error) =&gt; { console.error('Player Error via useEvent:', error.code, error.message); }); return &lt;VideoView player={player} /&gt;; };   ","version":"v7 Alpha","tagName":"h2"},{"title":"Available Events​","type":1,"pageTitle":"Handling Player Events","url":"/react-native-video/docs/v7/events/#available-events","content":" The VideoPlayer class, through VideoPlayerEvents, supports the following events. You can subscribe to these by assigning a callback function to the corresponding property on the VideoPlayer instance.  Event\tDescription\tCallback Data ExampleonAudioBecomingNoisy\tFired when audio is about to become noisy (e.g., headphones unplugged). onAudioFocusChange\tFired when the audio focus changes (e.g., another app starts playing audio). onBandwidthUpdate\tFired with an estimate of the available bandwidth. onBuffer\tFired when the player starts or stops buffering data.\t{ isBuffering: boolean } onControlsVisibleChange\tFired when the visibility of native controls changes. onEnd\tFired when the video playback reaches the end. onExternalPlaybackChange\tFired when the external playback status changes (e.g., AirPlay). onLoad\tFired when the video has loaded and is ready to play.\tVideo metadata (duration, naturalSize, etc.) onLoadStart\tFired when the video starts loading. onPlaybackRateChange\tFired when the playback rate changes.\t{ rate: number } onPlaybackStateChange\tFired when the playback state changes (e.g., playing, paused, stopped).\t{ status: VideoPlayerStatus } onProgress\tFired periodically during playback with the current time.\t{ currentTime: number, playableDuration: number, seekableDuration: number } onReadyToDisplay\tFired when the player is ready to display the first frame of the video. onSeek\tFired when a seek operation has completed.\t{ seekTime: number } onStatusChange\tFired when the player status changes (detailed status updates). onTextTrackDataChanged\tFired when text track data (e.g., subtitles) changes. onTimedMetadata\tFired when timed metadata is encountered in the video stream. onVolumeChange\tFired when the volume changes.\t{ volume: number }  Additionally, the VideoPlayer instance itself has an onError property:  onError: Fired when a error occurs. The callback receives the VideoRuntimeError object.  Benefits of useEvent:  Automatic Cleanup: The event listener is automatically removed when the component unmounts or when the player, event, or callback dependencies change, preventing memory leaks.Type Safety: Provides better type inference for event callback parameters.  This hook is recommended for managing event subscriptions in a declarative React style.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Subscribing to Events​","type":1,"pageTitle":"Handling Player Events","url":"/react-native-video/docs/v7/events/#subscribing-to-events","content":" You can subscribe to an event by assigning a function to the player instance's corresponding property:  import { VideoPlayer } from 'react-native-video'; const player = new VideoPlayer('https://example.com/video.mp4'); player.onLoad = (data) =&gt; { console.log('Video loaded! Duration:', data.duration); }; player.onProgress = (data) =&gt; { console.log('Current time:', data.currentTime); }; player.onError = (error) =&gt; { console.error('Player Error:', error.code, error.message); }; player.play();   ","version":"v7 Alpha","tagName":"h2"},{"title":"Clearing Events​","type":1,"pageTitle":"Handling Player Events","url":"/react-native-video/docs/v7/events/#clearing-events","content":" The player.clearEvent(eventName) method can be used to clear a specific native event handler.When a player instance is no longer needed and player.release() is called, all event listeners are automatically cleared ","version":"v7 Alpha","tagName":"h2"},{"title":"Player","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/player/","content":"","keywords":"","version":"v7 Alpha"},{"title":"Initialization​","type":1,"pageTitle":"Player","url":"/react-native-video/docs/v7/player/#initialization","content":" To use the VideoPlayer, you first need to create an instance of it with a video source. There are two ways to do this:  using useVideoPlayer hook  import { useVideoPlayer } from 'react-native-video'; const player = useVideoPlayer({ source: { uri: 'https://www.w3schools.com/html/mov_bbb.mp4', }, });   info useVideoPlayer hook is recommended for most use cases. It automatically manages the player lifecycle between the component mount and unmount.  or using VideoPlayer class constructor directly  import { VideoPlayer } from 'react-native-video'; // Using a URL string const player = new VideoPlayer('https://example.com/video.mp4'); // Using a VideoSource object const playerWithSource = new VideoPlayer({ uri: 'https://example.com/video.mp4' }); // Using a VideoConfig object const playerWithConfig = new VideoPlayer({ source: { uri: 'https://example.com/video.mp4' }, // other configurations });   warning When using VideoPlayer class directly, you need to manually manage the player lifecycle. Once you no longer need the player, you need to call release() method to release the player's native resources. see Player Lifecycle for more details.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Core Functionality​","type":1,"pageTitle":"Player","url":"/react-native-video/docs/v7/player/#core-functionality","content":" The VideoPlayer class offers a comprehensive set of methods and properties to control video playback:  ","version":"v7 Alpha","tagName":"h2"},{"title":"Playback Control​","type":1,"pageTitle":"Player","url":"/react-native-video/docs/v7/player/#playback-control","content":" Method\tDescriptionplay()\tStarts or resumes video playback. pause()\tPauses video playback. seekBy(time: number)\tSeeks the video forward or backward by the specified number of seconds. seekTo(time: number)\tSeeks the video to a specific time in seconds. replaceSourceAsync(source: VideoSource | VideoConfig | null)\tReplaces the current video source with a new one. Pass null to release the current source without replacing it. preload()\tPreloads the video content without starting playback. This can help improve the startup time when play() is called. release()\tReleases the player's native resources. The player is no longer usable after calling this method. Note: If you intend to reuse the player instance with a different source, use replaceSourceAsync(null) to clear resources instead of release().  ","version":"v7 Alpha","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"Player","url":"/react-native-video/docs/v7/player/#properties","content":" Property\tAccess\tType\tDescriptionsource\tRead-only\tVideoPlayerSource\tGets the current VideoPlayerSource object. status\tRead-only\tVideoPlayerStatus\tGets the current status (e.g., playing, paused, buffering). duration\tRead-only\tnumber\tGets the total duration of the video in seconds. volume\tRead/Write\tnumber\tGets or sets the player volume (0.0 to 1.0). currentTime\tRead/Write\tnumber\tGets or sets the current playback time in seconds. muted\tRead/Write\tboolean\tGets or sets whether the video is muted. loop\tRead/Write\tboolean\tGets or sets whether the video should loop. rate\tRead/Write\tnumber\tGets or sets the playback rate (e.g., 1.0 for normal speed, 0.5 for half speed, 2.0 for double speed). mixAudioMode\tRead/Write\tMixAudioMode\tControls how this player's audio mixes with other audio sources (see MixAudioMode). ignoreSilentSwitchMode\tRead/Write\tIgnoreSilentSwitchMode\tiOS-only. Determines how audio should behave when the hardware mute (silent) switch is on. playInBackground\tRead/Write\tboolean\tWhether playback should continue when the app goes to the background. playWhenInactive\tRead/Write\tboolean\tWhether playback should continue when the app is inactive (e.g., during a phone call). isPlaying\tRead-only\tboolean\tReturns true if the video is currently playing.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Error Handling​","type":1,"pageTitle":"Player","url":"/react-native-video/docs/v7/player/#error-handling","content":" Property\tType\tDescriptiononError?\t(error: VideoRuntimeError) =&gt; void\tA callback function that is invoked when a runtime error occurs in the player. You can use this to catch and handle errors gracefully. ","version":"v7 Alpha","tagName":"h3"},{"title":"Useful Projects","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/projects","content":"","keywords":"","version":"v7 Alpha"},{"title":"Our (TheWidlarzGroup) Libraries​","type":1,"pageTitle":"Useful Projects","url":"/react-native-video/docs/v7/projects#our-thewidlarzgroup-libraries","content":" react-native-video-player: Our video player UI library.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Community Libraries​","type":1,"pageTitle":"Useful Projects","url":"/react-native-video/docs/v7/projects#community-libraries","content":" react-native-corner-video: A floating video player.react-native-track-player: A toolbox for audio playback.react-native-video-controls: A video player UI.react-native-media-console: An updated version of react-native-video-controls, rewritten in TypeScript. ","version":"v7 Alpha","tagName":"h2"},{"title":"VideoView Component","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/video-view","content":"","keywords":"","version":"v7 Alpha"},{"title":"Basic Usage​","type":1,"pageTitle":"VideoView Component","url":"/react-native-video/docs/v7/video-view#basic-usage","content":" To use VideoView, you need to pass a VideoPlayer instance to its player prop.  import React from 'react'; import { VideoPlayer, VideoView } from 'react-native-video'; import { StyleSheet } from 'react-native'; const App = () =&gt; { const player = useVideoPlayer('https://example.com/video.mp4', (_player) =&gt; { // This is optional setup function that will be called when the player is created. _player.play(); }); return ( &lt;VideoView style={styles.video} player={player} controls={true} /&gt; ); }; const styles = StyleSheet.create({ video: { width: '100%', height: 200, }, }); export default App;   ","version":"v7 Alpha","tagName":"h2"},{"title":"Props​","type":1,"pageTitle":"VideoView Component","url":"/react-native-video/docs/v7/video-view#props","content":" Prop\tType\tRequired\tDefault\tDescriptionplayer\tVideoPlayer\tYes\t-\tThe VideoPlayer instance that manages the video to be displayed. style\tViewStyle\tNo\t-\tStandard React Native styles to control the layout and appearance of the VideoView. controls\tboolean\tNo\tfalse\tWhether to show the native video playback controls (play/pause, seek bar, volume, etc.). pictureInPicture\tboolean\tNo\tfalse\tWhether to enable and show the picture-in-picture (PiP) button in the native controls (if supported by the platform and controls are visible). autoEnterPictureInPicture\tboolean\tNo\tfalse\tWhether the video should automatically enter PiP mode when it starts playing and the app is backgrounded (behavior might vary by platform). resizeMode\t'contain' | 'cover' | 'stretch' | 'none'\tNo\t'none'\tHow the video should be resized to fit the view.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Events​","type":1,"pageTitle":"VideoView Component","url":"/react-native-video/docs/v7/video-view#events","content":" VideoView also accepts several event callback props related to UI state changes:  Event\tType\tDescriptiononPictureInPictureChange?\t(event: { isActive: boolean }) =&gt; void\tFired when the picture-in-picture mode starts or stops. onFullscreenChange?\t(event: { isFullscreen: boolean }) =&gt; void\tFired when the fullscreen mode starts or stops. willEnterFullscreen?\t() =&gt; void\tFired just before the view enters fullscreen mode. willExitFullscreen?\t() =&gt; void\tFired just before the view exits fullscreen mode. willEnterPictureInPicture?\t() =&gt; void\tFired just before the view enters picture-in-picture mode. willExitPictureInPicture?\t() =&gt; void\tFired just before the view exits picture-in-picture mode.  These can be used to update your component's state or UI in response to these changes.  &lt;VideoView player={player} onFullscreenChange={({ isFullscreen }) =&gt; { console.log(isFullscreen ? 'Entered fullscreen' : 'Exited fullscreen'); }} onPictureInPictureChange={({ isActive }) =&gt; { console.log(isActive ? 'PiP active' : 'PiP inactive'); }} /&gt;   ","version":"v7 Alpha","tagName":"h2"},{"title":"Refs and Imperative Methods​","type":1,"pageTitle":"VideoView Component","url":"/react-native-video/docs/v7/video-view#refs-and-imperative-methods","content":" You can obtain a ref to the VideoView component to call imperative methods:  const videoViewRef = React.useRef&lt;VideoViewRef&gt;(null); // ... &lt;VideoView ref={videoViewRef} player={player} /&gt; // Later, you can call methods like: videoViewRef.current?.enterFullscreen();   Available methods on the VideoViewRef:  Method\tType\tDescriptionenterFullscreen()\t() =&gt; void\tProgrammatically requests the video view to enter fullscreen mode. exitFullscreen()\t() =&gt; void\tProgrammatically requests the video view to exit fullscreen mode. enterPictureInPicture()\t() =&gt; void\tProgrammatically requests the video view to enter picture-in-picture mode. exitPictureInPicture()\t() =&gt; void\tProgrammatically requests the video view to exit picture-in-picture mode. canEnterPictureInPicture()\t() =&gt; boolean\tChecks if picture-in-picture mode is currently available and supported. Returns true if PiP can be entered, false otherwise. ","version":"v7 Alpha","tagName":"h2"},{"title":"Configurable Props","type":0,"sectionRef":"#","url":"/react-native-video/docs/v6/component/props","content":"","keywords":"","version":"v6"},{"title":"Details​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#details","content":" ","version":"v6","tagName":"h2"},{"title":"adTagUrl​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#adtagurl","content":" warning Deprecated, use source.ad.adTagUrl instead.  Platforms: Android | iOS  Sets the VAST URI to play AVOD ads.  Example:  adTagUrl = &quot;https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&amp;sz=640x480&amp;cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&amp;ciu_szs=300x250&amp;gdfp_req=1&amp;ad_rule=1&amp;output=vmap&amp;unviewed_position_start=1&amp;env=vp&amp;impl=s&amp;cmsid=496&amp;vid=short_onecue&amp;correlator=&quot;;   Note: You need to enable IMA SDK in the Gradle or Podfile – see Enable Client-Side Ads Insertion.    ","version":"v6","tagName":"h3"},{"title":"allowsExternalPlayback​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#allowsexternalplayback","content":" Platform: iOS  Indicates whether the player allows switching to external playback mode such as AirPlay or HDMI.  true (default) – Allows switching to external playback mode.false – Prevents switching to external playback mode.    ","version":"v6","tagName":"h3"},{"title":"audioOutput​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#audiooutput","content":" Platforms: Android | iOS | visionOS  Changes the audio output.  speaker (default) – Plays through the speaker.earpiece – Plays through the earpiece.    ","version":"v6","tagName":"h3"},{"title":"automaticallyWaitsToMinimizeStalling​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#automaticallywaitstominimizestalling","content":" Platforms: iOS | visionOS  Indicates whether the player should automatically delay playback to minimize stalling. Available for clients linked against iOS 10.0 and later.  false – Immediately starts playback.true (default) – Delays playback to minimize stalling.    ","version":"v6","tagName":"h3"},{"title":"bufferConfig​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#bufferconfig","content":" warning Deprecated, use source.bufferConfig instead.  Platform: Android  Adjusts the buffer settings. This prop takes an object with one or more of the following properties:  Property\tType\tDescriptionminBufferMs\tnumber\tMinimum duration (ms) the player will attempt to keep buffered. maxBufferMs\tnumber\tMaximum duration (ms) the player will attempt to buffer. bufferForPlaybackMs\tnumber\tDuration (ms) that must be buffered before playback starts or resumes. bufferForPlaybackAfterRebufferMs\tnumber\tDuration (ms) that must be buffered after a rebuffer before playback resumes. backBufferDurationMs\tnumber\tDuration (ms) of buffer to keep before the current position (allows rewinding). maxHeapAllocationPercent\tnumber\tPercentage of available heap the video can use to buffer (0 to 1). minBackBufferMemoryReservePercent\tnumber\tPercentage of available app memory before the back buffer is disabled (0 to 1). minBufferMemoryReservePercent\tnumber\tPercentage of available app memory reserved for preventing buffer usage (0 to 1). cacheSizeMB\tnumber\tCache size in MB. Set to 0 to disable caching (Android only). live\tobject\tObject containing configuration for live playback. See below.  Live Buffer Configurations​  Property\tType\tDescriptionmaxPlaybackSpeed\tnumber\tMaximum playback speed for catching up to target live offset. minPlaybackSpeed\tnumber\tMinimum playback speed for falling back to target live offset. maxOffsetMs\tnumber\tMaximum allowed live offset. The player won’t exceed this limit. minOffsetMs\tnumber\tMinimum allowed live offset. The player won’t go below this limit. targetOffsetMs\tnumber\tThe target live offset the player will aim to maintain.  For more details on Android live streaming, see ExoPlayer Live Streaming.  Example with Default Values​  bufferConfig={{ minBufferMs: 15000, maxBufferMs: 50000, bufferForPlaybackMs: 2500, bufferForPlaybackAfterRebufferMs: 5000, backBufferDurationMs: 120000, cacheSizeMB: 0, live: { targetOffsetMs: 500, }, }}   Note: The Android cache is global and shared among all components. The first cacheSizeMB value set persists throughout the app lifecycle.    ","version":"v6","tagName":"h3"},{"title":"bufferingStrategy​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#bufferingstrategy","content":" Platform: Android  Configures the buffering and data loading strategy.  Default (default) – Uses ExoPlayer's default loading strategy.DisableBuffering – Prevents buffering beyond the immediate need. Use with caution, as this may stop playback.DependingOnMemory – Uses ExoPlayer’s default strategy but stops buffering and triggers garbage collection when memory is low.    ","version":"v6","tagName":"h3"},{"title":"chapters​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#chapters","content":" Platform: tvOS  Provides a custom chapter source for tvOS. This prop takes an array of objects with the following properties:  Property\tType\tDescriptiontitle\tstring\tThe title of the chapter. startTime\tnumber\tThe start time of the chapter (seconds). endTime\tnumber\tThe end time of the chapter (seconds). uri\tstring?\tOptional image override URL (HTTP or Base64). Some media auto-generate images.    ","version":"v6","tagName":"h3"},{"title":"currentPlaybackTime​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#currentplaybacktime","content":" Platforms: Android | iOS  When playing an HLS live stream with an EXT-X-PROGRAM-DATE-TIME tag, this property contains the epoch value in milliseconds.    ","version":"v6","tagName":"h3"},{"title":"controls​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#controls","content":" Platforms: Android | iOS | visionOS | web  Determines whether player controls are shown.  false (default) – Hides player controls.true – Displays player controls.  Controls are always visible in fullscreen mode, even if controls={false}. To add custom controls, use packages like:  react-native-video-controlsreact-native-media-console  See Useful Side Projects.    ","version":"v6","tagName":"h3"},{"title":"controlsStyles​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#controlsstyles","content":" Platform: Android  Adjust the control styles. This prop is needed only if controls={true} and is an object. See the supported properties below.  Property\tType\tDescriptionhidePosition\tboolean\tHides the position indicator. Default is false. hidePlayPause\tboolean\tHides the play/pause button. Default is false. hideForward\tboolean\tHides the forward button. Default is false. hideRewind\tboolean\tHides the rewind button. Default is false. hideNext\tboolean\tHides the next button. Default is false. hidePrevious\tboolean\tHides the previous button. Default is false. hideFullscreen\tboolean\tHides the fullscreen button. Default is false. hideSeekBar\tboolean\tHides the seek bar, useful for live broadcasts. Default is false. hideDuration\tboolean\tHides the duration display. Default is false. hideNavigationBarOnFullScreenMode\tboolean\tHides the navigation bar in fullscreen mode. Default is true. hideNotificationBarOnFullScreenMode\tboolean\tHides the notification bar in fullscreen mode. Default is true. hideSettingButton\tboolean\tHides the settings button. Default is true. seekIncrementMS\tnumber\tDefines the seek increment in milliseconds. Default is 10000. liveLabel\tstring\tSets a label for live video.  Example with default values:  controlsStyles={{ hidePosition: false, hidePlayPause: false, hideForward: false, hideRewind: false, hideNext: false, hidePrevious: false, hideFullscreen: false, hideSeekBar: false, hideDuration: false, hideNavigationBarOnFullScreenMode: true, hideNotificationBarOnFullScreenMode: true, hideSettingButton: true, seekIncrementMS: 10000, liveLabel: &quot;LIVE&quot; }}     ","version":"v6","tagName":"h3"},{"title":"contentStartTime​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#contentstarttime","content":" warning Deprecated, use source.contentStartTime instead.  Platform: Android  Defines the start time in milliseconds for SSAI content. This ensures that video resolutions are loaded at the correct time. Note: This feature only works with DASH streams.    ","version":"v6","tagName":"h3"},{"title":"debug​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#debug","content":" Platform: Android  Enables detailed logging.  warning Do not use this in production builds.  Property\tType\tDescriptionenable\tboolean\tEnables verbose logs. Default is false. thread\tboolean\tDisplays logs with thread information.  Example:  debug={{ enable: true, thread: true, }}     ","version":"v6","tagName":"h3"},{"title":"disableFocus​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#disablefocus","content":" Platform: Android  Determines whether video audio should override background music/audio on Android.  false (default) – Overrides background audio/music.true – Allows background audio/music from other apps to continue playing.  Note: If true, multiple videos can play simultaneously. If false, starting another video will pause the first one.    ","version":"v6","tagName":"h3"},{"title":"disableDisconnectError​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#disabledisconnecterror","content":" Platform: Android  Determines if the player should throw an error when the network connection is lost.  false (default) – Throws an error when the connection is lost.true – The player will keep trying to buffer when the connection is lost.    ","version":"v6","tagName":"h3"},{"title":"disableAudioSessionManagement​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#disableaudiosessionmanagement","content":" Platform: iOS  Disable audio session management in library (for all views).  true - Disable audio session management in the library.false (default) - Enable audio session management in the library.  danger This prop disables audio session management in the library. You only should use this prop if you are managing the audio session yourself. You can encounter issues with other features, like background audio, if you don't properly manage the audio session.    ","version":"v6","tagName":"h3"},{"title":"drm​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#drm","content":" warning Deprecated, use source.drm instead.  Platforms: Android | iOS  To set up DRM, follow this guide.    ","version":"v6","tagName":"h3"},{"title":"enterPictureInPictureOnLeave​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#enterpictureinpictureonleave","content":" Platforms: iOS | Android  Determines whether to enter Picture-in-Picture (PiP) mode when the user leaves the app.  false (default) – Does not enable PiP mode.true – Plays media in PiP mode when the user switches apps.  Using this on Android:  With Expo: Add enableAndroidPictureInPicture to app.json:   &quot;plugins&quot;: [ [ &quot;react-native-video&quot;, { &quot;enableAndroidPictureInPicture&quot;: true } ] ]   With Bare React Native: Add PiP support in AndroidManifest.xml:  &lt;activity android:name=&quot;.MainActivity&quot; android:supportsPictureInPicture=&quot;true&quot;&gt;   Note: Video ads cannot start when using PiP on iOS. More details are available in the Google IMA SDK Docs.    ","version":"v6","tagName":"h3"},{"title":"filter​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#filter","content":" Platforms: iOS | visionOS  Applies a video filter.  FilterType\tDescriptionNONE (default)\tNo filter INVERT\tCIColorInvert MONOCHROME\tCIColorMonochrome POSTERIZE\tCIColorPosterize FALSE\tCIFalseColor MAXIMUMCOMPONENT\tCIMaximumComponent MINIMUMCOMPONENT\tCIMinimumComponent CHROME\tCIPhotoEffectChrome FADE\tCIPhotoEffectFade INSTANT\tCIPhotoEffectInstant MONO\tCIPhotoEffectMono NOIR\tCIPhotoEffectNoir PROCESS\tCIPhotoEffectProcess TONAL\tCIPhotoEffectTonal TRANSFER\tCIPhotoEffectTransfer SEPIA\tCISepiaTone  Notes: Using a filter may increase CPU usage.Saving a filtered video and reloading it is a workaround for performance issues.Filters are not supported on HLS playlists.filterEnabled must be set to true for filters to work.    ","version":"v6","tagName":"h3"},{"title":"filterEnabled​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#filterenabled","content":" Platforms: iOS | visionOS  Enables video filter.  false (default) – Don't enable filter.true – Enable filter.    ","version":"v6","tagName":"h3"},{"title":"focusable​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#focusable","content":" Platform: Android  Determines whether this video view should be focusable with a non-touch input device, such as a hardware keyboard.  false – Makes view unfocusable.true (default) – Makes view focusable.    ","version":"v6","tagName":"h3"},{"title":"fullscreen​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#fullscreen","content":" Platforms: Android | iOS | visionOS | web  Controls whether the player enters fullscreen on play.  false (default) – Don’t display the video in fullscreen.true – Display the video in fullscreen.  See presentFullscreenPlayer for details.    ","version":"v6","tagName":"h3"},{"title":"fullscreenAutorotate​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#fullscreenautorotate","content":" Platforms: iOS | visionOS  If a preferred fullscreenOrientation is set, this causes the video to rotate to that orientation but permits rotation of the screen to match the user's holding position. Defaults to true.    ","version":"v6","tagName":"h3"},{"title":"fullscreenOrientation​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#fullscreenorientation","content":" Platforms: iOS | visionOS | web  all (default) – Allows rotation in all orientations.landscape – Locks fullscreen to landscape mode.portrait – Locks fullscreen to portrait mode.    ","version":"v6","tagName":"h3"},{"title":"headers​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#headers","content":" Platforms: iOS | Android  Passes headers to the HTTP client, which can be used for authorization. Headers must be part of the source object.  Example:  source={{ uri: &quot;https://www.example.com/video.mp4&quot;, headers: { Authorization: 'Bearer some-token-value', 'X-Custom-Header': 'some value' } }}     ","version":"v6","tagName":"h3"},{"title":"hideShutterView​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#hideshutterview","content":" Platform: Android  Controls whether the ExoPlayer shutter view (black screen while loading) is enabled.  false (default) – Show shutter view.true – Hide shutter view.    ","version":"v6","tagName":"h3"},{"title":"ignoreSilentSwitch​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#ignoresilentswitch","content":" Platforms: iOS | visionOS  Controls the iOS silent switch behavior.  &quot;inherit&quot; (default) – Uses the default AVPlayer behavior.&quot;ignore&quot; – Plays audio even if the silent switch is set.&quot;obey&quot; – Doesn’t play audio if the silent switch is set.    ","version":"v6","tagName":"h3"},{"title":"maxBitRate​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#maxbitrate","content":" Platforms: Android | iOS | visionOS  Sets the desired limit, in bits per second, of network bandwidth consumption when multiple video streams are available for a playlist.  Default: 0 (no limit on maxBitRate).  Example:  maxBitRate={2000000} // 2 megabits     ","version":"v6","tagName":"h3"},{"title":"mixWithOthers​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#mixwithothers","content":" Platforms: iOS | visionOS  Controls how audio mixes with other apps.  &quot;inherit&quot; (default) – Uses the default AVPlayer behavior.&quot;mix&quot; – Allows this video’s audio to mix with other apps.&quot;duck&quot; – Lowers the volume of other apps while playing this video.    ","version":"v6","tagName":"h3"},{"title":"muted​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#muted","content":" Platforms: All  Controls whether the audio is muted.  false (default) – Don’t mute audio.true – Mute audio.    ","version":"v6","tagName":"h3"},{"title":"paused​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#paused","content":" Platforms: All  Controls whether the media is paused.  false (default) – Don’t pause the media.true – Pause the media.    ","version":"v6","tagName":"h3"},{"title":"playInBackground​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#playinbackground","content":" Platforms: Android | iOS | visionOS  Determines whether the media should continue playing while the app is in the background.  false (default) – Don’t continue playing the media.true – Continue playing the media.  To use this feature on iOS, you must:  Enable Background Audio in your Xcode project.Set the ignoreSilentSwitch prop to &quot;ignore&quot;.    ","version":"v6","tagName":"h3"},{"title":"playWhenInactive​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#playwheninactive","content":" Platforms: iOS | visionOS  Determines whether the media should continue playing when notifications or the Control Center are in front of the video.  false (default) – Don’t continue playing the media.true – Continue playing the media.    ","version":"v6","tagName":"h3"},{"title":"poster​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#poster","content":" Platforms: All  warning Value: string with a URL for the poster is deprecated, use poster as an object instead.  An image to display while the video is loading.  Example:  &lt;Video&gt; poster= {{ source: { uri: &quot;https://baconmockup.com/300/200/&quot; }, resizeMode: &quot;cover&quot;, }} &lt;/Video&gt;     ","version":"v6","tagName":"h3"},{"title":"posterResizeMode​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#posterresizemode","content":" warning Deprecated, use poster with resizeMode key instead.  Platforms: All  Determines how to resize the poster image when the frame doesn’t match the raw video dimensions.  &quot;contain&quot; (default) – Scales the image uniformly to fit within the view.&quot;center&quot; – Centers the image in the view without scaling beyond its original size.&quot;cover&quot; – Scales the image uniformly, ensuring it fills the view while maintaining aspect ratio.&quot;none&quot; – No resizing applied.&quot;repeat&quot; – Repeats the image to fill the view (iOS only).&quot;stretch&quot; – Stretches width and height independently, potentially distorting the aspect ratio.    ","version":"v6","tagName":"h3"},{"title":"preferredForwardBufferDuration​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#preferredforwardbufferduration","content":" Platforms: iOS | visionOS  Defines how long the player should buffer media ahead of the playhead to prevent playback interruptions.  Default: 0.  Apple Documentation    ","version":"v6","tagName":"h3"},{"title":"preventsDisplaySleepDuringVideoPlayback​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#preventsdisplaysleepduringvideoplayback","content":" Platforms: iOS | Android  Determines whether the device screen should remain active while playing a video.  Default: true (prevents the display from sleeping).    ","version":"v6","tagName":"h3"},{"title":"progressUpdateInterval​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#progressupdateinterval","content":" Platforms: All  Sets the delay (in milliseconds) between onProgress events.  Default: 250.0 ms.    ","version":"v6","tagName":"h3"},{"title":"rate​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#rate","content":" Platforms: All  Controls the speed at which the media should play.  0.0 – Pauses the video (iOS only).1.0 (default) – Plays at normal speed.Other values – Adjusts playback speed (faster/slower).    ","version":"v6","tagName":"h3"},{"title":"renderLoader​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#renderloader","content":" Platforms: All  Allows you to provide a custom component to display while the video is loading.  If renderLoader is provided, poster and posterResizeMode will be ignored.  renderLoader can be either a component or a function returning a component.  Function Signature​  interface ReactVideoRenderLoaderProps { source?: ReactVideoSource; style?: StyleProp&lt;ImageStyle&gt;; resizeMode?: EnumValues&lt;VideoResizeMode&gt;; }   Example​  &lt;Video&gt; renderLoader= {() =&gt; ( &lt;View&gt; &lt;Text&gt;Custom Loader&lt;/Text&gt; &lt;/View&gt; )} &lt;/Video&gt;     ","version":"v6","tagName":"h3"},{"title":"repeat​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#repeat","content":" Platforms: All  Determines whether to repeat the video when playback reaches the end.  false (default) – Don’t repeat the video.true – Repeat the video.    ","version":"v6","tagName":"h3"},{"title":"reportBandwidth​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#reportbandwidth","content":" Platform: Android  Determines whether to generate onBandwidthUpdate events. This is necessary due to the high frequency of these events on ExoPlayer.  false (default) – Don’t generate onBandwidthUpdate events.true – Generate onBandwidthUpdate events.    ","version":"v6","tagName":"h3"},{"title":"resizeMode​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#resizemode","content":" Platforms: Android | iOS | Windows UWP  Determines how to resize the video when the frame doesn’t match the raw video dimensions.  &quot;none&quot; (default) – No resizing applied.&quot;contain&quot; – Scales the video uniformly to fit within the view.&quot;cover&quot; – Scales the video uniformly to fill the view while maintaining aspect ratio.&quot;stretch&quot; – Stretches width and height independently, which may alter the aspect ratio.    ","version":"v6","tagName":"h3"},{"title":"selectedAudioTrack​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#selectedaudiotrack","content":" Platforms: Android | iOS | visionOS  Configures which audio track, if any, is played.  selectedAudioTrack={{ type: &quot;title&quot;, value: &quot;Dubbing&quot; }}   Type\tValue\tDescription&quot;system&quot; (default)\tN/A\tPlay the audio track that matches the system language. If none match, play the first track. &quot;disabled&quot;\tN/A\tTurn off audio. &quot;title&quot;\tstring\tPlay the audio track with the specified title, e.g., &quot;French&quot;. &quot;language&quot;\tstring\tPlay the audio track with the specified language, e.g., &quot;fr&quot;. &quot;index&quot;\tnumber\tPlay the audio track with the specified index, e.g., 0.  If no matching track is found, the first available track will be played. If multiple tracks match, the first match will be used.    ","version":"v6","tagName":"h3"},{"title":"selectedTextTrack​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#selectedtexttrack","content":" Platforms: Android | iOS | visionOS  Configures which text track (captions or subtitles), if any, is shown.  selectedTextTrack={{ type: &quot;title&quot;, value: &quot;English Subtitles&quot; }}   Type\tValue\tDescription&quot;system&quot; (default)\tN/A\tDisplay captions only if the system preference for captions is enabled. &quot;disabled&quot;\tN/A\tDon’t display a text track. &quot;title&quot;\tstring\tDisplay the text track with the specified title, e.g., &quot;French 1&quot;. &quot;language&quot;\tstring\tDisplay the text track with the specified language, e.g., &quot;fr&quot;. &quot;index&quot;\tnumber\tDisplay the text track with the specified index, e.g., 0.  If no matching track is found, no subtitles will be displayed. If multiple tracks match, the first match will be used.    ","version":"v6","tagName":"h3"},{"title":"selectedVideoTrack​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#selectedvideotrack","content":" Platform: Android  Configures which video track should be played. By default, the player uses Adaptive Bitrate Streaming (ABR) to automatically select the best stream based on available bandwidth.  selectedVideoTrack={{ type: &quot;resolution&quot;, value: 480 }}   Type\tValue\tDescription&quot;auto&quot; (default)\tN/A\tLet the player determine the best track using ABR. &quot;disabled&quot;\tN/A\tTurn off video. &quot;resolution&quot;\tnumber\tPlay the video track with the specified height, e.g., 480 for the 480p stream. &quot;index&quot;\tnumber\tPlay the video track with the specified index, e.g., 0.  If no matching track is found, ABR will be used.    ","version":"v6","tagName":"h3"},{"title":"shutterColor​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#shuttercolor","content":" Platform: Android  Applies color to the shutter view. If black flashes appear before the video starts, set:  shutterColor = &quot;transparent&quot;;   Default: black.    ","version":"v6","tagName":"h3"},{"title":"source​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#source","content":" Sets the media source. You can pass an asset loaded via require or an object with a uri.  Setting the source will trigger the player to attempt to load the provided media with all other given props. Ensure all props are provided before or at the same time as setting the source.  Rendering the player component with a null source initializes the player and starts playing once a source value is provided.  Providing a null source value after loading a previous source stops playback and clears out the previous content.  The documentation for this prop is incomplete and will be updated as each option is investigated and tested.  Asset Loaded via require​  danger On iOS, file names must not contain spaces. For example, my video.mp4 will not work—use my-video.mp4 instead.  Platforms: Android | iOS | visionOS | Windows UWP  Example:  Pass the asset directly (deprecated):  const sintel = require(&quot;./sintel.mp4&quot;); source = { sintel };   Or by using a URI (starting from 6.0.0-beta.6):  const sintel = require('./sintel.mp4'); source={{ uri: sintel }}   URI String​  A number of URI schemes are supported by passing an object with a uri attribute.  All URI strings must be URL encoded. For example, 'www.myurl.com/blabla?q=test uri' is invalid, whereas 'www.myurl.com/blabla?q=test%20uri' is valid.  Web Address (http://, https://)​  Platforms: All  Example:  source={{ uri: 'https://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_10mb.mp4' }}   File Path (file://)​  Platform: Android  Example:  source={{ uri: 'file:///sdcard/Movies/sintel.mp4' }}   Note: Your app will need permission to read external storage if accessing a file outside your app.  File from Asset Folder (asset://)​  Platform: Android  Allows playing a video file from the app's asset folder.  Example:  source={{ uri: 'asset:///sintel.mp4' }}   iPod Library (ipod-library://)​  Platform: iOS  Path to a sound file in your iTunes library, typically shared from iTunes to your app.  Example:  source={{ uri: 'ipod-library:///path/to/music.mp3' }}   Note: Using this feature requires adding an entry for NSAppleMusicUsageDescription to your Info.plist file, as described here.  Explicit MIME Type for Streams​  Provide a type property (mpd/m3u8/ism) inside the source object. This is needed when the URL extension does not match the expected MIME type.  Example (URL extension is .ism for Smooth Streaming, but the file is actually MPEG-DASH (mpd)):  source={{ uri: 'http://host-serving-a-type-different-than-the-extension.ism/manifest(format=mpd-time-csf)', type: 'mpd' }}   Other Protocols​  The following protocols are supported on some platforms but not fully documented yet:content://, ms-appx://, ms-appdata://, assets-library://  Using DRM Content​  Platforms: Android | iOS | visionOS | tvOS  To set up DRM, follow this guide.  Example:  { description: 'WV: Secure SD &amp; HD (cbcs, MP4, H264)', uri: 'https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd', drm: { type: DRMType.WIDEVINE, licenseServer: 'https://proxy.uat.widevine.com/proxy?provider=widevine_test', }, },   Start Playback at a Specific Point in Time​  Platforms: Android | iOS | web  Provide an optional startPosition for video playback. The value is in milliseconds. If the cropStart prop is applied, it will be applied from that point forward. (If it is negative, undefined, or null, it is ignored.)  Playing Only a Portion of the Video (Start &amp; End Time)​  Platforms: Android | iOS  Provide an optional cropStart and/or cropEnd for the video. Values are in milliseconds. This is useful when you want to play only a portion of a large video.  Example:  source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012, cropEnd: 48500 }} source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012 }} source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropEnd: 48500 }}   Overriding the Metadata of a Source​  Platforms: Android | iOS | tvOS  Provide optional title, subtitle, artist, imageUri, and/or description properties for the video. This is useful when using notification controls on Android or iOS or adapting the tvOS playback experience.  Example:  source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', metadata: { title: 'Custom Title', subtitle: 'Custom Subtitle', artist: 'Custom Artist', description: 'Custom Description', imageUri: 'https://pbs.twimg.com/profile_images/1498641868397191170/6qW2XkuI_400x400.png' } }}   ad​  Platforms: Android | iOS  Sets the ad configuration.  Example:  ad: { adTagUrl = &quot;https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&amp;sz=640x480&amp;cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&amp;ciu_szs=300x250&amp;gdfp_req=1&amp;ad_rule=1&amp;output=vmap&amp;unviewed_position_start=1&amp;env=vp&amp;impl=s&amp;cmsid=496&amp;vid=short_onecue&amp;correlator=&quot;; adLanguage = &quot;fr&quot;; }   See: ads for more information.  Note: You need to enable IMA SDK in the Gradle or Pod file - enable client-side ads insertion.  contentStartTime​  Platform: Android  The start time in ms for SSAI content. This determines at what time to load the video info like resolutions. Use this only when you have an SSAI stream where the ad resolution is not the same as the content resolution.  Note: This feature only works on DASH streams.  textTracksAllowChunklessPreparation​  Platform: Android  Allow Chunkless Preparation for HLS media sources. See: disabling-chunkless in the Android documentation.  Default value: true.  source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', textTracksAllowChunklessPreparation: false, }}   bufferConfig​  Platform: Android  Adjust the buffer settings. This prop takes an object with one or more of the properties listed below.  Property\tType\tDescriptionminBufferMs\tnumber\tMinimum duration of media that the player will attempt to buffer at all times, in milliseconds. maxBufferMs\tnumber\tMaximum duration of media that the player will attempt to buffer, in milliseconds. bufferForPlaybackMs\tnumber\tDuration of media that must be buffered for playback to start or resume following a user action, in milliseconds. bufferForPlaybackAfterRebufferMs\tnumber\tDuration of media that must be buffered for playback to resume after a rebuffer, in milliseconds. backBufferDurationMs\tnumber\tDuration of buffer to keep before the current position, allowing rewinding without rebuffering. maxHeapAllocationPercent\tnumber\tPercentage of available heap that the video can use to buffer, between 0 and 1. minBackBufferMemoryReservePercent\tnumber\tPercentage of available app memory at which during startup the back buffer will be disabled, between 0 and 1. minBufferMemoryReservePercent\tnumber\tPercentage of available app memory to keep in reserve, preventing buffer usage, between 0 and 1. initialBitrate\tnumber\tInitial bitrate in bits per second (Android only). Defaults to 1_000_000. Used only at start, then ABR (Adaptive Bitrate Streaming) takes over. cacheSizeMB\tnumber\tCache size in MB, preventing new src requests and saving bandwidth while repeating videos, or 0 to disable. Android only. live\tobject\tObject containing another config set for live playback configuration.  minLoadRetryCount​  Platform: Android  Sets the minimum number of times to retry loading data before failing and reporting an error to the application. Useful for recovering from transient internet failures.  Default: 3. Retries 3 times.  Example:  source={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', minLoadRetryCount: 5 // Retry 5 times. }}   textTracks​  Platforms: Android | iOS | visionOS  Load one or more &quot;sidecar&quot; text tracks. This takes an array of objects representing each track. Each object should have the format:  warning This feature does not work with HLS playlists (e.g., m3u8) on iOS.  Property\tDescriptiontitle\tDescriptive name for the track. language\t2-letter ISO 639-1 code representing the language. type\tMime type of the track. Supports TextTrackType.SUBRIP, TextTrackType.TTML, TextTrackType.VTT. uri\tURL for the text track. Only tracks hosted on a web server are supported.  Note: Due to iOS limitations, sidecar text tracks are not compatible with AirPlay. If textTracks are specified, AirPlay support will be automatically disabled.  Example:  import { TextTrackType } from &quot;react-native-video&quot;; textTracks = [ { title: &quot;English CC&quot;, language: &quot;en&quot;, type: TextTrackType.VTT, // &quot;text/vtt&quot; uri: &quot;https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt&quot;, }, { title: &quot;Spanish Subtitles&quot;, language: &quot;es&quot;, type: TextTrackType.SUBRIP, // &quot;application/x-subrip&quot; uri: &quot;https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt&quot;, }, ];     ","version":"v6","tagName":"h3"},{"title":"subtitleStyle​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#subtitlestyle","content":" Platforms: Android | iOS  Property\tPlatform\tDescription\tPlatformsfontSize\tAndroid\tAdjust the font size of the subtitles. Default: font size of the device\tAndroid paddingTop\tAndroid\tAdjust the top padding of the subtitles. Default: 0\tAndroid paddingBottom\tAndroid\tAdjust the bottom padding of the subtitles. Default: 0\tAndroid paddingLeft\tAndroid\tAdjust the left padding of the subtitles. Default: 0\tAndroid paddingRight\tAndroid\tAdjust the right padding of the subtitles. Default: 0\tAndroid opacity\tAndroid, iOS\tAdjust the visibility of subtitles with 0 hiding and 1 fully showing them. Android supports float values between 0 and 1 for varying opacity levels, whereas iOS supports only 0 or 1. Default: 1.\tAndroid, iOS subtitlesFollowVideo\tAndroid\tBoolean to adjust position of subtitles. Default: true\t  Example:  subtitleStyle={{ paddingBottom: 50, fontSize: 20, opacity: 0 }}   Note for subtitlesFollowVideo  subtitlesFollowVideo helps to determine how the subtitles are positioned. To understand this prop, you need to understand how view management works. The main View style passed to react-native-video is the space reserved to display the video component. It may not match exactly the real video size. For example, you can pass a 4:3 video view and render a 16:9 video inside. So there is a second view, the video view.  Subtitles are managed in a third view.  When subtitlesFollowVideo is set to true, the subtitle view will adapt to the video view. If the video is displayed out of screen, the subtitles may also be displayed out of screen.When subtitlesFollowVideo is set to false, the subtitle view will adapt to the main view. If the video is displayed out of screen, the subtitles may still remain visible within the main view.  This prop can be changed at runtime.    ","version":"v6","tagName":"h3"},{"title":"textTracks​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#texttracks-1","content":" warning Deprecated, use source.textTracks instead. Changing text tracks will restart playback.  Platforms: Android | iOS | visionOS  Load one or more &quot;sidecar&quot; text tracks. This takes an array of objects representing each track. Each object should have the format:  warning This feature does not work with HLS playlists (e.g., m3u8) on iOS.  Property\tDescriptiontitle\tDescriptive name for the track language\t2-letter ISO 639-1 code representing the language type\tMime type of the track (TextTrackType.SUBRIP - SubRip (.srt), TextTrackType.TTML - TTML (.ttml), TextTrackType.VTT - WebVTT (.vtt)). iOS only supports VTT, Android supports all 3. uri\tURL for the text track. Currently, only tracks hosted on a web server are supported.  On iOS, sidecar text tracks are only supported for individual files, not HLS playlists. For HLS, you should include the text tracks as part of the playlist.  Note: Due to iOS limitations, sidecar text tracks are not compatible with AirPlay. If textTracks are specified, AirPlay support will be automatically disabled.  Example:  import { TextTrackType }, Video from 'react-native-video'; textTracks=[ { title: &quot;English CC&quot;, language: &quot;en&quot;, type: TextTrackType.VTT, // &quot;text/vtt&quot; uri: &quot;https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt&quot; }, { title: &quot;Spanish Subtitles&quot;, language: &quot;es&quot;, type: TextTrackType.SUBRIP, // &quot;application/x-subrip&quot; uri: &quot;https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt&quot; } ]     ","version":"v6","tagName":"h3"},{"title":"showNotificationControls​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#shownotificationcontrols","content":" Platforms: Android | iOS | web  Controls whether to show media controls in the notification area. For Android, each Video component will have its own notification controls, whereas on iOS only one notification control will be shown for the last active Video component.  On Android, this will also allow for external controls, Google Assistant session, and other benefits of MediaSession.  You probably also want to set playInBackground to true to keep the video playing when the app is in the background, or playWhenInactive to true to keep the video playing when notifications or the Control Center are in front of the video.  To customize the notification controls, you can use the metadata property in the source prop.  false (default) - Don't show media controls in the notification area.true - Show media controls in the notification area.  To test notification controls on iOS, you need to run the app on a real device, as the simulator does not support it.  For Android, you have to add the following code in your AndroidManifest.xml file:  &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; ... &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt; &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK&quot; /&gt; ... &lt;application&gt; ... &lt;service android:name=&quot;com.brentvatne.exoplayer.VideoPlaybackService&quot; android:exported=&quot;false&quot; android:foregroundServiceType=&quot;mediaPlayback&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;androidx.media3.session.MediaSessionService&quot; /&gt; &lt;/intent-filter&gt; &lt;/service&gt; &lt;/application&gt; &lt;/manifest&gt;     ","version":"v6","tagName":"h3"},{"title":"useSecureView​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#usesecureview","content":" warning deprecated, use viewType instead  Platform: Android  Force the output to a SurfaceView and enables the secure surface.  This will override useTextureView flag.  SurfaceView is the only one that can be labeled as secure.  true - Use securityfalse (default) - Do not use security  ","version":"v6","tagName":"h3"},{"title":"useTextureView​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#usetextureview","content":" warning deprecated, use viewType instead  Platform: Android  Controls whether to output to a TextureView or SurfaceView.  SurfaceView is more efficient and provides better performance but has two limitations:  It can't be animated, transformed or scaledYou can't overlay multiple SurfaceViews  useTextureView can only be set at the same time you're setting the source.  true (default) - Use a TextureViewfalse - Use a SurfaceView  ","version":"v6","tagName":"h3"},{"title":"viewType​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#viewtype","content":" Platform: Android  Allows explicitly specifying the view type. This flag replaces useSecureView and useTextureView fields. There are 3 available values:  'textureView': The video is rendered in a texture view. It allows mapping the view on a texture (useful for 3D). DRM playback is not supported on textureView. If the DRM prop is provided, the surface will be transformed into a SurfaceView.'surfaceView' (default): The video is rendered in a surface, taking fewer resources to render.'secureView': The video is rendered in a surface that prevents screenshots from being taken.  ","version":"v6","tagName":"h3"},{"title":"volume​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#volume","content":" Platforms: All  Adjust the volume.  1.0 (default) - Play at full volume0.0 - Mute the audioOther values - Reduce volume  ","version":"v6","tagName":"h3"},{"title":"cmcd​","type":1,"pageTitle":"Configurable Props","url":"/react-native-video/docs/v6/component/props#cmcd","content":" Platform: Android  Configure CMCD (Common Media Client Data) parameters. CMCD is a standard for conveying client-side metrics and capabilities to servers, which can help improve streaming quality and performance.  For detailed information about CMCD, please refer to the CTA-5004 Final Specification.  false (default) - Don't use CMCDtrue - Use default CMCD configurationobject - Use custom CMCD configuration  When providing an object, you can configure the following properties:  Property\tType\tDescriptionmode\tCmcdMode\tThe mode for sending CMCD data request\tCmcdData\tCustom key-value pairs for the request object session\tCmcdData\tCustom key-value pairs for the session object object\tCmcdData\tCustom key-value pairs for the object metadata status\tCmcdData\tCustom key-value pairs for the status information  Note: The mode property defaults to CmcdMode.MODE_QUERY_PARAMETER if not specified.  CmcdMode​  CmcdMode is an enum that defines how CMCD data should be sent:  CmcdMode.MODE_REQUEST_HEADER (0) - Send CMCD data in the HTTP request headers.CmcdMode.MODE_QUERY_PARAMETER (1) - Send CMCD data as query parameters in the URL.  CmcdData​  CmcdData is a type representing custom key-value pairs for CMCD data. It's defined as:  type CmcdData = Record&lt;`${string}-${string}`, string | number&gt;;   Custom key names MUST include a hyphenated prefix to prevent namespace collisions. It's recommended to use a reverse-DNS syntax for custom prefixes.  Example:  &lt;Video source={{ uri: &quot;https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8&quot;, cmcd: { mode: CmcdMode.MODE_QUERY_PARAMETER, request: { &quot;com-custom-key&quot;: &quot;custom-value&quot;, }, session: { sid: &quot;session-id&quot;, }, object: { br: &quot;3000&quot;, d: &quot;4000&quot;, }, status: { rtp: &quot;1200&quot;, }, }, }} // or other video props /&gt;  ","version":"v6","tagName":"h3"},{"title":"Updating","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/updating","content":"","keywords":"","version":"v7 Alpha"},{"title":"Upgrading from react-native-video v6 to v7​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#upgrading-from-react-native-video-v6-to-v7","content":" Version 7 of react-native-video introduces a significant architectural shift, separating the video player logic from the UI rendering. This change unlocks new capabilities like video preloading and a more intuitive, hook-based API. This guide will walk you through the necessary steps to migrate your application from v6 to v7.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Key Changes in v7​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#key-changes-in-v7","content":" The most substantial change in v7 is the move from a monolithic &lt;Video&gt; component to a more modular approach with two distinct components:  VideoPlayer: A new class that manages the player's state and playback logic. It is not a UI component.VideoView: A UI component responsible for rendering the video on the screen. It takes a VideoPlayer instance as a prop.useVideoPlayer hook: The recommended way to create and manage the lifecycle of a VideoPlayer instance within a functional component. It automatically handles the creation and cleanup of the player.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Step-by-Step Migration Guide​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#step-by-step-migration-guide","content":" 1. Installation​  First, update the react-native-video package to the latest v7 release:  npm install react-native-video@next --save   Then, install the pods for iOS:  cd ios &amp;&amp; pod install   2. Updating Your Component​  The core of the migration involves replacing the &lt;Video&gt; component with the new useVideoPlayer hook and &lt;VideoView&gt; component.  v6 Implementation:  import React, { useRef } from 'react'; import Video from 'react-native-video'; const VideoPlayerV6 = () =&gt; { const videoRef = useRef(null); return ( &lt;Video source={{ uri: 'https://www.w3schools.com/html/mov_bbb.mp4' }} ref={videoRef} style={{ width: 300, height: 200 }} controls={true} onLoad={() =&gt; console.log('Video loaded')} onProgress={(data) =&gt; console.log('Progress:', data.currentTime)} /&gt; ); };   v7 Implementation:  import React from 'react'; import { useVideoPlayer, VideoView, useEvent } from 'react-native-video'; const VideoPlayerV7 = () =&gt; { const player = useVideoPlayer({ source: { uri: 'https://www.w3schools.com/html/mov_bbb.mp4', }, }); useEvent(player, 'onLoad', () =&gt; { console.log('Video loaded'); }); useEvent(player, 'onProgress', (data) =&gt; { console.log('Progress:', data.currentTime); }); return ( &lt;VideoView player={player} style={{ width: 300, height: 200 }} controls={true} /&gt; ); };   ","version":"v7 Alpha","tagName":"h3"},{"title":"Prop and Method Migration​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#prop-and-method-migration","content":" Many props and methods from the v6 &lt;Video&gt; component have been moved to the VideoPlayer instance in v7.  Common Props​  v6 Prop (&lt;Video&gt;)\tv7 Equivalent (VideoPlayer properties)\tNotessource\tsource property in useVideoPlayer config\tThe structure of the source object remains largely the same. paused\tpaused property on the VideoPlayer instance\tCan be controlled via player.pause() and player.play(). muted\tmuted property on the VideoPlayer instance\tplayer.muted = true/false; volume\tvolume property on the VideoPlayer instance\tplayer.volume = 0.5; rate\trate property on the VideoPlayer instance\tplayer.rate = 1.5; loop\tloop property on the VideoPlayer instance\tplayer.loop = true; resizeMode\tresizeMode prop on &lt;VideoView&gt;\tThis remains a prop on the UI component. controls\tcontrols prop on &lt;VideoView&gt;\tThis also remains on the UI component.  see VideoPlayer for more details.  Methods​  Imperative methods previously called on the &lt;Video&gt; component's ref are now methods on the VideoPlayer instance.  v6 Method (videoRef.current)\tv7 Equivalent (player)seek(time)\tplayer.seekTo(time) presentFullscreenPlayer()\tvideoViewRef.current.enterFullscreen() dismissFullscreenPlayer()\tvideoViewRef.current.exitFullscreen() pause()\tplayer.pause() resume()\tplayer.play()  see VideoPlayer for more details.  ","version":"v7 Alpha","tagName":"h3"},{"title":"Event Handling​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#event-handling","content":" In v7, event handling is standardized through the useEvent hook or by directly assigning callbacks to the VideoPlayer instance. The useEvent hook is recommended as it automatically handles listener cleanup.  v6 Event Handling:  &lt;Video onLoad={(data) =&gt; console.log(data)} onProgress={(data) =&gt; console.log(data.currentTime)} onError={(error) =&gt; console.error(error)} /&gt;   v7 Event Handling with useEvent:  import { useVideoPlayer, VideoView, useEvent } from 'react-native-video'; const MyPlayer = () =&gt; { const player = useVideoPlayer({ source: { uri: '...' } }); useEvent(player, 'onLoad', (data) =&gt; console.log(data)); useEvent(player, 'onProgress', (data) =&gt; console.log(data.currentTime)); useEvent(player, 'onError', (error) =&gt; console.error(error.code, error.message)); return &lt;VideoView player={player} /&gt;; }   Directly assigning callbacks in v7:  const player = useVideoPlayer('https://example.com/video.mp4', (_player) =&gt; { _player.onLoad = (data) =&gt; { console.log('Video loaded! Duration:', data.duration); }; _player.onError = (error) =&gt; { console.error('Player Error:', error.code, error.message); }; });   ","version":"v7 Alpha","tagName":"h3"},{"title":"Benefits of the New Architecture​","type":1,"pageTitle":"Updating","url":"/react-native-video/docs/v7/updating#benefits-of-the-new-architecture","content":" Preloading: You can create a VideoPlayer instance and begin loading a video before it's visible in the UI. When you're ready to display it, simply pass the player instance to a &lt;VideoView&gt;.Improved Performance: Separating the player logic from the UI rendering can lead to better performance and a more responsive application.Cleaner API: The hook-based API simplifies player management and reduces boilerplate code, especially for handling the player's lifecycle.Full New Architecture Support: Version 7 fully embraces React Native's New Architecture, ensuring better performance and consistency. ","version":"v7 Alpha","tagName":"h3"},{"title":"Player Lifecycle","type":0,"sectionRef":"#","url":"/react-native-video/docs/v7/player/player-lifecycle","content":"","keywords":"","version":"v7 Alpha"},{"title":"Creation and Initialization​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#creation-and-initialization","content":" Instantiation: A VideoPlayer instance is created by calling its constructor with a video source (URL, VideoSource, or VideoConfig). const player = new VideoPlayer('https://example.com/video.mp4'); Native Player Creation: Internally this creates a native player instance tailored to the platform (iOS/Android).  info Player does not initialize asset right after JS class creation. Asset will be initialized when you call preload() or access any property/method of the player.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Playing a Video​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#playing-a-video","content":" Loading: When play() is called for the first time, or after replaceSourceAsync(), the player starts loading the video metadata and buffering content. onLoadStart: Fired when the video starts loading.onLoad: Fired when the video metadata is loaded and the player is ready to play (duration, dimensions, etc., are available).onBuffer: Fired when buffering starts or ends. Playback: Once enough data is buffered, playback begins. onPlaybackStateChange: Fired when the playback state changes (e.g., from buffering to playing).onProgress: Fired periodically with the current playback time.onReadyToDisplay: Fired when the first frame is ready to be displayed.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Controlling Playback​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#controlling-playback","content":" pause(): Pauses playback. status changes to paused.seekTo(time), seekBy(time): Changes the current playback position. onSeek is fired when the seek operation completes.set volume(value), set muted(value), set loop(value), set rate(value): Modify player properties. Corresponding events like onVolumeChange or onPlaybackRateChange might be fired.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Changing Source​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#changing-source","content":" replaceSourceAsync(newSource): This method allows you to change the video source dynamically. The current native player resources associated with the old source are released (similar to release() but specifically for the source).A new native player instance (or reconfigured existing one) is prepared for the newSource.The loading lifecycle events (onLoadStart, onLoad, etc.) will fire for the new source. replaceSourceAsync(null): This effectively unloads the current video and releases its associated resources without loading a new one. This is useful for freeing up memory if the player is temporarily not needed but might be used again later.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Releasing Resources​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#releasing-resources","content":" There are two main ways to release resources:  replaceSourceAsync(null): This is a less destructive way to free resources related only to the current video source. The VideoPlayer instance itself remains usable.You can later call replaceSourceAsync(newSource) to load and play a new video. release(): This is a destructive operation.  danger After calling release(), the player instance becomes unusable. Any subsequent calls to its methods or property access will result in errors.  tip It is recommended to use replaceSourceAsync(null) when you want to free resources related to the current video source. You should call release() only when you are 100% sure that you don't need the player instance anymore. Anyway garbage collector will release the player instance when it is no longer needed.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Error Handling​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#error-handling","content":" The onError callback, if provided, will be called when a VideoRuntimeError occurs. This allows you to handle issues like network errors, invalid source, or platform-specific playback problems.If onError is not provided, errors might be thrown as exceptions.  ","version":"v7 Alpha","tagName":"h2"},{"title":"Using with Hooks (useVideoPlayer)​","type":1,"pageTitle":"Player Lifecycle","url":"/react-native-video/docs/v7/player/player-lifecycle#using-with-hooks-usevideoplayer","content":" The useVideoPlayer hook simplifies managing the VideoPlayer lifecycle within React components.  import { useVideoPlayer } from 'react-native-video'; const MyComponent = () =&gt; { const player = useVideoPlayer('https://example.com/video.mp4', (playerInstance) =&gt; { // Optional setup function: configure the player instance after creation playerInstance.loop = true; }); // ... use player ... return &lt;VideoView player={player} /&gt;; };   Automatic Creation: useVideoPlayer creates a VideoPlayer instance when the component mounts or when the source dependency changes.Automatic Cleanup: It automatically cleanup resources when the component unmounts or before recreating the player due to a source change. This prevents resource leaks.Dependency Management: If the source prop passed to useVideoPlayer changes, the hook will clean up the old player instance and create a new one with the new source.  tip Using useVideoPlayer is the recommended way to manage VideoPlayer instances in functional components to ensure proper lifecycle management and resource cleanup. ","version":"v7 Alpha","tagName":"h2"}],"options":{"id":"default"}}