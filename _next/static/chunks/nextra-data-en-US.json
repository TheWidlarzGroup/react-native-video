{"/component/ads":{"title":"Ads","data":{"ima-sdk#IMA SDK":"react-native-video includes built-in support for Google IMA SDK on Android and iOS. To enable it, refer to the installation section.","usage#Usage":"To use AVOD (Ad-Supported Video on Demand), pass the adTagUrl prop to the Video component. The adTagUrl should be a VAST-compliant URI.","example#Example:":"adTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\nNote: Video ads cannot start when Picture-in-Picture (PiP) mode is active on iOS. More details are available in the Google IMA SDK Docs. If you are using custom controls, hide the PiP button when receiving the STARTED event from onReceiveAdEvent and show it again when receiving the ALL_ADS_COMPLETED event.","events#Events":"To receive events from the IMA SDK, pass the onReceiveAdEvent prop to the Video component. The full list of supported events is available here.","example-1#Example:":"...\nonReceiveAdEvent={event => console.log(event)}\n...","localization#Localization":"To change the language of the IMA SDK, pass the adLanguage prop to the Video component. The list of supported languages is available here.\nBy default, iOS uses the system language, and Android defaults to en (English).","example-2#Example:":"...\nadLanguage=\"fr\"\n..."}},"/component/drm":{"title":"DRM","data":{"drm-example#DRM Example":"We provide a sample implementation in the example app demonstrating how to use DRM with react-native-video. You’ll need a valid token—visit our site to obtain a free 24-hour token.","drm-offline#DRM Offline":"If you need DRM-protected content available offline, our Offline Video SDK enables downloading, storing, and managing streams with and without DRM. It also handles many edge cases you may encounter over time.","prerequisites#Prerequisites:":"Use react-native-video v6 or v7. If you're still on v5 or lower, contact us for assistance.\nSupporting our software kits helps maintain this open-source project. Thank you!","providing-drm-data-tested-with-httphttps-assets#Providing DRM Data (Tested with HTTP/HTTPS Assets)":"You can configure DRM playback by providing a DRM object with the following properties. This feature disables the use of TextureView on Android.","drm-properties#DRM Properties":"","base64certificate#base64Certificate":"Type: boolean\nDefault: falseIndicates whether the certificate URL returns data in Base64 format.","certificateurl#certificateUrl":"Type: string\nDefault: undefinedThe URL used to fetch a valid certificate for FairPlay.","getlicense#getLicense":"Type: function\nDefault: undefinedInstead of setting licenseServer, you can manually acquire the license in JavaScript and send the result to the native module for FairPlay DRM configuration.The following parameters are available in getLicense:\ncontentId: The content ID from the DRM object or loadingRequest.request.url?.host\nloadedLicenseUrl: The URL retrieved from loadingRequest.request.URL.absoluteString, starting with skd:// or clearkey://\nlicenseServer: The URL passed in the DRM object\nspcString: The SPC used for DRM validation\nYou should return a Base64-encoded CKC response, either directly or as a Promise.","example#Example:":"getLicense: (spcString, contentId, licenseUrl, loadedLicenseUrl) => {\n  const base64spc = Base64.encode(spcString);\n  const formData = new FormData();\n  formData.append('spc', base64spc);\n  return fetch(`https://license.pallycon.com/ri/licenseManager.do`, {\n    method: 'POST',\n    headers: {\n      'pallycon-customdata-v2': 'your-custom-header',\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: formData,\n  })\n    .then((response) => response.text())\n    .then((response) => response)\n    .catch((error) => console.error('Error', error));\n};","contentid#contentId":"Type: string\nDefault: undefinedSets the content ID for the stream. If not specified, the system uses the host value from loadingRequest.request.URL.host.","headers#headers":"Type: Object\nDefault: undefinedCustom headers for the license server request.","example-1#Example:":"drm: {\n  type: DRMType.WIDEVINE,\n  licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense',\n  headers: {\n    'X-AxDRM-Message': 'your-drm-header',\n  },\n}","licenseserver#licenseServer":"Type: string\nDefault: undefinedThe license server URL that authorizes protected content playback.","multidrm#multiDrm":"Type: boolean\nDefault: falseIndicates whether the DRM system should support key rotation. See Android Developer Docs for more details.","type#type":"Type: DRMType\nDefault: undefinedDefines the DRM type:\nAndroid: DRMType.WIDEVINE, DRMType.PLAYREADY, DRMType.CLEARKEY\niOS: DRMType.FAIRPLAY","localsourceencryptionkeyscheme#localSourceEncryptionKeyScheme":"Type: stringSets the URL scheme for stream encryption keys used in local assets.","example-2#Example:":"localSourceEncryptionKeyScheme=\"my-offline-key\"","common-usage-scenarios#Common Usage Scenarios":"","sending-cookies-to-the-license-server#Sending Cookies to the License Server":"You can send cookies using the headers prop.","example-3#Example:":"drm: {\n  type: DRMType.WIDEVINE,\n  licenseServer: 'https://drm-widevine-licensing.axtest.net/AcquireLicense',\n  headers: {\n    'Cookie': 'PHPSESSID=your-session-id; csrftoken=mytoken; _gat=1; foo=bar'\n  },\n}","custom-license-acquisition-ios-only#Custom License Acquisition (iOS Only)":"","example-4#Example:":"drm: {\n  type: DRMType.FAIRPLAY,\n  getLicense: (spcString) => {\n    const base64spc = Base64.encode(spcString);\n    return fetch('YOUR_LICENSE_SERVER_URL', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({\n        getFairplayLicense: {\n          foo: 'bar',\n          spcMessage: base64spc,\n        }\n      })\n    })\n      .then(response => response.json())\n      .then((response) => {\n        if (response?.getFairplayLicenseResponse?.ckcResponse) {\n          return response.getFairplayLicenseResponse.ckcResponse;\n        }\n        throw new Error('No valid response');\n      })\n      .catch((error) => console.error('CKC error', error));\n  }\n}"}},"/component/events":{"title":"Events","data":{"":"This page lists all available callbacks for handling player notifications.","details#Details":"","onaudiobecomingnoisy#onAudioBecomingNoisy":"Triggered when audio output changes (e.g., switching from headphones to speakers). It's recommended to pause the media when this event occurs.Payload: none","onaudiofocuschanged#onAudioFocusChanged":"Called when audio focus is gained or lost.Payload:\nProperty\tType\tDescription\thasAudioFocus\tboolean\ttrue if media has audio focus, false otherwise\t\nExample:\n{\n  hasAudioFocus: true\n}","onaudiotracks#onAudioTracks":"Triggered when available audio tracks change.Payload: Array of objects with track details\nProperty\tType\tDescription\tindex\tnumber\tInternal track ID\ttitle\tstring\tDescriptive track name\tlanguage\tstring\tISO 639-1 language code\tbitrate\tnumber\tTrack bitrate\ttype\tstring\tTrack MIME type\tselected\tboolean\ttrue if track is currently playing\t\nExample:\n{\n  audioTracks: [\n    { language: 'es', title: 'Spanish', type: 'audio/mpeg', index: 0, selected: true },\n    { language: 'en', title: 'English', type: 'audio/mpeg', index: 1 }\n  ]\n}","onbandwidthupdate#onBandwidthUpdate":"Called when available bandwidth changes.Payload:\nProperty\tType\tDescription\tbitrate\tnumber\tEstimated bitrate in bits/sec\twidth\tnumber\tVideo width (Android only)\theight\tnumber\tVideo height (Android only)\ttrackId\tstring\tVideo track ID (Android only)\t\nExample (iOS):\n{\n  bitrate: 1000000\n}\nExample (Android):\n{\n  bitrate: 1000000,\n  width: 1920,\n  height: 1080,\n  trackId: 'some-track-id'\n}\nNote: On Android, set the reportBandwidth prop to enable this event.","onbuffer#onBuffer":"Triggered when buffering starts or stops.Payload:\nProperty\tType\tDescription\tisBuffering\tboolean\ttrue if buffering is active\t\nExample:\n{\n  isBuffering: true\n}","oncontrolsvisibilitychange#onControlsVisibilityChange":"Triggered when the video player controls become visible or hidden.Payload:\nProperty\tType\tDescription\tisVisible\tboolean\ttrue if controls are visible\t\nExample:\n{\n  isVisible: true\n}","onend#onEnd":"Triggered when the media reaches the end.Payload: none","onerror#onError":"Called when a playback error occurs.Payload:\nProperty\tType\tDescription\terror\tobject\tError details","onexternalplaybackchange#onExternalPlaybackChange":"Called when external playback mode changes (e.g., Apple TV connection/disconnection).Payload:\nProperty\tType\tDescription\tisExternalPlaybackActive\tboolean\ttrue if external playback is active\t\nExample:\n{\n  isExternalPlaybackActive: true\n}","onfullscreenplayerwillpresent#onFullscreenPlayerWillPresent":"Called before entering fullscreen mode.Payload: none","onfullscreenplayerdidpresent#onFullscreenPlayerDidPresent":"Called when fullscreen mode is active.Payload: none","onfullscreenplayerwilldismiss#onFullscreenPlayerWillDismiss":"Called before exiting fullscreen mode.Payload: none","onfullscreenplayerdiddismiss#onFullscreenPlayerDidDismiss":"Called when fullscreen mode is exited.Payload: none","onload#onLoad":"Triggered when the media is loaded and ready to play.","payload#Payload:":"Property\tType\tDescription\tcurrentTime\tnumber\tTime in seconds where the media will start\tduration\tnumber\tLength of the media in seconds\tnaturalSize\tobject\tProperties:   width - Width in pixels that the video was encoded at   height - Height in pixels that the video was encoded at   orientation - \"portrait\", \"landscape\" or \"square\"\taudioTracks\tarray\tAn array of audio track info objects with the following properties:   index - Index number   title - Description of the track   language - 2 letter ISO 639-1 or 3 letter ISO639-2 language code   type - Mime type of track\ttextTracks\tarray\tAn array of text track info objects with the following properties:   index - Index number   title - Description of the track   language - 2 letter ISO 639-1 or 3 letter ISO 639-2 language code   type - Mime type of track\tvideoTracks\tarray\tAn array of video track info objects with the following properties:   trackId - ID for the track   bitrate - Bit rate in bits per second   codecs - Comma separated list of codecs   height - Height of the video   width - Width of the video\ttrackId\tstring\tProvide key information about the video track, typically including: Resolution, Bitrate.\t\nExample:\n{\n  canPlaySlowForward: true,\n  canPlayReverse: false,\n  canPlaySlowReverse: false,\n  canPlayFastForward: false,\n  canStepForward: false,\n  canStepBackward: false,\n  currentTime: 0,\n  duration: 5910.208984375,\n  naturalSize: {\n     height: 1080\n     orientation: 'landscape'\n     width: '1920'\n  },\n  audioTracks: [\n    { language: 'es', title: 'Spanish', type: 'audio/mpeg', index: 0 },\n    { language: 'en', title: 'English', type: 'audio/mpeg', index: 1 }\n  ],\n  textTracks: [\n    { title: '#1 French', language: 'fr', index: 0, type: 'text/vtt' },\n    { title: '#2 English CC', language: 'en', index: 1, type: 'text/vtt' },\n    { title: '#3 English Director Commentary', language: 'en', index: 2, type: 'text/vtt' }\n  ],\n  videoTracks: [\n    { index: 0, bitrate: 3987904, codecs: \"avc1.640028\", height: 720, trackId: \"f1-v1-x3\", width: 1280 },\n    { index: 1, bitrate: 7981888, codecs: \"avc1.640028\", height: 1080, trackId: \"f2-v1-x3\", width: 1920 },\n    { index: 2, bitrate: 1994979, codecs: \"avc1.4d401f\", height: 480, trackId: \"f3-v1-x3\", width: 848 }\n  ],\n  trackId: \"720p 2400kbps\",\n}\nNote: audioTracks, textTracks, and videoTracks are not available on the web.","onloadstart#onLoadStart":"Triggered when media starts loading.Payload:\nProperty\tType\tDescription\tisNetwork\tboolean\ttrue if media is loaded from a network\ttype\tstring\tMedia type (not available on Windows)\turi\tstring\tMedia source URI (not available on Windows)\t\nExample:\n{\n  isNetwork: true,\n  type: '',\n  uri: 'https://example.com/video.mp4'\n}","onplaybackstatechanged#onPlaybackStateChanged":"Triggered when playback state changes.Payload:\nProperty\tType\tDescription\tisPlaying\tboolean\ttrue if media is playing\tisSeeking\tboolean\ttrue if seeking is in progress\t\nExample:\n{\n  isPlaying: true,\n  isSeeking: false\n}","onpictureinpicturestatuschanged#onPictureInPictureStatusChanged":"Triggered when Picture-in-Picture (PiP) mode is activated or deactivated.Payload:\nProperty\tType\tDescription\tisActive\tboolean\ttrue if PiP mode is active\t\nExample:\n{\n  isActive: true\n}","onplaybackratechange#onPlaybackRateChange":"Triggered when playback speed changes.Payload:\nProperty\tType\tDescription\tplaybackRate\tnumber\t0 (paused), 1 (normal speed), other values indicate speed changes\t\nExample:\n{\n  playbackRate: 0  // indicates paused\n}","onprogress#onProgress":"Triggered every progressUpdateInterval milliseconds, providing information about the current playback position.Payload:\nProperty\tType\tDescription\tcurrentTime\tnumber\tCurrent playback position (seconds)\tplayableDuration\tnumber\tDuration that can be played using only the buffer (seconds)\tseekableDuration\tnumber\tDuration that can be seeked to (usually the total length of the media)\t\nExample:\n{\n  currentTime: 5.2,\n  playableDuration: 34.6,\n  seekableDuration: 888\n}","onreadyfordisplay#onReadyForDisplay":"Triggered when the first video frame is ready to be displayed. This is when the poster is removed.Payload: none\niOS: readyForDisplay\nAndroid: STATE_READY","onreceiveadevent#onReceiveAdEvent":"Triggered when an AdEvent is received from the IMA SDK.Enum AdEvent possible values for Android and iOS:\nAdEvent\nEvent\tPlatform\tDescription\tAD_BREAK_ENDED\tiOS\tFired the first time each ad break ends. Applications must reenable seeking when this occurs (only used for dynamic ad insertion).\tAD_BREAK_READY\tAndroid, iOS\tFires when an ad rule or a VMAP ad break would have played if autoPlayAdBreaks is false.\tAD_BREAK_STARTED\tiOS\tFired first time each ad break begins playback. If an ad break is watched subsequent times this will not be fired. Applications must disable seeking when this occurs (only used for dynamic ad insertion).\tAD_BUFFERING\tAndroid\tFires when the ad has stalled playback to buffer.\tAD_CAN_PLAY\tAndroid\tFires when the ad is ready to play without buffering, either at the beginning of the ad or after buffering completes.\tAD_METADATA\tAndroid\tFires when an ads list is loaded.\tAD_PERIOD_ENDED\tiOS\tFired every time the stream switches from advertising or slate to content. This will be fired even when an ad is played a second time or when seeking into an ad (only used for dynamic ad insertion).\tAD_PERIOD_STARTED\tiOS\tFired every time the stream switches from content to advertising or slate. This will be fired even when an ad is played a second time or when seeking into an ad (only used for dynamic ad insertion).\tAD_PROGRESS\tAndroid\tFires when the ad's current time value changes. The event data will be populated with an AdProgressData object.\tALL_ADS_COMPLETED\tAndroid, iOS\tFires when the ads manager is done playing all the valid ads in the ads response, or when the response doesn't return any valid ads.\tCLICK\tAndroid, iOS\tFires when the ad is clicked.\tCOMPLETED\tAndroid, iOS\tFires when the ad completes playing.\tCONTENT_PAUSE_REQUESTED\tAndroid\tFires when content should be paused. This usually happens right before an ad is about to cover the content.\tCONTENT_RESUME_REQUESTED\tAndroid\tFires when content should be resumed. This usually happens when an ad finishes or collapses.\tCUEPOINTS_CHANGED\tiOS\tCuepoints changed for VOD stream (only used for dynamic ad insertion).\tDURATION_CHANGE\tAndroid\tFires when the ad's duration changes.\tERROR\tAndroid, iOS\tFires when an error occurred while loading the ad and prevent it from playing.\tFIRST_QUARTILE\tAndroid, iOS\tFires when the ad playhead crosses first quartile.\tIMPRESSION\tAndroid\tFires when the impression URL has been pinged.\tINTERACTION\tAndroid\tFires when an ad triggers the interaction callback. Ad interactions contain an interaction ID string in the ad data.\tLINEAR_CHANGED\tAndroid\tFires when the displayed ad changes from linear to nonlinear, or the reverse.\tLOADED\tAndroid, iOS\tFires when ad data is available.\tLOG\tAndroid, iOS\tFires when a non-fatal error is encountered. The user need not take any action since the SDK will continue with the same or next ad playback depending on the error situation.\tMIDPOINT\tAndroid, iOS\tFires when the ad playhead crosses midpoint.\tPAUSED\tAndroid, iOS\tFires when the ad is paused.\tRESUMED\tAndroid, iOS\tFires when the ad is resumed.\tSKIPPABLE_STATE_CHANGED\tAndroid\tFires when the displayed ads skippable state is changed.\tSKIPPED\tAndroid, iOS\tFires when the ad is skipped by the user.\tSTARTED\tAndroid, iOS\tFires when the ad starts playing.\tSTREAM_LOADED\tiOS\tStream request has loaded (only used for dynamic ad insertion).\tTAPPED\tiOS\tFires when the ad is tapped.\tTHIRD_QUARTILE\tAndroid, iOS\tFires when the ad playhead crosses third quartile.\tUNKNOWN\tiOS\tAn unknown event has fired\tUSER_CLOSE\tAndroid\tFires when the ad is closed by the user.\tVIDEO_CLICKED\tAndroid\tFires when the non-clickthrough portion of a video ad is clicked.\tVIDEO_ICON_CLICKED\tAndroid\tFires when a user clicks a video icon.\tVOLUME_CHANGED\tAndroid\tFires when the ad volume has changed.\tVOLUME_MUTED\tAndroid\tFires when the ad volume has been muted.\t\nPayload:\nProperty\tType\tDescription\tevent\tAdEvent\tThe ad event received\tdata\tRecord<string, string> | undefined\tAdditional ad event data\t\nExample:\n{\n  \"data\": {\n    \"key\": \"value\"\n  },\n  \"event\": \"LOG\"\n}","onrestoreuserinterfaceforpictureinpicturestop#onRestoreUserInterfaceForPictureInPictureStop":"Corresponds to Apple's .\nCall  inside this function when the UI is restored.Payload: none","onseek#onSeek":"Triggered when a seek operation completes.Payload:\nProperty\tType\tDescription\tcurrentTime\tnumber\tCurrent time after seeking\tseekTime\tnumber\tRequested seek time\t\nExample:\n{\n  currentTime: 100.5,\n  seekTime: 100\n}\nNote: On iOS, this callback is not reported when native controls are enabled.","ontimedmetadata#onTimedMetadata":"Triggered when timed metadata is available.Payload:\nProperty\tType\tDescription\tmetadata\tarray\tArray of metadata objects\t\nExample:\n{\n  metadata: [\n    { value: 'Streaming Encoder', identifier: 'TRSN' },\n    { value: 'Internet Stream', identifier: 'TRSO' },\n    { value: 'Any Time You Like', identifier: 'TIT2' }\n  ]\n}","ontexttrackdatachanged#onTextTrackDataChanged":"Triggered when new subtitle data becomes available.Payload:\nProperty\tType\tDescription\tsubtitleTracks\tstring\tThe subtitle text content in a compatible format\t\nExample:\n{\n  subtitleTracks: \"This blade has a dark past.\"\n}","ontexttracks#onTextTracks":"Triggered when available text (subtitle) tracks change.Payload:\nProperty\tType\tDescription\tindex\tnumber\tInternal track ID\ttitle\tstring\tTrack name\tlanguage\tstring\t2 letter ISO 639-1 language code\ttype\tstring\tTrack MIME type (VTT, SRT, TTML)\tselected\tboolean\ttrue if the track is currently playing\t\nExample:\n{\n  textTracks: [\n    {\n      index: 0,\n      title: 'English Subtitles',\n      type: 'vtt',\n      selected: true\n    }\n  ]\n}","onvideotracks#onVideoTracks":"Triggered when video tracks change.Payload:\nProperty\tType\tDescription\tindex\tnumber\tTrack index\ttrackId\tstring\tInternal track ID\tcodecs\tstring\tCodec type\twidth\tnumber\tVideo width\theight\tnumber\tVideo height\tbitrate\tnumber\tTrack bitrate (bps)\tselected\tboolean\ttrue if the track is playing\trotation\tnumber\tRotation angle (0, 90, 180, 270)\t\nExample:\n{\n  videoTracks: [\n    {\n      index: 0,\n      trackId: \"1\",\n      codecs: \"video/mp4\",\n      width: 1920,\n      height: 1080,\n      bitrate: 5000000,\n      selected: true,\n      rotation: 0\n    }\n  ]\n}","onvolumechange#onVolumeChange":"Triggered when the player volume changes.\nNote: This event applies to the player's volume, not the device's system volume.\nPayload:\nProperty\tType\tDescription\tvolume\tnumber\tVolume level (0 to 1)\t\nExample:\n{\n  volume: 0.5\n}"}},"/component/methods":{"title":"Methods","data":{"":"This page shows the list of available methods.","details#Details":"","dismissfullscreenplayer#dismissFullscreenPlayer":"dismissFullscreenPlayer(): Promise<void>\nExits fullscreen mode.\nDeprecated: Use setFullScreen(false) instead.","pause#pause":"pause(): Promise<void>\nPauses the video.","presentfullscreenplayer#presentFullscreenPlayer":"presentFullscreenPlayer(): Promise<void>\nEnters fullscreen mode.\nOn iOS, this opens a fullscreen view controller with controls.\nOn Android, this makes the player fullscreen but requires styling to match screen dimensions.\nDeprecated: Use setFullScreen(true) instead.","resume#resume":"resume(): Promise<void>\nResumes video playback.","restoreuserinterfaceforpictureinpicturestopcompleted#restoreUserInterfaceForPictureInPictureStopCompleted":"(restored)\nMust be called after onRestoreUserInterfaceForPictureInPictureStop.\nCorresponds to Apple's restoreUserInterfaceForPictureInPictureStop.","save#save":"save(): Promise<{ uri: string }>\nSaves the video to the user's Photos app with the current filter.","notes#Notes:":"Supports MP4 export only.\nExports to the cache directory with a generated UUID filename.\nRequires internet connection if the video is not already buffered.\nVideo remains in the Photos app until manually deleted.\nWorks with cached videos.","future-improvements#Future improvements:":"Support for multiple quality options.\nSupport for more formats.\nSupport for custom directory and filename.","enterpictureinpicture#enterPictureInPicture":"enterPictureInPicture()\nActivates Picture-in-Picture (PiP) mode.","android-setup#Android setup:":"For Expo, enable PiP in app.json:\n\"plugins\": [\n  [\n    \"react-native-video\",\n    {\n      \"enableAndroidPictureInPicture\": true\n    }\n  ]\n]\nFor Bare React Native, update AndroidManifest.xml:\n<activity\n  android:name=\".MainActivity\"\n  android:supportsPictureInPicture=\"true\">\n</activity>\nNote:\nOn Android, entering PiP moves the app to the background.\nOn iOS, video ads cannot start in PiP mode (Google IMA SDK).","exitpictureinpicture#exitPictureInPicture":"exitPictureInPicture()\nExits Picture-in-Picture (PiP) mode.","seek#seek":"seek(seconds: number)\nSeeks to the specified position (in seconds).","notes-1#Notes:":"Must be called after onLoad.\nTriggers the onSeek event.","ios-exact-seek#iOS Exact Seek:":"seek(seconds, tolerance: number)\nDefault tolerance: ±100ms.\nSet tolerance = 0 for precise seeking.","setvolume#setVolume":"setVolume(value: number): Promise<void>\nChanges the volume level. Same behavior as the volume prop.","getcurrentposition#getCurrentPosition":"getCurrentPosition(): Promise<number>\nReturns the current playback position in seconds.\nThrows an error if the player is not initialized.","setsource#setSource":"setSource(source: ReactVideoSource): Promise<void>\nUpdates the media source dynamically.\nNote: This overrides the source prop.","setfullscreen#setFullScreen":"setFullScreen(fullscreen: boolean): Promise<void>\nToggles fullscreen mode.\ntrue → Enters fullscreen.\nfalse → Exits fullscreen.","nativehtmlvideoref#nativeHtmlVideoRef":"A reference to the native HTML <video> element.\nUseful for integrating third-party video libraries like hls.js, shaka, video.js, etc..","example-usage#Example Usage":"const videoRef = useRef<VideoRef>(null);\nconst handleVideoControls = async () => {\n  if (!videoRef.current) return;\n  // Fullscreen controls\n  videoRef.current.presentFullscreenPlayer();\n  videoRef.current.dismissFullscreenPlayer();\n  // Playback controls\n  videoRef.current.pause();\n  videoRef.current.resume();\n  // Save video\n  const response = await videoRef.current.save();\n  console.log('Saved video path:', response.uri);\n  // Seek to 200s (or with tolerance on iOS)\n  videoRef.current.seek(200);\n  videoRef.current.seek(200, 10);\n};\nreturn (\n  <Video\n    ref={videoRef}\n    source={{ uri: 'https://www.w3schools.com/html/mov_bbb.mp4' }}\n  />\n);","static-methods#Static Methods":"","getwidevinelevel#getWidevineLevel":"getWidevineLevel(): Promise<number>\nReturns the Widevine DRM level:\n0 → Unknown / Not supported.\n1, 2, 3 → Supported Widevine levels.","iscodecsupported#isCodecSupported":"isCodecSupported(mimetype: string, width: number, height: number): Promise<'hardware' | 'software' | 'unsupported'>\nChecks if the given video codec is supported.\nResult\tMeaning\thardware\tHardware decoding supported\tsoftware\tOnly software decoding available\tunsupported\tCodec not supported","ishevcsupported#isHEVCSupported":"isHEVCSupported(): Promise<boolean>\nChecks if HEVC (H.265) is supported at 1920×1080 resolution.\nUses isCodecSupported internally.","static-methods-example-usage#Static Methods Example Usage":"import { VideoDecoderProperties } from 'react-native-video';\nVideoDecoderProperties.getWidevineLevel().then((level) => {\n  console.log('Widevine Level:', level);\n});\nVideoDecoderProperties.isCodecSupported('video/hevc', 1920, 1080).then((support) => {\n  console.log('HEVC Support:', support);\n});\nVideoDecoderProperties.isHEVCSupported().then((support) => {\n  console.log('HEVC 1080p Support:', support);\n});"}},"/":{"title":"A <Video> Component for React Native","data":{"about#About":"react-native-video is a React Native library that provides a Video component to render media content like videos and streams.It allows you to stream video files (m3u, mpd, mp4, etc.) inside your React Native application.\nExoPlayer for Android\nAVPlayer for iOS, tvOS, and visionOS\nWindows UWP for Windows\nHTML5 for Web\nTrick mode support\nSubtitles (embedded or side-loaded)\nDRM support\nClient-side ad insertion (via Google IMA)\nPiP (Picture-in-Picture)\nEmbedded playback controls\nAnd more\nThe goal of this package is to provide lightweight but full control over the player.","v600-information#V6.0.0 Information":"⚠️ Version 6: This documentation covers features available only in v6.0.0 and later.\nIf you're unsure or need an older version, you can still use version 5.2.x.\nVersion 6.x requires react-native >= 0.68.2\n⚠️ From 6.0.0-beta.8, it also requires iOS >= 13.0 (default in React Native 0.73).\nFor older versions of React Native, please use version 5.x.","usage#Usage":"// Load the module\nimport Video, { VideoRef } from 'react-native-video';\n// Inside your render function, assuming you have a file called\n// \"background.mp4\" in your project. You can include multiple videos\n// on a single screen if needed.\nconst VideoPlayer = () => {\n  const videoRef = useRef<VideoRef>(null);\n  const background = require('./background.mp4');\n  return (\n    <Video\n      // Can be a URL or a local file.\n      source={background}\n      // Store reference  \n      ref={videoRef}\n      // Callback when remote video is buffering                                      \n      onBuffer={onBuffer}\n      // Callback when the video cannot be loaded              \n      onError={onError}               \n      style={styles.backgroundVideo}\n    />\n  );\n};\n// Later in your styles...\nvar styles = StyleSheet.create({\n  backgroundVideo: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n});"}},"/installation":{"title":"Installation","data":{"":"Using npm:\nnpm install --save react-native-video\nor using yarn:\nyarn add react-native-video\nThen follow the instructions for your platform to link react-native-video into your project.","ios#iOS":"","standard-method#Standard Method":"Run pod install in the ios directory of your project.⚠️ From version 6.0.0, the minimum iOS version required is 13.0. For more information, see the updating section.","enable-custom-features-in-the-podfile#Enable Custom Features in the Podfile":"Sample configurations are available in the sample app. See the sample pod file.","video-caching#Video Caching":"To enable video caching, add the following line to your Podfile: (more info here)\n# Enable Video Caching\n$RNVideoUseVideoCaching=true","google-ima#Google IMA":"Google IMA is the SDK for client-side ads integration. See the Google documentation for more details.To enable Google IMA, add the following line to your Podfile:\n$RNVideoUseGoogleIMA=true\nIf you are using Expo, you can use the Expo plugin.","android#Android":"From version >= 6.0.0, your application must use Kotlin version >= 1.8.0.\nbuildscript {\n    ...\n    ext.kotlinVersion = '1.8.0'\n    ext.compileSdkVersion = 34\n    ext.targetSdkVersion = 34\n    ...\n}","enable-custom-features-in-the-gradle-file#Enable Custom Features in the Gradle File":"If you are using Expo, you can use the Expo plugin.You can enable or disable the following features by setting the corresponding variables in your android/build.gradle file:\nuseExoplayerIMA - Enable Google IMA SDK (ads support)\nuseExoplayerRtsp - Enable RTSP support\nuseExoplayerSmoothStreaming - Enable SmoothStreaming support\nuseExoplayerDash - Enable Dash support\nuseExoplayerHls - Enable HLS support\nEach enabled feature increases the APK size, so only enable what you need.By default, the enabled features are:\nuseExoplayerSmoothStreaming\nuseExoplayerDash\nuseExoplayerHls\nExample:\nbuildscript {\n  ext {\n    ...\n    useExoplayerIMA = true\n    useExoplayerRtsp = true\n    useExoplayerSmoothStreaming = true\n    useExoplayerDash = true\n    useExoplayerHls = true\n    ...\n  }\n}\nSee the sample app.","windows#Windows":"","autolinking#Autolinking":"React Native Windows 0.63 and aboveAutolinking should automatically add react-native-video to your app.","manual-linking#Manual Linking":"React Native Windows 0.62Make the following manual additions:","windowsmyappsln#windows\\myapp.sln":"Add the ReactNativeVideoCPP project to your solution:\nOpen your solution in Visual Studio 2019.\nRight-click the Solution icon in Solution Explorer > Add > Existing Project...\nSelect node_modules\\react-native-video\\windows\\ReactNativeVideoCPP\\ReactNativeVideoCPP.vcxproj.","windowsmyappmyappvcxproj#windows\\myapp\\myapp.vcxproj":"Add a reference to ReactNativeVideoCPP to your main application project:\nOpen your solution in Visual Studio 2019.\nRight-click the main application project > Add > Reference...\nCheck ReactNativeVideoCPP from Solution Projects.","pchh#pch.h":"Add:\n#include \"winrt/ReactNativeVideoCPP.h\"","appcpp#app.cpp":"Add:\nPackageProviders().Append(winrt::ReactNativeVideoCPP::ReactPackageProvider());\nbefore InitializeComponent();.React Native Windows 0.61 and belowFollow the manual linking steps for React Native Windows 0.62, but use ReactNativeVideoCPP61 instead of ReactNativeVideoCPP.","tvos#tvOS":"react-native link react-native-video does not work properly with the tvOS target, so the library must be added manually.","steps#Steps:":"Select your project in Xcode.\nSelect the tvOS target of your application and open the \"General\" tab.\nScroll to \"Linked Frameworks and Libraries\" and click the + button.\nSelect RCTVideo-tvOS.","visionos#visionOS":"Run pod install in the visionos directory of your project.","web#Web":"No additional setup is required. Everything should work out of the box.However, only basic video support is available. HLS, Dash, ads, and DRM are not currently supported."}},"/other/caching":{"title":"Caching","data":{"":"Caching is supported on iOS platforms with a CocoaPods setup and on Android using SimpleCache.","android#Android":"Android uses an LRU SimpleCache with a variable cache size, which can be specified by bufferConfig - cacheSizeMB. This creates a folder named RNVCache inside the app's cache directory.Note that react-native-video does not currently offer a native method to flush the cache, but it can be cleared by manually clearing the app's cache.Additionally, this resolves the issue in RNV6 where the source URI was repeatedly called when looping a video on Android.","ios#iOS":"","technology#Technology":"The cache is backed by SPTPersistentCache and DVAssetLoaderDelegate.","how-it-works#How It Works":"Caching is based on the asset's URL. SPTPersistentCache uses an LRU (Least Recently Used) caching policy.","restrictions#Restrictions":"Currently, caching is only supported for URLs ending in .mp4, .m4v, or .mov. In future versions, URLs with query strings (e.g., test.mp4?resolution=480p) will be supported once dependencies allow access to the Content-Type header.At this time, HLS playlists (.m3u8) and videos with sideloaded text tracks are not supported and will bypass the cache.You will see warnings in the Xcode logs when using debug mode. If you're unsure whether your video is cached, check your Xcode logs.By default, files expire after 30 days, and the maximum cache size is 100MB.Future updates may include more configurable caching options."}},"/other/debug":{"title":"Debugging","data":{"":"This page provides useful tips for debugging and troubleshooting issues in the package or your application.","using-the-sample-app#Using the Sample App":"This repository contains multiple sample implementations in the example folder. It is always preferable to test behavior in a sample app rather than in a full application. The basic sample allows testing of many features.To use the sample app, follow these steps:\nClone this repository:\ngit clone git@github.com:TheWidlarzGroup/react-native-video.git\nNavigate to the root folder and build the package. This generates a transpiled version in the lib folder:\ncd react-native-video && yarn && yarn build\nNavigate to the sample app and install dependencies:\ncd example/basic && yarn install\nBuild and run the app:\nFor Android:\nyarn android\nFor iOS:\ncd ios && pod install && cd .. && yarn ios","http-playback-doesnt-work-or-black-screen-on-release-build-android#HTTP Playback Doesn't Work or Black Screen on Release Build (Android)":"If your video works in Debug mode but shows only a black screen in Release mode, check the URL of your video. If you are using the http protocol, you need to add the following line to your AndroidManifest.xml file. More details here:\n<application\n ...\n android:usesCleartextTraffic=\"true\"\n>","decoder-issue-android#Decoder Issue (Android)":"Some devices have a maximum number of simultaneous video playbacks. If this limit is reached, ExoPlayer returns an error: Unable to instantiate decoder.Known issue: This happens frequently in Debug mode.","unable-to-play-clear-content-all-os#Unable to Play Clear Content (All OS)":"Before opening a ticket, follow these steps:","check-remote-file-access#Check Remote File Access":"Ensure you can download the manifest/content file using a browser.","check-if-another-player-can-play-the-content#Check If Another Player Can Play the Content":"Clear playback should work with any video player. Test the content with another player, such as VLC, to confirm it plays without issues.","unable-to-play-protected-content-all-os#Unable to Play Protected Content (All OS)":"","protected-content-gives-an-error-token-error--access-forbidden#Protected Content Gives an Error (Token Error / Access Forbidden)":"If the content requires an access token or HTTP headers, ensure you can access the data using wget or a REST client. Provide all necessary authentication parameters.","debugging-network-calls-not-visible-in-react-native-debugging-tools#Debugging Network Calls Not Visible in React Native Debugging Tools":"This is a React Native limitation—React Native debugging tools only capture network calls made in JavaScript.To debug network calls, use tools like:\nCharles Proxy\nFiddler\nThese tools allow you to sniff all HTTP/HTTPS calls, including access to content, DRM, and audio/video chunks. Compare the request/response patterns with previous tests to diagnose issues.","debugging-media3-build-from-media3-source#Debugging Media3: Build from Media3 Source":"If you need to use a specific ExoPlayer version or modify default behavior, you may need to build from the Media3 source code.","configure-player-path#Configure Player Path":"Add the following lines to settings.gradle to configure your Media3 source path:\ngradle.ext.androidxMediaModulePrefix = 'media-'\napply from: file(\"../../../../media3/core_settings.gradle\")\nReplace this with the actual Media3 source path. Ensure that you use the same version (or a compatible API version) supported by the package.","enable-building-from-source#Enable Building from Source":"In your build.gradle file, add the following setting:\nbuildscript {\n    ext {\n        ...\n        buildFromMedia3Source = true\n        ...\n    }\n}","still-not-working#Still Not Working?":"You can open a ticket or contact us for premium support."}},"/other/downloading":{"title":"Offline Video SDK","data":{"what-is-the-offline-video-sdk#What is the Offline Video SDK?":"The Offline Video SDK extends react-native-video (v6 or v7) with the ability to download and store video content for offline playback. It also supports DRM-protected content. The SDK manages background tasks—such as queuing, pausing, resuming, and tracking progress or errors—without requiring major changes to your existing setup.","key-features#Key Features":"Stream Downloading\nThe SDK allows you to download streams and store them for offline playback. It also includes an asset manager to manage downloaded files on the device.\nOffline DRM\nSecurely plays DRM-protected content offline while ensuring content protection and rights management.","additional-capabilities#Additional Capabilities":"Multiple Audio Tracks & Subtitles\nSupports downloading various audio and subtitle tracks, including optional subtitle exclusion or inclusion.\nSelective Downloads\nOnly the selected tracks (resolution, language, etc.) is downloaded by default to optimize storage usage.\nDRM License Optimization\nIf your DRM provider issues persistent tokens, they can be stored and updated only upon expiration, reducing licensing costs.\nPluggable Architecture\nDesigned for offline capabilities without restricting additional video player features. Future react-native-video (v7+) updates will further simplify plugin integrations.","implementation--support#Implementation & Support":"Integration Options\nYou can integrate the SDK yourself or get assistance from our team. We also offer commercial collaboration for stalled projects. Contact us for support.\nBasic Requirements\nreact-native-video version 6 or 7.\nActual stream downloads are required for offline playback. A content ID or persistent key alone is not sufficient.","licensing--inquiries#Licensing & Inquiries":"For licensing, trials, or further assistance, contact us. We’d be happy to discuss your needs and answer any questions."}},"/other/expo":{"title":"Expo","data":{"expo-plugin#Expo Plugin":"Starting from version 6.3.1, react-native-video supports an Expo plugin. You can configure react-native-video properties in the app.json, app.config.json, or app.config.js file.This is particularly useful when using the Expo managed workflow (expo prebuild), as it automatically sets up react-native-video properties in the native part of the Expo project.","example-configuration#Example Configuration":"// app.json\n{\n  \"name\": \"my app\",\n  \"plugins\": [\n    [\n      \"react-native-video\",\n      {\n        \"enableNotificationControls\": true,\n        \"androidExtensions\": {\n          \"useExoplayerRtsp\": false,\n          \"useExoplayerSmoothStreaming\": false,\n          \"useExoplayerHls\": false,\n          \"useExoplayerDash\": false\n        }\n      }\n    ]\n  ]\n}","expo-plugin-properties#Expo Plugin Properties":"Property\tType\tDefault\tDescription\tenableNotificationControls\tboolean\tfalse\tAdd required changes on android to use notification controls for video player\tenableBackgroundAudio\tboolean\tfalse\tAdd required changes to play video in background on iOS\tenableADSExtension\tboolean\tfalse\tAdd required changes to use ads extension for video player\tenableCacheExtension\tboolean\tfalse\tAdd required changes to use cache extension for video player on iOS\tandroidExtensions\tobject\t{}\tYou can enable/disable extensions as per your requirement - this allow to reduce library size on android\tenableAndroidPictureInPicture\tboolean\tfalse\tApply configs to be able to use Picture-in-picture on android"}},"/other/misc":{"title":"Miscellaneous","data":{"ios-app-transport-security#iOS App Transport Security":"By default, iOS only allows loading encrypted (https) URLs. If you need to load content from an unencrypted (http) source, you must modify your Info.plist file and add the following entry:For more details, check this article.","audio-mixing#Audio Mixing":"In future versions, react-native-video will include an Audio Manager for configuring how videos mix with other audio-playing apps.On iOS, if you want to allow background music from other apps to continue playing over your video component, update your AppDelegate.m file:","appdelegatem#AppDelegate.m":"#import <AVFoundation/AVFoundation.h>  // Import the AVFoundation framework\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  ...\n  [[AVAudioSession sharedInstance] setCategory:AVAudioSessionCategoryAmbient error:nil];  // Allow background audio\n  ...\n}\nYou can also use the ignoreSilentSwitch prop.","android-expansion-file-usage#Android Expansion File Usage":"Expansion files allow you to include assets exceeding the 100MB APK size limit without requiring an update every time you push a new version.\nOnly supports .mp4 files, and they must not be compressed.\nExample command to prevent compression:\nzip -r -n .mp4 *.mp4 player.video.example.com","example-usage-in-code#Example Usage in Code:":"// Assuming \"background.mp4\" is included in your expansion file.\n<Video \n  source={{uri: \"background\", mainVer: 1, patchVer: 0}} // Looks for \"background.mp4\" in the specified expansion version.\n  resizeMode=\"cover\"           // Fill the whole screen while maintaining aspect ratio.\n  style={styles.backgroundVideo} \n/>","load-files-with-the-react-native-asset-system#Load Files with the React Native Asset System":"The asset system introduced in RN 0.14 allows loading shared image resources across iOS and Android without modifying native code. As of RN 0.31, the same applies to .mp4 video assets on Android. From RN 0.33, iOS support was added. Requires react-native-video@0.9.0 or later.","example#Example:":"<Video\n  source={require('../assets/video/turntable.mp4')}\n/>","play-in-background-on-ios#Play in Background on iOS":"To allow audio playback in the background on iOS, set the audio session to AVAudioSessionCategoryPlayback. See the Apple documentation for more details.(Note: There is an open ticket to expose this as a prop.)"}},"/other/new-arch":{"title":"New Architecture","data":{"fabric#Fabric":"The library currently does not support Fabric. We are working on adding support. In the meantime, you can use the Interop Layer.","interop-layer#Interop Layer":"You can use this library with the New Architecture by enabling the Interop Layer.","requirements#Requirements:":"react-native >= 0.72.0\nreact-native-video >= 6.0.0-beta.5\nFor react-native versions < 0.74, you need to add the following configuration in the react-native.config.js file:\nmodule.exports = {\n  project: {\n    android: {\n      unstable_reactLegacyComponentNames: ['Video'],\n    },\n    ios: {\n      unstable_reactLegacyComponentNames: ['Video'],\n    },\n  },\n};","bridgeless-mode#Bridgeless Mode":"The library currently does not support Bridgeless Mode. We are working on adding support."}},"/other/plugin":{"title":"Plugin","data":{"":"Since version 6.4.0, it is possible to create plugins for analytics management and potentially more.\nA sample plugin is available in the repository: example/react-native-video-plugin-sample.","commercial-plugins#Commercial Plugins":"We at The Widlarz Group have created a set of plugins for comprehensive offline video support. If you are interested, check out our Offline Video SDK. If you need additional plugins (analytics, processing, etc.), let us know.\nUsing or recommending our commercial software helps support the maintenance of this open-source project. Thank you!","plugins-for-analytics#Plugins for Analytics":"Most analytics systems that track player data (e.g., bitrate, errors) can be integrated directly with ExoPlayer or AVPlayer.\nThis plugin system allows for non-intrusive analytics integration with react-native-video. It should be implemented in native languages (Kotlin/Swift) to ensure efficiency.The goal is to enable easy analytics integration without modifying react-native-video itself.","warnings--considerations#Warnings & Considerations":"This is an experimental API and may change over time. The API is simple yet flexible enough to implement analytics systems.\nIf additional metadata is needed, you should implement a setter in your custom package.Since the API is flexible, misuse is possible. The player handle should be treated as read-only. Modifying player behavior may cause unexpected issues in react-native-video.","general-setup#General Setup":"First, create a new React Native package:\nnpx create-react-native-library@latest react-native-video-custom-analytics\nBoth Android and iOS implementations expose an RNVPlugin interface.\nYour react-native-video-custom-analytics package should implement this interface and register itself as a plugin for react-native-video.","plugin-types#Plugin Types":"There are two types of plugins you can implement:\nBase Plugin (RNVPlugin): For general-purpose plugins that don't need specific player implementation details.\nPlayer-Specific Plugins:\nRNVAVPlayerPlugin for iOS: Provides type-safe access to AVPlayer instances\nRNVExoplayerPlugin for Android: Provides type-safe access to ExoPlayer instances\nChoose the appropriate plugin type based on your needs. If you need direct access to player-specific APIs, use the player-specific plugin classes.","android-implementation#Android Implementation":"","1-create-the-plugin#1. Create the Plugin":"You can implement either the base RNVPlugin interface or the player-specific RNVExoplayerPlugin interface.","base-plugin#Base Plugin":"class MyAnalyticsPlugin : RNVPlugin {\n    override fun onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n    override fun onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}","exoplayer-specific-plugin#ExoPlayer-Specific Plugin":"class MyExoPlayerAnalyticsPlugin : RNVExoplayerPlugin {\n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer creation with type-safe access\n    }\n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer removal with type-safe access\n    }\n}\nThe RNVPlugin interface defines two functions:\n/**\n * Function called when a new player is created\n * @param id: a random string identifying the player\n * @param player: the instantiated player reference\n */\nfun onInstanceCreated(id: String, player: Any)\n/**\n * Function called when a player should be destroyed\n * when this callback is called, the plugin shall free all\n * resources and release all reference to Player object\n * @param id: a random string identifying the player\n * @param player: the player to release\n */\nfun onInstanceRemoved(id: String, player: Any)","2-register-the-plugin#2. Register the Plugin":"To register the plugin within the main react-native-video package, call:\nReactNativeVideoManager.getInstance().registerPlugin(plugin)\nIn the sample implementation, the plugin is registered in the createNativeModules entry point.Once registered, your module can track player updates and report analytics data.","ios-implementation#iOS Implementation":"","1-podspec-integration#1. Podspec Integration":"Your new module must have access to react-native-video. Add it as a dependency in your Podspec file:\ns.dependency \"react-native-video\"","2-create-the-plugin#2. Create the Plugin":"You can implement either the base RNVPlugin class or the player-specific RNVAVPlayerPlugin class.","base-plugin-1#Base Plugin":"class MyAnalyticsPlugin: RNVPlugin {\n    override func onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n    override func onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}","avplayer-specific-plugin#AVPlayer-Specific Plugin":"class MyAVPlayerAnalyticsPlugin: RNVAVPlayerPlugin {\n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle AVPlayer creation with type-safe access\n    }\n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle AVPlayer removal with type-safe access\n    }\n}\nThe RNVPlugin class defines two methods:\n/**\n * Function called when a new player is created\n * @param id: a random string identifying the player\n * @param player: the instantiated player reference\n */\nopen func onInstanceCreated(id: String, player: Any) { /* no-op */ }\n/**\n * Function called when a player should be destroyed\n * when this callback is called, the plugin shall free all\n * resources and release all reference to Player object\n * @param id: a random string identifying the player\n * @param player: the player to release\n */\nopen func onInstanceRemoved(id: String, player: Any) { /* no-op */ }","3-register-the-plugin#3. Register the Plugin":"To register the plugin in react-native-video, call:\nReactNativeVideoManager.shared.registerPlugin(plugin: plugin)\nIn the sample implementation, the plugin is registered inside the VideoPluginSample file within the init function:\nimport react_native_video\n...\noverride init() {\n    super.init()\n    ReactNativeVideoManager.shared.registerPlugin(plugin: self)\n}\nOnce registered, your module can track player updates and report analytics data to your backend.","custom-drm-manager#Custom DRM Manager":"You can provide a custom DRM manager through your plugin to handle DRM in a custom way. This is useful when you need to integrate with a specific DRM provider or implement custom DRM logic.","android-implementation-1#Android Implementation":"","1-create-custom-drm-manager#1/ Create custom DRM manager":"Create a class that implements the DRMManagerSpec interface:\nclass CustomDRMManager : DRMManagerSpec {\n    @Throws(UnsupportedDrmException::class)\n    override fun buildDrmSessionManager(uuid: UUID, drmProps: DRMProps): DrmSessionManager? {\n        // Your custom implementation for building DRM session manager\n        // Return null if the DRM scheme is not supported\n        // Throw UnsupportedDrmException if the DRM scheme is invalid\n    }\n}","2-register-drm-manager-in-your-plugin#2/ Register DRM manager in your plugin":"Implement getDRMManager() in your ExoPlayer plugin to provide the custom DRM manager:\nclass CustomVideoPlugin : RNVExoplayerPlugin {\n    private val drmManager = CustomDRMManager()\n    \n    override fun getDRMManager(): DRMManagerSpec? {\n        return drmManager\n    }\n    \n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle player creation\n    }\n    \n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle player removal\n    }\n}","ios-implementation-1#iOS Implementation":"","1-create-custom-drm-manager-1#1/ Create custom DRM manager":"Create a class that implements the DRMManagerSpec protocol:\nclass CustomDRMManager: NSObject, DRMManagerSpec {\n    func createContentKeyRequest(\n        asset: AVContentKeyRecipient,\n        drmProps: DRMParams?,\n        reactTag: NSNumber?,\n        onVideoError: RCTDirectEventBlock?,\n        onGetLicense: RCTDirectEventBlock?\n    ) {\n        // Initialize content key session and handle key request\n    }\n    \n    func handleContentKeyRequest(keyRequest: AVContentKeyRequest) {\n        // Process the content key request\n    }\n    \n    func finishProcessingContentKeyRequest(keyRequest: AVContentKeyRequest, license: Data) throws {\n        // Finish processing the key request with the obtained license\n    }\n    \n    func handleError(_ error: Error, for keyRequest: AVContentKeyRequest) {\n        // Handle any errors during the DRM process\n    }\n    \n    func setJSLicenseResult(license: String, licenseUrl: String) {\n        // Handle successful license acquisition from JS side\n    }\n    \n    func setJSLicenseError(error: String, licenseUrl: String) {\n        // Handle license acquisition errors from JS side\n    }\n}","2-register-drm-manager-in-your-plugin-1#2/ Register DRM manager in your plugin":"Implement getDRMManager() in your AVPlayer plugin to provide the custom DRM manager:\nclass CustomVideoPlugin: RNVAVPlayerPlugin {\n    override func getDRMManager() -> DRMManagerSpec? {\n        return CustomDRMManager()\n    }\n    \n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle player creation\n    }\n    \n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle player removal\n    }\n}","important-notes-about-drm-managers#Important notes about DRM managers:":"Only one plugin can provide a DRM manager at a time. If multiple plugins try to provide DRM managers, only the first one will be used.\nThe custom DRM manager will be used for all video instances in the app.\nIf no custom DRM manager is provided:\nOn iOS, the default FairPlay-based implementation will be used\nOn Android, the default ExoPlayer DRM implementation will be used\nThe DRM manager must handle all DRM-related functionality:\nOn iOS: key requests, license acquisition, and error handling through AVContentKeySession\nOn Android: DRM session management and license acquisition through ExoPlayer's DrmSessionManager"}},"/projects":{"title":"Useful Projects","data":{"":"This page lists open-source projects that can be helpful for your player implementation. \nIf you have a project that could benefit other users, feel free to open a PR to add it here.","our-thewidlarzgroup-libraries#Our (TheWidlarzGroup) Libraries":"react-native-video-player: Our video player UI library.","community-libraries#Community Libraries":"react-native-corner-video: A floating video player.\nreact-native-track-player: A toolbox for audio playback.\nreact-native-video-controls: A video player UI.\nreact-native-media-console: An updated version of react-native-video-controls, rewritten in TypeScript."}},"/updating":{"title":"Updating","data":{"version-600#Version 6.0.0":"","ios#iOS":"","minimum-ios-version#Minimum iOS Version":"Starting from version 6.0.0, the minimum supported iOS version is 13.0. Projects using react-native < 0.73 must set the minimum iOS version to 13.0 in the Podfile.You can do this by adding the following code to your Podfile:\n- platform :ios, min_ios_version_supported\n+ MIN_IOS_OVERRIDE = '13.0'\n+ if Gem::Version.new(MIN_IOS_OVERRIDE) > Gem::Version.new(min_ios_version_supported)\n+   min_ios_version_supported = MIN_IOS_OVERRIDE\n+ end","linking#Linking":"In your project's Podfile, add support for static dependency linking. This is required to support the new Promises subdependency in the iOS Swift conversion.Add use_frameworks! :linkage => :static right below platform :ios in your iOS project Podfile.See the example iOS project for reference.","podspec#Podspec":"You can remove the following lines from your Podfile as they are no longer needed:\n-  `pod 'react-native-video', :path => '../node_modules/react-native-video/react-native-video.podspec'`\n-  `pod 'react-native-video/VideoCaching', :path => '../node_modules/react-native-video/react-native-video.podspec'`\nIf you were previously using VideoCaching, you should set the $RNVideoUseVideoCaching flag in your Podspec. See the installation section for details.","android#Android":"If you were using ExoPlayer on V5, remove the patch from android/settings.gradle:\n- include ':react-native-video'\n- project(':react-native-video').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-video/android-exoplayer')","using-app-build-settings#Using App Build Settings":"You need to create a project.ext section in the top-level build.gradle file (not app/build.gradle). Fill in the values from the example below using the ones found in your app/build.gradle file.\n// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    ... // Various other settings go here\n}\nallprojects {\n    ... // Various other settings go here\n    project.ext {\n        compileSdkVersion = 31\n        buildToolsVersion = \"30.0.2\"\n        minSdkVersion = 21\n        targetSdkVersion = 22\n    }\n}\nIf you encounter the error Could not find com.android.support:support-annotations:27.0.0., reinstall your Android Support Repository."}},"/component/props":{"title":"Configurable Props","data":{"":"This page shows the list of available properties to configure the player.","details#Details":"","adtagurl#adTagUrl":"[!WARNING]\nDeprecated, use source.ad.adTagUrl instead.\nSets the VAST URI to play AVOD ads.Example:\nadTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\nNote: You need to enable IMA SDK in the Gradle or Podfile – see Enable Client-Side Ads Insertion.","allowsexternalplayback#allowsExternalPlayback":"Indicates whether the player allows switching to external playback mode such as AirPlay or HDMI.\ntrue (default) – Allows switching to external playback mode.\nfalse – Prevents switching to external playback mode.","audiooutput#audioOutput":"Changes the audio output.\nspeaker (default) – Plays through the speaker.\nearpiece – Plays through the earpiece.","automaticallywaitstominimizestalling#automaticallyWaitsToMinimizeStalling":"Indicates whether the player should automatically delay playback to minimize stalling. Available for clients linked against iOS 10.0 and later.\nfalse – Immediately starts playback.\ntrue (default) – Delays playback to minimize stalling.","bufferconfig#bufferConfig":"[!WARNING]\nDeprecated, use source.bufferConfig instead.\nAdjusts the buffer settings. This prop takes an object with one or more of the following properties:\nProperty\tType\tDescription\tminBufferMs\tnumber\tMinimum duration (ms) the player will attempt to keep buffered.\tmaxBufferMs\tnumber\tMaximum duration (ms) the player will attempt to buffer.\tbufferForPlaybackMs\tnumber\tDuration (ms) that must be buffered before playback starts or resumes.\tbufferForPlaybackAfterRebufferMs\tnumber\tDuration (ms) that must be buffered after a rebuffer before playback resumes.\tbackBufferDurationMs\tnumber\tDuration (ms) of buffer to keep before the current position (allows rewinding).\tmaxHeapAllocationPercent\tnumber\tPercentage of available heap the video can use to buffer (0 to 1).\tminBackBufferMemoryReservePercent\tnumber\tPercentage of available app memory before the back buffer is disabled (0 to 1).\tminBufferMemoryReservePercent\tnumber\tPercentage of available app memory reserved for preventing buffer usage (0 to 1).\tcacheSizeMB\tnumber\tCache size in MB. Set to 0 to disable caching (Android only).\tlive\tobject\tObject containing configuration for live playback. See below.","live-buffer-configurations#Live Buffer Configurations":"Property\tType\tDescription\tmaxPlaybackSpeed\tnumber\tMaximum playback speed for catching up to target live offset.\tminPlaybackSpeed\tnumber\tMinimum playback speed for falling back to target live offset.\tmaxOffsetMs\tnumber\tMaximum allowed live offset. The player won’t exceed this limit.\tminOffsetMs\tnumber\tMinimum allowed live offset. The player won’t go below this limit.\ttargetOffsetMs\tnumber\tThe target live offset the player will aim to maintain.\t\nFor more details on Android live streaming, see ExoPlayer Live Streaming.","example-with-default-values#Example with Default Values":"bufferConfig={{\n  minBufferMs: 15000,\n  maxBufferMs: 50000,\n  bufferForPlaybackMs: 2500,\n  bufferForPlaybackAfterRebufferMs: 5000,\n  backBufferDurationMs: 120000,\n  cacheSizeMB: 0,\n  live: {\n      targetOffsetMs: 500,\n  },\n}}\nNote: The Android cache is global and shared among all components. The first cacheSizeMB value set persists throughout the app lifecycle.","bufferingstrategy#bufferingStrategy":"Configures the buffering and data loading strategy.\nDefault (default) – Uses ExoPlayer's default loading strategy.\nDisableBuffering – Prevents buffering beyond the immediate need. Use with caution, as this may stop playback.\nDependingOnMemory – Uses ExoPlayer’s default strategy but stops buffering and triggers garbage collection when memory is low.","chapters#chapters":"Provides a custom chapter source for tvOS. This prop takes an array of objects with the following properties:\nProperty\tType\tDescription\ttitle\tstring\tThe title of the chapter.\tstartTime\tnumber\tThe start time of the chapter (seconds).\tendTime\tnumber\tThe end time of the chapter (seconds).\turi\tstring?\tOptional image override URL (HTTP or Base64). Some media auto-generate images.","currentplaybacktime#currentPlaybackTime":"When playing an HLS live stream with an EXT-X-PROGRAM-DATE-TIME tag, this property contains the epoch value in milliseconds.","controls#controls":"Determines whether player controls are shown.\nfalse (default) – Hides player controls.\ntrue – Displays player controls.\nControls are always visible in fullscreen mode, even if controls={false}. To add custom controls, use packages like:\nreact-native-video-controls\nreact-native-media-console\nSee Useful Side Projects.","controlsstyles#controlsStyles":"Adjust the control styles. This prop is needed only if controls={true} and is an object. See the supported properties below.\nProperty\tType\tDescription\thidePosition\tboolean\tHides the position indicator. Default is false.\thidePlayPause\tboolean\tHides the play/pause button. Default is false.\thideForward\tboolean\tHides the forward button. Default is false.\thideRewind\tboolean\tHides the rewind button. Default is false.\thideNext\tboolean\tHides the next button. Default is false.\thidePrevious\tboolean\tHides the previous button. Default is false.\thideFullscreen\tboolean\tHides the fullscreen button. Default is false.\thideSeekBar\tboolean\tHides the seek bar, useful for live broadcasts. Default is false.\thideDuration\tboolean\tHides the duration display. Default is false.\thideNavigationBarOnFullScreenMode\tboolean\tHides the navigation bar in fullscreen mode. Default is true.\thideNotificationBarOnFullScreenMode\tboolean\tHides the notification bar in fullscreen mode. Default is true.\thideSettingButton\tboolean\tHides the settings button. Default is true.\tseekIncrementMS\tnumber\tDefines the seek increment in milliseconds. Default is 10000.\tliveLabel\tstring\tSets a label for live video.\t\nExample with default values:\ncontrolsStyles={{\n  hidePosition: false,\n  hidePlayPause: false,\n  hideForward: false,\n  hideRewind: false,\n  hideNext: false,\n  hidePrevious: false,\n  hideFullscreen: false,\n  hideSeekBar: false,\n  hideDuration: false,\n  hideNavigationBarOnFullScreenMode: true,\n  hideNotificationBarOnFullScreenMode: true,\n  hideSettingButton: true,\n  seekIncrementMS: 10000,\n  liveLabel: \"LIVE\"\n}}","contentstarttime#contentStartTime":"[!WARNING]\nDeprecated, use source.contentStartTime instead.\nDefines the start time in milliseconds for SSAI content. This ensures that video resolutions are loaded at the correct time. Note: This feature only works with DASH streams.","debug#debug":"Enables detailed logging.\n[!WARNING]\nDo not use this in production builds.\nProperty\tType\tDescription\tenable\tboolean\tEnables verbose logs. Default is false.\tthread\tboolean\tDisplays logs with thread information.\t\nExample:\ndebug={{\n  enable: true,\n  thread: true,\n}}","disablefocus#disableFocus":"Determines whether video audio should override background music/audio on Android.\nfalse (default) – Overrides background audio/music.\ntrue – Allows background audio/music from other apps to continue playing.\nNote: If true, multiple videos can play simultaneously. If false, starting another video will pause the first one.","disabledisconnecterror#disableDisconnectError":"Determines if the player should throw an error when the network connection is lost.\nfalse (default) – Throws an error when the connection is lost.\ntrue – The player will keep trying to buffer when the connection is lost.","drm#drm":"[!WARNING]\nDeprecated, use source.drm instead.\nTo set up DRM, follow this guide.","enterpictureinpictureonleave#enterPictureInPictureOnLeave":"Determines whether to enter Picture-in-Picture (PiP) mode when the user leaves the app.\nfalse (default) – Does not enable PiP mode.\ntrue – Plays media in PiP mode when the user switches apps.\nUsing this on Android:\nWith Expo: Add enableAndroidPictureInPicture to app.json:\n  \"plugins\": [\n    [\n      \"react-native-video\",\n      {\n        \"enableAndroidPictureInPicture\": true\n      }\n    ]\n  ]\nWith Bare React Native: Add PiP support in AndroidManifest.xml:\n<activity\n  android:name=\".MainActivity\"\n  android:supportsPictureInPicture=\"true\">\nNote: Video ads cannot start when using PiP on iOS. More details are available in the Google IMA SDK Docs.","filter#filter":"Applies a video filter.\nFilterType\tDescription\tNONE (default)\tNo filter\tINVERT\tCIColorInvert\tMONOCHROME\tCIColorMonochrome\tPOSTERIZE\tCIColorPosterize\tFALSE\tCIFalseColor\tMAXIMUMCOMPONENT\tCIMaximumComponent\tMINIMUMCOMPONENT\tCIMinimumComponent\tCHROME\tCIPhotoEffectChrome\tFADE\tCIPhotoEffectFade\tINSTANT\tCIPhotoEffectInstant\tMONO\tCIPhotoEffectMono\tNOIR\tCIPhotoEffectNoir\tPROCESS\tCIPhotoEffectProcess\tTONAL\tCIPhotoEffectTonal\tTRANSFER\tCIPhotoEffectTransfer\tSEPIA\tCISepiaTone\t\nNotes:\nUsing a filter may increase CPU usage.\nSaving a filtered video and reloading it is a workaround for performance issues.\nFilters are not supported on HLS playlists.\nfilterEnabled must be set to true for filters to work.","filterenabled#filterEnabled":"Enables video filter.\nfalse (default) – Don't enable filter.\ntrue – Enable filter.","focusable#focusable":"Determines whether this video view should be focusable with a non-touch input device, such as a hardware keyboard.\nfalse – Makes view unfocusable.\ntrue (default) – Makes view focusable.","fullscreen#fullscreen":"Controls whether the player enters fullscreen on play.\nfalse (default) – Don’t display the video in fullscreen.\ntrue – Display the video in fullscreen.\nSee presentFullscreenPlayer for details.","fullscreenautorotate#fullscreenAutorotate":"If a preferred fullscreenOrientation is set, this causes the video to rotate to that orientation but permits rotation of the screen to match the user's holding position. Defaults to true.","fullscreenorientation#fullscreenOrientation":"all (default) – Allows rotation in all orientations.\nlandscape – Locks fullscreen to landscape mode.\nportrait – Locks fullscreen to portrait mode.","headers#headers":"Passes headers to the HTTP client, which can be used for authorization. Headers must be part of the source object.Example:\nsource={{\n  uri: \"https://www.example.com/video.mp4\",\n  headers: {\n    Authorization: 'Bearer some-token-value',\n    'X-Custom-Header': 'some value'\n  }\n}}","hideshutterview#hideShutterView":"Controls whether the ExoPlayer shutter view (black screen while loading) is enabled.\nfalse (default) – Show shutter view.\ntrue – Hide shutter view.","ignoresilentswitch#ignoreSilentSwitch":"Controls the iOS silent switch behavior.\n\"inherit\" (default) – Uses the default AVPlayer behavior.\n\"ignore\" – Plays audio even if the silent switch is set.\n\"obey\" – Doesn’t play audio if the silent switch is set.","maxbitrate#maxBitRate":"Sets the desired limit, in bits per second, of network bandwidth consumption when multiple video streams are available for a playlist.Default: 0 (no limit on maxBitRate).Example:\nmaxBitRate={2000000} // 2 megabits","mixwithothers#mixWithOthers":"Controls how audio mixes with other apps.\n\"inherit\" (default) – Uses the default AVPlayer behavior.\n\"mix\" – Allows this video’s audio to mix with other apps.\n\"duck\" – Lowers the volume of other apps while playing this video.","muted#muted":"Controls whether the audio is muted.\nfalse (default) – Don’t mute audio.\ntrue – Mute audio.","paused#paused":"Controls whether the media is paused.\nfalse (default) – Don’t pause the media.\ntrue – Pause the media.","playinbackground#playInBackground":"Determines whether the media should continue playing while the app is in the background.\nfalse (default) – Don’t continue playing the media.\ntrue – Continue playing the media.\nTo use this feature on iOS, you must:\nEnable Background Audio in your Xcode project.\nSet the ignoreSilentSwitch prop to \"ignore\".","playwheninactive#playWhenInactive":"Determines whether the media should continue playing when notifications or the Control Center are in front of the video.\nfalse (default) – Don’t continue playing the media.\ntrue – Continue playing the media.","poster#poster":"[!WARNING]\nValue: string with a URL for the poster is deprecated, use poster as an object instead.\nAn image to display while the video is loading.Example:\n<Video>\n  poster={{\n    source: { uri: \"https://baconmockup.com/300/200/\" },\n    resizeMode: \"cover\",\n  }}\n</Video>","posterresizemode#posterResizeMode":"[!WARNING]\nDeprecated, use poster with resizeMode key instead.\nDetermines how to resize the poster image when the frame doesn’t match the raw video dimensions.\n\"contain\" (default) – Scales the image uniformly to fit within the view.\n\"center\" – Centers the image in the view without scaling beyond its original size.\n\"cover\" – Scales the image uniformly, ensuring it fills the view while maintaining aspect ratio.\n\"none\" – No resizing applied.\n\"repeat\" – Repeats the image to fill the view (iOS only).\n\"stretch\" – Stretches width and height independently, potentially distorting the aspect ratio.","preferredforwardbufferduration#preferredForwardBufferDuration":"Defines how long the player should buffer media ahead of the playhead to prevent playback interruptions.Default: 0.Apple Documentation","preventsdisplaysleepduringvideoplayback#preventsDisplaySleepDuringVideoPlayback":"Determines whether the device screen should remain active while playing a video.Default: true (prevents the display from sleeping).","progressupdateinterval#progressUpdateInterval":"Sets the delay (in milliseconds) between onProgress events.Default: 250.0 ms.","rate#rate":"Controls the speed at which the media should play.\n0.0 – Pauses the video (iOS only).\n1.0 (default) – Plays at normal speed.\nOther values – Adjusts playback speed (faster/slower).","renderloader#renderLoader":"Allows you to provide a custom component to display while the video is loading.If renderLoader is provided, poster and posterResizeMode will be ignored.renderLoader can be either a component or a function returning a component.","function-signature#Function Signature":"interface ReactVideoRenderLoaderProps {\n  source?: ReactVideoSource;\n  style?: StyleProp<ImageStyle>;\n  resizeMode?: EnumValues<VideoResizeMode>;\n}","example#Example":"<Video>\n  renderLoader={() => (\n    <View>\n      <Text>Custom Loader</Text>\n    </View>\n  )}\n</Video>","repeat#repeat":"Determines whether to repeat the video when playback reaches the end.\nfalse (default) – Don’t repeat the video.\ntrue – Repeat the video.","reportbandwidth#reportBandwidth":"Determines whether to generate onBandwidthUpdate events. This is necessary due to the high frequency of these events on ExoPlayer.\nfalse (default) – Don’t generate onBandwidthUpdate events.\ntrue – Generate onBandwidthUpdate events.","resizemode#resizeMode":"Determines how to resize the video when the frame doesn’t match the raw video dimensions.\n\"none\" (default) – No resizing applied.\n\"contain\" – Scales the video uniformly to fit within the view.\n\"cover\" – Scales the video uniformly to fill the view while maintaining aspect ratio.\n\"stretch\" – Stretches width and height independently, which may alter the aspect ratio.","selectedaudiotrack#selectedAudioTrack":"Configures which audio track, if any, is played.\nselectedAudioTrack={{\n  type: \"title\",\n  value: \"Dubbing\"\n}}\nType\tValue\tDescription\t\"system\" (default)\tN/A\tPlay the audio track that matches the system language. If none match, play the first track.\t\"disabled\"\tN/A\tTurn off audio.\t\"title\"\tstring\tPlay the audio track with the specified title, e.g., \"French\".\t\"language\"\tstring\tPlay the audio track with the specified language, e.g., \"fr\".\t\"index\"\tnumber\tPlay the audio track with the specified index, e.g., 0.\t\nIf no matching track is found, the first available track will be played. If multiple tracks match, the first match will be used.","selectedtexttrack#selectedTextTrack":"Configures which text track (captions or subtitles), if any, is shown.\nselectedTextTrack={{\n  type: \"title\",\n  value: \"English Subtitles\"\n}}\nType\tValue\tDescription\t\"system\" (default)\tN/A\tDisplay captions only if the system preference for captions is enabled.\t\"disabled\"\tN/A\tDon’t display a text track.\t\"title\"\tstring\tDisplay the text track with the specified title, e.g., \"French 1\".\t\"language\"\tstring\tDisplay the text track with the specified language, e.g., \"fr\".\t\"index\"\tnumber\tDisplay the text track with the specified index, e.g., 0.\t\nIf no matching track is found, no subtitles will be displayed. If multiple tracks match, the first match will be used.","selectedvideotrack#selectedVideoTrack":"Configures which video track should be played. By default, the player uses Adaptive Bitrate Streaming (ABR) to automatically select the best stream based on available bandwidth.\nselectedVideoTrack={{\n  type: \"resolution\",\n  value: 480\n}}\nType\tValue\tDescription\t\"auto\" (default)\tN/A\tLet the player determine the best track using ABR.\t\"disabled\"\tN/A\tTurn off video.\t\"resolution\"\tnumber\tPlay the video track with the specified height, e.g., 480 for the 480p stream.\t\"index\"\tnumber\tPlay the video track with the specified index, e.g., 0.\t\nIf no matching track is found, ABR will be used.","shuttercolor#shutterColor":"Applies color to the shutter view. If black flashes appear before the video starts, set:\nshutterColor = 'transparent';\nDefault: black.","source#source":"Sets the media source. You can pass an asset loaded via require or an object with a uri.Setting the source will trigger the player to attempt to load the provided media with all other given props. Ensure all props are provided before or at the same time as setting the source.Rendering the player component with a null source initializes the player and starts playing once a source value is provided.Providing a null source value after loading a previous source stops playback and clears out the previous content.The documentation for this prop is incomplete and will be updated as each option is investigated and tested.","asset-loaded-via-require#Asset Loaded via require":"⚠️ On iOS, file names must not contain spaces. For example, my video.mp4 will not work—use my-video.mp4 instead.\nExample:Pass the asset directly (deprecated):\nconst sintel = require('./sintel.mp4');\nsource = { sintel };\nOr by using a URI (starting from 6.0.0-beta.6):\nconst sintel = require('./sintel.mp4');\nsource={{ uri: sintel }}","uri-string#URI String":"A number of URI schemes are supported by passing an object with a uri attribute.All URI strings must be URL encoded.\nFor example, 'www.myurl.com/blabla?q=test uri' is invalid, whereas 'www.myurl.com/blabla?q=test%20uri' is valid.","web-address-http-https#Web Address (http://, https://)":"Example:\nsource={{ uri: 'https://www.sample-videos.com/video/mp4/720/big_buck_bunny_720p_10mb.mp4' }}","file-path-file#File Path (file://)":"Example:\nsource={{ uri: 'file:///sdcard/Movies/sintel.mp4' }}\nNote: Your app will need permission to read external storage if accessing a file outside your app.","file-from-asset-folder-asset#File from Asset Folder (asset://)":"Allows playing a video file from the app's asset folder.Example:\nsource={{ uri: 'asset:///sintel.mp4' }}","ipod-library-ipod-library#iPod Library (ipod-library://)":"Path to a sound file in your iTunes library, typically shared from iTunes to your app.Example:\nsource={{ uri: 'ipod-library:///path/to/music.mp3' }}\nNote: Using this feature requires adding an entry for NSAppleMusicUsageDescription to your Info.plist file, as described here.","explicit-mime-type-for-streams#Explicit MIME Type for Streams":"Provide a type property (mpd/m3u8/ism) inside the source object.\nThis is needed when the URL extension does not match the expected MIME type.Example (URL extension is .ism for Smooth Streaming, but the file is actually MPEG-DASH (mpd)):\nsource={{ uri: 'http://host-serving-a-type-different-than-the-extension.ism/manifest(format=mpd-time-csf)',\ntype: 'mpd' }}","other-protocols#Other Protocols":"The following protocols are supported on some platforms but not fully documented yet:\ncontent://, ms-appx://, ms-appdata://, assets-library://","using-drm-content#Using DRM Content":"To set up DRM, follow this guide.Example:\n{\n  description: 'WV: Secure SD & HD (cbcs, MP4, H264)',\n  uri: 'https://storage.googleapis.com/wvmedia/cbcs/h264/tears/tears_aes_cbcs.mpd',\n  drm: {\n    type: DRMType.WIDEVINE,\n    licenseServer:\n      'https://proxy.uat.widevine.com/proxy?provider=widevine_test',\n  },\n},","start-playback-at-a-specific-point-in-time#Start Playback at a Specific Point in Time":"Provide an optional startPosition for video playback. The value is in milliseconds. If the cropStart prop is applied, it will be applied from that point forward.\n(If it is negative, undefined, or null, it is ignored.)","playing-only-a-portion-of-the-video-start--end-time#Playing Only a Portion of the Video (Start & End Time)":"Provide an optional cropStart and/or cropEnd for the video. Values are in milliseconds. This is useful when you want to play only a portion of a large video.Example:\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012, cropEnd: 48500 }}\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropStart: 36012 }}\nsource={{ uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8', cropEnd: 48500 }}","overriding-the-metadata-of-a-source#Overriding the Metadata of a Source":"Provide optional title, subtitle, artist, imageUri, and/or description properties for the video.\nThis is useful when using notification controls on Android or iOS or adapting the tvOS playback experience.Example:\nsource={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    metadata: {\n      title: 'Custom Title',\n      subtitle: 'Custom Subtitle',\n      artist: 'Custom Artist',\n      description: 'Custom Description',\n      imageUri: 'https://pbs.twimg.com/profile_images/1498641868397191170/6qW2XkuI_400x400.png'\n    }\n  }}","ad#ad":"Sets the ad configuration.Example:\nad: {\n  adTagUrl=\"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/vmap_ad_samples&sz=640x480&cust_params=sample_ar%3Dpremidpostoptimizedpodbumper&ciu_szs=300x250&gdfp_req=1&ad_rule=1&output=vmap&unviewed_position_start=1&env=vp&impl=s&cmsid=496&vid=short_onecue&correlator=\"\n  adLanguage=\"fr\"\n}\nSee: ads for more information.Note: You need to enable IMA SDK in the Gradle or Pod file - enable client-side ads insertion.","contentstarttime-1#contentStartTime":"The start time in ms for SSAI content. This determines at what time to load the video info like resolutions. Use this only when you have an SSAI stream where the ad resolution is not the same as the content resolution.Note: This feature only works on DASH streams.","texttracksallowchunklesspreparation#textTracksAllowChunklessPreparation":"Allow Chunkless Preparation for HLS media sources.\nSee: disabling-chunkless in the Android documentation.Default value: true.\nsource={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    textTracksAllowChunklessPreparation: false,\n  }}","bufferconfig-1#bufferConfig":"Adjust the buffer settings. This prop takes an object with one or more of the properties listed below.\nProperty\tType\tDescription\tminBufferMs\tnumber\tMinimum duration of media that the player will attempt to buffer at all times, in milliseconds.\tmaxBufferMs\tnumber\tMaximum duration of media that the player will attempt to buffer, in milliseconds.\tbufferForPlaybackMs\tnumber\tDuration of media that must be buffered for playback to start or resume following a user action, in milliseconds.\tbufferForPlaybackAfterRebufferMs\tnumber\tDuration of media that must be buffered for playback to resume after a rebuffer, in milliseconds.\tbackBufferDurationMs\tnumber\tDuration of buffer to keep before the current position, allowing rewinding without rebuffering.\tmaxHeapAllocationPercent\tnumber\tPercentage of available heap that the video can use to buffer, between 0 and 1.\tminBackBufferMemoryReservePercent\tnumber\tPercentage of available app memory at which during startup the back buffer will be disabled, between 0 and 1.\tminBufferMemoryReservePercent\tnumber\tPercentage of available app memory to keep in reserve, preventing buffer usage, between 0 and 1.\tcacheSizeMB\tnumber\tCache size in MB, preventing new src requests and saving bandwidth while repeating videos, or 0 to disable. Android only.\tlive\tobject\tObject containing another config set for live playback configuration.","minloadretrycount#minLoadRetryCount":"Sets the minimum number of times to retry loading data before failing and reporting an error to the application. Useful for recovering from transient internet failures.Default: 3. Retries 3 times.Example:\nsource={{\n  uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n  minLoadRetryCount: 5 // Retry 5 times.\n}}","texttracks#textTracks":"Load one or more \"sidecar\" text tracks. This takes an array of objects representing each track. Each object should have the format:\n⚠️ This feature does not work with HLS playlists (e.g., m3u8) on iOS.\nProperty\tDescription\ttitle\tDescriptive name for the track.\tlanguage\t2-letter ISO 639-1 code representing the language.\ttype\tMime type of the track. Supports TextTrackType.SUBRIP, TextTrackType.TTML, TextTrackType.VTT.\turi\tURL for the text track. Only tracks hosted on a web server are supported.\t\nNote: Due to iOS limitations, sidecar text tracks are not compatible with AirPlay. If textTracks are specified, AirPlay support will be automatically disabled.Example:\nimport { TextTrackType } from 'react-native-video';\ntextTracks=[\n  {\n    title: \"English CC\",\n    language: \"en\",\n    type: TextTrackType.VTT, // \"text/vtt\"\n    uri: \"https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt\"\n  },\n  {\n    title: \"Spanish Subtitles\",\n    language: \"es\",\n    type: TextTrackType.SUBRIP, // \"application/x-subrip\"\n    uri: \"https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt\"\n  }\n]","subtitlestyle#subtitleStyle":"Property\tPlatform\tDescription\tPlatforms\tfontSize\tAndroid\tAdjust the font size of the subtitles. Default: font size of the device\tAndroid\tpaddingTop\tAndroid\tAdjust the top padding of the subtitles. Default: 0\tAndroid\tpaddingBottom\tAndroid\tAdjust the bottom padding of the subtitles. Default: 0\tAndroid\tpaddingLeft\tAndroid\tAdjust the left padding of the subtitles. Default: 0\tAndroid\tpaddingRight\tAndroid\tAdjust the right padding of the subtitles. Default: 0\tAndroid\topacity\tAndroid, iOS\tAdjust the visibility of subtitles with 0 hiding and 1 fully showing them. Android supports float values between 0 and 1 for varying opacity levels, whereas iOS supports only 0 or 1. Default: 1.\tAndroid, iOS\tsubtitlesFollowVideo\tAndroid\tBoolean to adjust position of subtitles. Default: true\t\nExample:\nsubtitleStyle={{ paddingBottom: 50, fontSize: 20, opacity: 0 }}\nNote for subtitlesFollowVideosubtitlesFollowVideo helps to determine how the subtitles are positioned.\nTo understand this prop, you need to understand how view management works.\nThe main View style passed to react-native-video is the space reserved to display the video component.\nIt may not match exactly the real video size.\nFor example, you can pass a 4:3 video view and render a 16:9 video inside.\nSo there is a second view, the video view.Subtitles are managed in a third view.\nWhen subtitlesFollowVideo is set to true, the subtitle view will adapt to the video view.\nIf the video is displayed out of screen, the subtitles may also be displayed out of screen.\nWhen subtitlesFollowVideo is set to false, the subtitle view will adapt to the main view.\nIf the video is displayed out of screen, the subtitles may still remain visible within the main view.\nThis prop can be changed at runtime.","texttracks-1#textTracks":"[!WARNING]\nDeprecated, use source.textTracks instead. Changing text tracks will restart playback.\nLoad one or more \"sidecar\" text tracks. This takes an array of objects representing each track. Each object should have the format:\n⚠️ This feature does not work with HLS playlists (e.g., m3u8) on iOS.\nProperty\tDescription\ttitle\tDescriptive name for the track\tlanguage\t2-letter ISO 639-1 code representing the language\ttype\tMime type of the track (TextTrackType.SUBRIP - SubRip (.srt), TextTrackType.TTML - TTML (.ttml), TextTrackType.VTT - WebVTT (.vtt)). iOS only supports VTT, Android supports all 3.\turi\tURL for the text track. Currently, only tracks hosted on a web server are supported.\t\nOn iOS, sidecar text tracks are only supported for individual files, not HLS playlists. For HLS, you should include the text tracks as part of the playlist.Note: Due to iOS limitations, sidecar text tracks are not compatible with AirPlay. If textTracks are specified, AirPlay support will be automatically disabled.Example:\nimport { TextTrackType }, Video from 'react-native-video';\ntextTracks=[\n  {\n    title: \"English CC\",\n    language: \"en\",\n    type: TextTrackType.VTT, // \"text/vtt\"\n    uri: \"https://bitdash-a.akamaihd.net/content/sintel/subtitles/subtitles_en.vtt\"\n  },\n  {\n    title: \"Spanish Subtitles\",\n    language: \"es\",\n    type: TextTrackType.SUBRIP, // \"application/x-subrip\"\n    uri: \"https://durian.blender.org/wp-content/content/subtitles/sintel_es.srt\"\n  }\n]","shownotificationcontrols#showNotificationControls":"Controls whether to show media controls in the notification area.\nFor Android, each Video component will have its own notification controls, whereas on iOS only one notification control will be shown for the last active Video component.On Android, this will also allow for external controls, Google Assistant session, and other benefits of MediaSession.You probably also want to set playInBackground to true to keep the video playing when the app is in the background, or playWhenInactive to true to keep the video playing when notifications or the Control Center are in front of the video.To customize the notification controls, you can use the metadata property in the source prop.\nfalse (default) - Don't show media controls in the notification area.\ntrue - Show media controls in the notification area.\nTo test notification controls on iOS, you need to run the app on a real device, as the simulator does not support it.For Android, you have to add the following code in your AndroidManifest.xml file:\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ...\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\n    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE_MEDIA_PLAYBACK\" />\n    ...\n    <application>\n      ...\n      <service\n        android:name=\"com.brentvatne.exoplayer.VideoPlaybackService\"\n        android:exported=\"false\"\n        android:foregroundServiceType=\"mediaPlayback\">\n          <intent-filter>\n            <action android:name=\"androidx.media3.session.MediaSessionService\" />\n          </intent-filter>\n      </service>\n    </application>\n</manifest>","usesecureview#useSecureView":"[!WARNING]\ndeprecated, use viewType instead\nForce the output to a SurfaceView and enables the secure surface.This will override useTextureView flag.SurfaceView is the only one that can be labeled as secure.\ntrue - Use security\nfalse (default) - Do not use security","usetextureview#useTextureView":"[!WARNING]\ndeprecated, use viewType instead\nControls whether to output to a TextureView or SurfaceView.SurfaceView is more efficient and provides better performance but has two limitations:\nIt can't be animated, transformed or scaled\nYou can't overlay multiple SurfaceViews\nuseTextureView can only be set at the same time you're setting the source.\ntrue (default) - Use a TextureView\nfalse - Use a SurfaceView","viewtype#viewType":"Allows explicitly specifying the view type.\nThis flag replaces useSecureView and useTextureView fields.\nThere are 3 available values:\n'textureView': The video is rendered in a texture view. It allows mapping the view on a texture (useful for 3D).\nDRM playback is not supported on textureView. If the DRM prop is provided, the surface will be transformed into a SurfaceView.\n'surfaceView' (default): The video is rendered in a surface, taking fewer resources to render.\n'secureView': The video is rendered in a surface that prevents screenshots from being taken.","volume#volume":"Adjust the volume.\n1.0 (default) - Play at full volume\n0.0 - Mute the audio\nOther values - Reduce volume","cmcd#cmcd":"Configure CMCD (Common Media Client Data) parameters. CMCD is a standard for conveying client-side metrics and capabilities to servers, which can help improve streaming quality and performance.For detailed information about CMCD, please refer to the CTA-5004 Final Specification.\nfalse (default) - Don't use CMCD\ntrue - Use default CMCD configuration\nobject - Use custom CMCD configuration\nWhen providing an object, you can configure the following properties:\nProperty\tType\tDescription\tmode\tCmcdMode\tThe mode for sending CMCD data\trequest\tCmcdData\tCustom key-value pairs for the request object\tsession\tCmcdData\tCustom key-value pairs for the session object\tobject\tCmcdData\tCustom key-value pairs for the object metadata\tstatus\tCmcdData\tCustom key-value pairs for the status information\t\nNote: The mode property defaults to CmcdMode.MODE_QUERY_PARAMETER if not specified.","cmcdmode#CmcdMode":"CmcdMode is an enum that defines how CMCD data should be sent:\nCmcdMode.MODE_REQUEST_HEADER (0) - Send CMCD data in the HTTP request headers.\nCmcdMode.MODE_QUERY_PARAMETER (1) - Send CMCD data as query parameters in the URL.","cmcddata#CmcdData":"CmcdData is a type representing custom key-value pairs for CMCD data. It's defined as:\ntype CmcdData = Record<`${string}-${string}`, string | number>;\nCustom key names MUST include a hyphenated prefix to prevent namespace collisions. It's recommended to use a reverse-DNS syntax for custom prefixes.Example:\n<Video\n  source={{\n    uri: 'https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8',\n    cmcd: {\n      mode: CmcdMode.MODE_QUERY_PARAMETER,\n      request: {\n        'com-custom-key': 'custom-value'\n      },\n      session: {\n        sid: 'session-id'\n      },\n      object: {\n        br: '3000',\n        d: '4000'\n      },\n      status: {\n        rtp: '1200'\n      }\n    }\n  }}\n  // or other video props\n/>"}}}