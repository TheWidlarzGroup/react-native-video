//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./example/OvalCalculator.java
//

#include "OvalCalculator.h"
#include <math.h>

@interface OvalCalculator () {
@public
  double video_width_;
  double video_height_;
  double view_width_;
  double view_height_;
  int fill_mode_;
  double landscape_offset_percentage_;
  double trim_percentage_;
  double trim_videoWidth_;
  double trim_videoHeight_;
  BOOL reduceZoomFactor_;
  double reduceZoomFactor_viewWidth_;
  double reduceZoomFactor_viewHeight_;
  BOOL avoidScaleDropLandscape_;
  double asd_max_rad_;
  double asd_max_scale_;
  double asd_view_width_;
  double asd_view_height_;
  double asd_video_width_;
  double asd_video_height_;
  BOOL slow_start_landscape_;
  double slow_start_rad_landscape_;
  BOOL slow_start_portrait_;
  double slow_start_rad_portrait_;
  BOOL init__;
}

- (BOOL)check_invalid_init;

- (double)get_trimmed_video_width;

- (double)get_trimmed_video_height;

- (void)asd_check_view_size_changeWithDouble:(double)view_width
                                  withDouble:(double)view_height
                                  withDouble:(double)video_width
                                  withDouble:(double)video_height;

- (double)regularize_radWithDouble:(double)rad;

- (float)rescale_avoid_landscale_dropWithDouble:(double)rad
                                     withDouble:(double)scale_
                                     withDouble:(double)video_width
                                     withDouble:(double)video_height;

@end

__attribute__((unused)) static BOOL OvalCalculator_check_invalid_init(OvalCalculator *self);

__attribute__((unused)) static double OvalCalculator_get_trimmed_video_width(OvalCalculator *self);

__attribute__((unused)) static double OvalCalculator_get_trimmed_video_height(OvalCalculator *self);

__attribute__((unused)) static void OvalCalculator_asd_check_view_size_changeWithDouble_withDouble_withDouble_withDouble_(OvalCalculator *self, double view_width, double view_height, double video_width, double video_height);

__attribute__((unused)) static double OvalCalculator_regularize_radWithDouble_(OvalCalculator *self, double rad);

__attribute__((unused)) static float OvalCalculator_rescale_avoid_landscale_dropWithDouble_withDouble_withDouble_withDouble_(OvalCalculator *self, double rad, double scale_, double video_width, double video_height);

@implementation OvalCalculator


- (instancetype)init
{
  self = [super init];
  if (self) {
    self->fill_mode_ = 0;
    self->landscape_offset_percentage_ = 0;
    self->trim_percentage_ = 0;
    self->trim_videoWidth_ = 0;
    self->trim_videoHeight_ = 0;
    self->reduceZoomFactor_ = true;
    self->reduceZoomFactor_viewWidth_ = 9;
    self->reduceZoomFactor_viewHeight_ = 16;
    self->avoidScaleDropLandscape_ = true;
    self->asd_max_rad_ = -1;
    self->asd_max_scale_ = -1;
    self->asd_view_width_ = -1;
    self->asd_view_height_ = -1;
    self->asd_video_width_ = -1;
    self->asd_video_height_ = -1;
    self->slow_start_landscape_ = false;
    self->slow_start_rad_landscape_ = 9.0 * M_PI / 180.0;
    self->slow_start_portrait_ = true;
    self->slow_start_rad_portrait_ = 18.0 * M_PI / 180.0;
    self->init__ = false;
  }
  return self;
}

- (BOOL)is_init {
  return init__;
}

- (void)set_initWithBoolean:(BOOL)init_ {
  self->init__ = init_;
}

- (BOOL)is_size_changedWithDouble:(double)view_width
                       withDouble:(double)view_height
                       withDouble:(double)video_width
                       withDouble:(double)video_height {
  return (view_width != self->view_width_ || view_height != self->view_height_ || video_width != self->video_width_ || video_height != self->video_height_);
}

- (void)set_video_sizeWithDouble:(double)video_width
                      withDouble:(double)video_height {
  self->video_width_ = video_width;
  self->video_height_ = video_height;
  if (trim_videoWidth_ != 0 && trim_videoHeight_ != 0) [self set_trim_sizeWithDouble:trim_videoWidth_ withDouble:trim_videoHeight_];
}

- (void)set_view_sizeWithDouble:(double)view_width
                     withDouble:(double)view_height {
  self->view_width_ = view_width;
  self->view_height_ = view_height;
}

- (void)set_trim_sizeWithDouble:(double)trim_width
                     withDouble:(double)trim_height {
  if (self->video_width_ == 0 || self->video_height_ == 0 || self->video_width_ == -1 || self->video_height_ == -1) return;
  double video_width = self->video_width_;
  double video_height = self->video_height_;
  double t;
  if (trim_width > trim_height) {
    t = trim_height;
    trim_height = trim_width;
    trim_width = t;
  }
  if (video_width > video_height) {
    t = video_height;
    video_height = video_width;
    video_width = t;
  }
  trim_percentage_ = 100.0 * (video_height * trim_width - trim_height * video_width) / (video_height * trim_width * 2.0);
}

- (void)set_trim_percentageWithDouble:(double)trim_percentage {
  self->trim_percentage_ = trim_percentage;
}

- (void)set_landscape_offsetWithDouble:(double)landscape_offset_percentage {
  self->landscape_offset_percentage_ = landscape_offset_percentage;
}

- (void)set_reduce_zoom_factorWithBoolean:(BOOL)flag {
  reduceZoomFactor_ = flag;
}

- (void)set_avoid_scale_drop_landscapeWithBoolean:(BOOL)flag {
  avoidScaleDropLandscape_ = flag;
}

- (double)get_trim_percentage {
  return trim_percentage_;
}

- (double)get_video_width {
  return video_width_;
}

- (double)get_video_height {
  return video_height_;
}

- (double)get_view_width {
  return view_width_;
}

- (double)get_view_height {
  return view_height_;
}

- (BOOL)get_reduce_zoom_factor {
  return reduceZoomFactor_;
}

- (BOOL)get_avoid_scale_drop_landscape {
  return avoidScaleDropLandscape_;
}

- (double)get_landscape_offset_percentage {
  return landscape_offset_percentage_;
}

- (BOOL)is_shift_on_landscape {
  return (landscape_offset_percentage_ != 0 && video_width_ < video_height_);
}

- (double)get_landscase_offsetWithDouble:(double)rad {
  if (video_width_ >= video_height_) return 0;
  if (!slow_start_portrait_) return fabs(sin(rad)) * landscape_offset_percentage_ * view_height_;
  double r = OvalCalculator_regularize_radWithDouble_(self, rad);
  if (fabs(r) <= slow_start_rad_portrait_ || fabs(r) >= M_PI - slow_start_rad_portrait_) return 0;
  else if (fabs(r) <= 0.5 * M_PI) return fabs(sin((fabs(r) - slow_start_rad_portrait_) * 0.5 * M_PI / (0.5 * M_PI - slow_start_rad_portrait_))) * landscape_offset_percentage_ * view_height_;
  else return fabs(sin(M_PI - ((M_PI - fabs(r) - slow_start_rad_portrait_) * 0.5 * M_PI / (0.5 * M_PI - slow_start_rad_portrait_)))) * landscape_offset_percentage_ * view_height_;
}

- (double)get_landscape_offset_xWithDouble:(double)rad {
  return [self get_landscase_offsetWithDouble:rad] * sin(rad);
}

- (double)get_landscape_offset_yWithDouble:(double)rad {
  return -[self get_landscase_offsetWithDouble:rad] * cos(rad);
}

- (BOOL)check_invalid_init {
  return OvalCalculator_check_invalid_init(self);
}

- (double)get_trimmed_video_width {
  return OvalCalculator_get_trimmed_video_width(self);
}

- (double)get_trimmed_video_height {
  return OvalCalculator_get_trimmed_video_height(self);
}

- (double)get_scaleWithDouble:(double)view_width
                   withDouble:(double)view_height
                   withDouble:(double)video_width
                   withDouble:(double)video_height
                   withDouble:(double)rad {
  if ([self is_size_changedWithDouble:view_width withDouble:view_height withDouble:video_width withDouble:video_height]) {
    [self set_view_sizeWithDouble:view_width withDouble:view_height];
    [self set_video_sizeWithDouble:video_width withDouble:video_height];
  }
  return [self get_scaleWithDouble:rad];
}

- (void)set_fill {
  fill_mode_ = 0;
}

- (void)set_fit {
  fill_mode_ = 1;
}

- (int)get_video_stretch_mode {
  return fill_mode_;
}

- (double)get_scaleWithDouble:(double)rad {
  double scale_x = view_width_ / video_width_;
  double scale_y = view_height_ / video_height_;
  double original_video_scale = scale_x > scale_y ? scale_x : scale_y;
  if (fill_mode_ == 1) original_video_scale = scale_x > scale_y ? scale_y : scale_x;
  double raw_scale = [self get_scale_rawWithDouble:rad];
  return raw_scale / original_video_scale;
}

- (double)get_scale_rawWithDouble:(double)rad {
  if (slow_start_portrait_ && video_width_ < video_height_) {
    double r = OvalCalculator_regularize_radWithDouble_(self, rad);
    if (fabs(r) <= slow_start_rad_portrait_ || fabs(r) >= M_PI - slow_start_rad_portrait_) {
      return [self get_scale_raw_WithDouble:slow_start_rad_portrait_];}
    else {
      return [self get_scale_raw_WithDouble:r];

    }
  }
  else if (slow_start_landscape_ && video_width_ > video_height_) {
    double r = OvalCalculator_regularize_radWithDouble_(self, rad + 0.5 * M_PI);
    if (fabs(r) <= slow_start_rad_landscape_ || fabs(r) >= M_PI - slow_start_rad_landscape_) return [self get_scale_raw_WithDouble:slow_start_rad_landscape_ + 0.5 * M_PI];
    else return [self get_scale_raw_WithDouble:OvalCalculator_regularize_radWithDouble_(self, rad)];
  }
  else return [self get_scale_raw_WithDouble:rad];
}

- (double)get_scale_raw_WithDouble:(double)rad {
  if (OvalCalculator_check_invalid_init(self)) return 1.0;
  double video_width = self->video_width_;
  double video_height = self->video_height_;
  if (trim_percentage_ != 0) {
    video_width = OvalCalculator_get_trimmed_video_width(self);
    video_height = OvalCalculator_get_trimmed_video_height(self);
  }
  if (avoidScaleDropLandscape_) OvalCalculator_asd_check_view_size_changeWithDouble_withDouble_withDouble_withDouble_(self, view_width_, view_height_, video_width, video_height);
  if (reduceZoomFactor_) {
    if (view_width_ < view_height_ && view_height_ / view_width_ > reduceZoomFactor_viewHeight_ / reduceZoomFactor_viewWidth_) view_width_ = view_height_ * reduceZoomFactor_viewWidth_ / reduceZoomFactor_viewHeight_;
    else if (view_width_ > view_height_ && view_width_ / view_height_ > reduceZoomFactor_viewHeight_ / reduceZoomFactor_viewWidth_) view_height_ = view_width_ * reduceZoomFactor_viewWidth_ / reduceZoomFactor_viewHeight_;
  }
  double half_view_width = 0.5 * view_width_;
  double half_view_height = 0.5 * view_height_;
  double half_video_width = 0.5 * video_width;
  double half_video_height = 0.5 * video_height;
  double xc1 = half_view_width * cos(rad) - half_view_height * sin(rad);
  double yc1 = half_view_width * sin(rad) + half_view_height * cos(rad);
  double xc2 = -half_view_width * cos(rad) - half_view_height * sin(rad);
  double yc2 = -half_view_width * sin(rad) + half_view_height * cos(rad);
  double r2_1 = xc1 * xc1 / half_video_width / half_video_width + yc1 * yc1 / half_video_height / half_video_height;
  double r2_2 = xc2 * xc2 / half_video_width / half_video_width + yc2 * yc2 / half_video_height / half_video_height;
  double r2 = r2_1 > r2_2 ? r2_1 : r2_2;
  double r = sqrt(r2);
  if (avoidScaleDropLandscape_) r = OvalCalculator_rescale_avoid_landscale_dropWithDouble_withDouble_withDouble_withDouble_(self, rad, r, video_width, video_height);
  return r;
}

- (void)asd_check_view_size_changeWithDouble:(double)view_width
                                  withDouble:(double)view_height
                                  withDouble:(double)video_width
                                  withDouble:(double)video_height {
  OvalCalculator_asd_check_view_size_changeWithDouble_withDouble_withDouble_withDouble_(self, view_width, view_height, video_width, video_height);
}

- (double)regularize_radWithDouble:(double)rad {
  return OvalCalculator_regularize_radWithDouble_(self, rad);
}

- (float)rescale_avoid_landscale_dropWithDouble:(double)rad
                                     withDouble:(double)scale_
                                     withDouble:(double)video_width
                                     withDouble:(double)video_height {
  return OvalCalculator_rescale_avoid_landscale_dropWithDouble_withDouble_withDouble_withDouble_(self, rad, scale_, video_width, video_height);
}

@end



BOOL OvalCalculator_check_invalid_init(OvalCalculator *self) {
  return (self->view_width_ == 0 || self->view_height_ == 0 || self->video_width_ == 0 || self->video_height_ == 0 || self->video_width_ == -1 || self->video_height_ == -1);
}

double OvalCalculator_get_trimmed_video_width(OvalCalculator *self) {
  double trimmed_video_width = self->video_width_;
  if (self->video_width_ > self->video_height_) {
    trimmed_video_width = self->video_width_ * (1 - 0.02 * self->trim_percentage_);
    trimmed_video_width = trimmed_video_width < self->video_height_ ? self->video_height_ : trimmed_video_width;
  }
  return trimmed_video_width;
}

double OvalCalculator_get_trimmed_video_height(OvalCalculator *self) {
  double trimmed_video_height = self->video_height_;
  if (self->video_width_ < self->video_height_) {
    trimmed_video_height = self->video_height_ * (1 - 0.02 * self->trim_percentage_);
    trimmed_video_height = trimmed_video_height < self->video_width_ ? self->video_width_ : trimmed_video_height;
  }
  return trimmed_video_height;
}

void OvalCalculator_asd_check_view_size_changeWithDouble_withDouble_withDouble_withDouble_(OvalCalculator *self, double view_width, double view_height, double video_width, double video_height) {
  if (view_width == self->asd_view_width_ && view_height == self->asd_view_height_ && video_width == self->asd_video_width_ && video_height == self->asd_video_height_) return;
  self->asd_max_rad_ = -1;
  self->asd_max_scale_ = -1;
  self->asd_view_width_ = view_width;
  self->asd_view_height_ = view_height;
  self->asd_video_width_ = video_width;
  self->asd_video_height_ = video_height;
}

double OvalCalculator_regularize_radWithDouble_(OvalCalculator *self, double rad) {
  while (rad <= -M_PI) rad += 2.0 * M_PI;
  while (rad > M_PI) rad -= 2.0 * M_PI;
  return rad;
}

float OvalCalculator_rescale_avoid_landscale_dropWithDouble_withDouble_withDouble_withDouble_(OvalCalculator *self, double rad, double scale_, double video_width, double video_height) {
  rad = OvalCalculator_regularize_radWithDouble_(self, rad);
  if (self->asd_max_scale_ == -1 || scale_ > self->asd_max_scale_) {
    self->asd_max_scale_ = scale_;
    rad = fabs(rad);
    self->asd_max_rad_ = (rad > 0.5 * M_PI) ? M_PI - rad : rad;
  }
  else if (scale_ == self->asd_max_scale_) {
    rad = fabs(rad);
    rad = (rad > 0.5 * M_PI) ? M_PI - rad : rad;
    if ((video_width < video_height && rad < self->asd_max_rad_) || (video_width > video_height && rad > self->asd_max_rad_)) rad = self->asd_max_rad_;
  }
  else if (scale_ < self->asd_max_scale_) {
    rad = fabs(rad);
    rad = (rad > 0.5 * M_PI) ? M_PI - rad : rad;
    if ((video_width < video_height && rad > self->asd_max_rad_) || (video_width > video_height && rad < self->asd_max_rad_)) scale_ = self->asd_max_scale_;
  }
  return (float) scale_;
}
