///
/// JHybridVideoPlayerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridVideoPlayerSpec.hpp"

// Forward declaration of `HybridVideoPlayerSourceSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerSourceSpec; }
// Forward declaration of `HybridVideoPlayerEventEmitterSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerEventEmitterSpec; }
// Forward declaration of `VideoPlayerStatus` to properly resolve imports.
namespace margelo::nitro::video { enum class VideoPlayerStatus; }

#include <memory>
#include "HybridVideoPlayerSourceSpec.hpp"
#include "JHybridVideoPlayerSourceSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include "HybridVideoPlayerEventEmitterSpec.hpp"
#include "JHybridVideoPlayerEventEmitterSpec.hpp"
#include "VideoPlayerStatus.hpp"
#include "JVideoPlayerStatus.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <optional>

namespace margelo::nitro::video {

  jni::local_ref<JHybridVideoPlayerSpec::jhybriddata> JHybridVideoPlayerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridVideoPlayerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridVideoPlayerSpec::initHybrid),
    });
  }

  size_t JHybridVideoPlayerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::shared_ptr<margelo::nitro::video::HybridVideoPlayerSourceSpec> JHybridVideoPlayerSpec::getSource() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridVideoPlayerSourceSpec::javaobject>()>("getSource");
    auto __result = method(_javaPart);
    return JNISharedPtr::make_shared_from_jni<JHybridVideoPlayerSourceSpec>(jni::make_global(__result));
  }
  std::shared_ptr<margelo::nitro::video::HybridVideoPlayerEventEmitterSpec> JHybridVideoPlayerSpec::getEventEmitter() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridVideoPlayerEventEmitterSpec::javaobject>()>("getEventEmitter");
    auto __result = method(_javaPart);
    return JNISharedPtr::make_shared_from_jni<JHybridVideoPlayerEventEmitterSpec>(jni::make_global(__result));
  }
  VideoPlayerStatus JHybridVideoPlayerSpec::getStatus() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JVideoPlayerStatus>()>("getStatus");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  double JHybridVideoPlayerSpec::getDuration() {
    static const auto method = javaClassStatic()->getMethod<double()>("getDuration");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridVideoPlayerSpec::getVolume() {
    static const auto method = javaClassStatic()->getMethod<double()>("getVolume");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridVideoPlayerSpec::setVolume(double volume) {
    static const auto method = javaClassStatic()->getMethod<void(double /* volume */)>("setVolume");
    method(_javaPart, volume);
  }
  double JHybridVideoPlayerSpec::getCurrentTime() {
    static const auto method = javaClassStatic()->getMethod<double()>("getCurrentTime");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridVideoPlayerSpec::setCurrentTime(double currentTime) {
    static const auto method = javaClassStatic()->getMethod<void(double /* currentTime */)>("setCurrentTime");
    method(_javaPart, currentTime);
  }
  bool JHybridVideoPlayerSpec::getMuted() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getMuted");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridVideoPlayerSpec::setMuted(bool muted) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* muted */)>("setMuted");
    method(_javaPart, muted);
  }
  bool JHybridVideoPlayerSpec::getLoop() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getLoop");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridVideoPlayerSpec::setLoop(bool loop) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* loop */)>("setLoop");
    method(_javaPart, loop);
  }
  double JHybridVideoPlayerSpec::getRate() {
    static const auto method = javaClassStatic()->getMethod<double()>("getRate");
    auto __result = method(_javaPart);
    return __result;
  }
  void JHybridVideoPlayerSpec::setRate(double rate) {
    static const auto method = javaClassStatic()->getMethod<void(double /* rate */)>("setRate");
    method(_javaPart, rate);
  }

  // Methods
  std::shared_ptr<Promise<void>> JHybridVideoPlayerSpec::replaceSourceAsync(const std::optional<std::shared_ptr<margelo::nitro::video::HybridVideoPlayerSourceSpec>>& source) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JHybridVideoPlayerSourceSpec::javaobject> /* source */)>("replaceSourceAsync");
    auto __result = method(_javaPart, source.has_value() ? std::dynamic_pointer_cast<JHybridVideoPlayerSourceSpec>(source.value())->getJavaPart() : nullptr);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridVideoPlayerSpec::clean() {
    static const auto method = javaClassStatic()->getMethod<void()>("clean");
    method(_javaPart);
  }
  std::shared_ptr<Promise<void>> JHybridVideoPlayerSpec::preload() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("preload");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridVideoPlayerSpec::play() {
    static const auto method = javaClassStatic()->getMethod<void()>("play");
    method(_javaPart);
  }
  void JHybridVideoPlayerSpec::pause() {
    static const auto method = javaClassStatic()->getMethod<void()>("pause");
    method(_javaPart);
  }
  void JHybridVideoPlayerSpec::seekBy(double time) {
    static const auto method = javaClassStatic()->getMethod<void(double /* time */)>("seekBy");
    method(_javaPart, time);
  }
  void JHybridVideoPlayerSpec::seekTo(double time) {
    static const auto method = javaClassStatic()->getMethod<void(double /* time */)>("seekTo");
    method(_javaPart, time);
  }

} // namespace margelo::nitro::video
