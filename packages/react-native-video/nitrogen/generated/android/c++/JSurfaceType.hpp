///
/// JSurfaceType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "SurfaceType.hpp"

namespace margelo::nitro::video {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "SurfaceType" and the the Kotlin enum "SurfaceType".
   */
  struct JSurfaceType final: public jni::JavaClass<JSurfaceType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/video/SurfaceType;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum SurfaceType.
     */
    [[maybe_unused]]
    [[nodiscard]]
    SurfaceType toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("value");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<SurfaceType>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JSurfaceType> fromCpp(SurfaceType value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldSURFACE = clazz->getStaticField<JSurfaceType>("SURFACE");
      static const auto fieldTEXTURE = clazz->getStaticField<JSurfaceType>("TEXTURE");
      
      switch (value) {
        case SurfaceType::SURFACE:
          return clazz->getStaticFieldValue(fieldSURFACE);
        case SurfaceType::TEXTURE:
          return clazz->getStaticFieldValue(fieldTEXTURE);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::video
