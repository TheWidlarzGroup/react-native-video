///
/// JHybridVideoViewViewManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridVideoViewViewManagerSpec.hpp"

// Forward declaration of `HybridVideoPlayerSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerSpec; }

#include <optional>
#include <memory>
#include "HybridVideoPlayerSpec.hpp"
#include "JHybridVideoPlayerSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>

namespace margelo::nitro::video {

  jni::local_ref<JHybridVideoViewViewManagerSpec::jhybriddata> JHybridVideoViewViewManagerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridVideoViewViewManagerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridVideoViewViewManagerSpec::initHybrid),
    });
  }

  size_t JHybridVideoViewViewManagerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::optional<std::shared_ptr<margelo::nitro::video::HybridVideoPlayerSpec>> JHybridVideoViewViewManagerSpec::getPlayer() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridVideoPlayerSpec::javaobject>()>("getPlayer");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(JNISharedPtr::make_shared_from_jni<JHybridVideoPlayerSpec>(jni::make_global(__result))) : std::nullopt;
  }
  void JHybridVideoViewViewManagerSpec::setPlayer(const std::optional<std::shared_ptr<margelo::nitro::video::HybridVideoPlayerSpec>>& player) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JHybridVideoPlayerSpec::javaobject> /* player */)>("setPlayer");
    method(_javaPart, player.has_value() ? std::dynamic_pointer_cast<JHybridVideoPlayerSpec>(player.value())->getJavaPart() : nullptr);
  }
  bool JHybridVideoViewViewManagerSpec::getControls() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getControls");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridVideoViewViewManagerSpec::setControls(bool controls) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* controls */)>("setControls");
    method(_javaPart, controls);
  }
  bool JHybridVideoViewViewManagerSpec::getPictureInPicture() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getPictureInPicture");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridVideoViewViewManagerSpec::setPictureInPicture(bool pictureInPicture) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* pictureInPicture */)>("setPictureInPicture");
    method(_javaPart, pictureInPicture);
  }
  bool JHybridVideoViewViewManagerSpec::getAutoEnterPictureInPicture() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("getAutoEnterPictureInPicture");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }
  void JHybridVideoViewViewManagerSpec::setAutoEnterPictureInPicture(bool autoEnterPictureInPicture) {
    static const auto method = javaClassStatic()->getMethod<void(jboolean /* autoEnterPictureInPicture */)>("setAutoEnterPictureInPicture");
    method(_javaPart, autoEnterPictureInPicture);
  }

  // Methods
  void JHybridVideoViewViewManagerSpec::enterFullscreen() {
    static const auto method = javaClassStatic()->getMethod<void()>("enterFullscreen");
    method(_javaPart);
  }
  void JHybridVideoViewViewManagerSpec::exitFullscreen() {
    static const auto method = javaClassStatic()->getMethod<void()>("exitFullscreen");
    method(_javaPart);
  }
  void JHybridVideoViewViewManagerSpec::enterPictureInPicture() {
    static const auto method = javaClassStatic()->getMethod<void()>("enterPictureInPicture");
    method(_javaPart);
  }
  void JHybridVideoViewViewManagerSpec::exitPictureInPicture() {
    static const auto method = javaClassStatic()->getMethod<void()>("exitPictureInPicture");
    method(_javaPart);
  }
  bool JHybridVideoViewViewManagerSpec::canEnterPictureInPicture() {
    static const auto method = javaClassStatic()->getMethod<jboolean()>("canEnterPictureInPicture");
    auto __result = method(_javaPart);
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::video
