///
/// NativeVideoConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NativeExternalSubtitle` to properly resolve imports.
namespace margelo::nitro::video { struct NativeExternalSubtitle; }

#include <string>
#include <optional>
#include <vector>
#include "NativeExternalSubtitle.hpp"
#include <unordered_map>

namespace margelo::nitro::video {

  /**
   * A struct which can be represented as a JavaScript object (NativeVideoConfig).
   */
  struct NativeVideoConfig {
  public:
    std::string uri     SWIFT_PRIVATE;
    std::optional<std::vector<NativeExternalSubtitle>> externalSubtitles     SWIFT_PRIVATE;
    std::optional<std::unordered_map<std::string, std::string>> headers     SWIFT_PRIVATE;

  public:
    NativeVideoConfig() = default;
    explicit NativeVideoConfig(std::string uri, std::optional<std::vector<NativeExternalSubtitle>> externalSubtitles, std::optional<std::unordered_map<std::string, std::string>> headers): uri(uri), externalSubtitles(externalSubtitles), headers(headers) {}
  };

} // namespace margelo::nitro::video

namespace margelo::nitro {

  using namespace margelo::nitro::video;

  // C++ NativeVideoConfig <> JS NativeVideoConfig (object)
  template <>
  struct JSIConverter<NativeVideoConfig> final {
    static inline NativeVideoConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NativeVideoConfig(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "uri")),
        JSIConverter<std::optional<std::vector<NativeExternalSubtitle>>>::fromJSI(runtime, obj.getProperty(runtime, "externalSubtitles")),
        JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::fromJSI(runtime, obj.getProperty(runtime, "headers"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NativeVideoConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "uri", JSIConverter<std::string>::toJSI(runtime, arg.uri));
      obj.setProperty(runtime, "externalSubtitles", JSIConverter<std::optional<std::vector<NativeExternalSubtitle>>>::toJSI(runtime, arg.externalSubtitles));
      obj.setProperty(runtime, "headers", JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::toJSI(runtime, arg.headers));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "uri"))) return false;
      if (!JSIConverter<std::optional<std::vector<NativeExternalSubtitle>>>::canConvert(runtime, obj.getProperty(runtime, "externalSubtitles"))) return false;
      if (!JSIConverter<std::optional<std::unordered_map<std::string, std::string>>>::canConvert(runtime, obj.getProperty(runtime, "headers"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
