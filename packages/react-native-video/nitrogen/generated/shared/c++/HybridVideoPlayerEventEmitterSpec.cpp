///
/// HybridVideoPlayerEventEmitterSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridVideoPlayerEventEmitterSpec.hpp"

namespace margelo::nitro::video {

  void HybridVideoPlayerEventEmitterSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("onAudioBecomingNoisy", &HybridVideoPlayerEventEmitterSpec::getOnAudioBecomingNoisy);
      prototype.registerHybridSetter("onAudioBecomingNoisy", &HybridVideoPlayerEventEmitterSpec::setOnAudioBecomingNoisy);
      prototype.registerHybridGetter("onAudioFocusChange", &HybridVideoPlayerEventEmitterSpec::getOnAudioFocusChange);
      prototype.registerHybridSetter("onAudioFocusChange", &HybridVideoPlayerEventEmitterSpec::setOnAudioFocusChange);
      prototype.registerHybridGetter("onBandwidthUpdate", &HybridVideoPlayerEventEmitterSpec::getOnBandwidthUpdate);
      prototype.registerHybridSetter("onBandwidthUpdate", &HybridVideoPlayerEventEmitterSpec::setOnBandwidthUpdate);
      prototype.registerHybridGetter("onBuffer", &HybridVideoPlayerEventEmitterSpec::getOnBuffer);
      prototype.registerHybridSetter("onBuffer", &HybridVideoPlayerEventEmitterSpec::setOnBuffer);
      prototype.registerHybridGetter("onControlsVisibleChange", &HybridVideoPlayerEventEmitterSpec::getOnControlsVisibleChange);
      prototype.registerHybridSetter("onControlsVisibleChange", &HybridVideoPlayerEventEmitterSpec::setOnControlsVisibleChange);
      prototype.registerHybridGetter("onEnd", &HybridVideoPlayerEventEmitterSpec::getOnEnd);
      prototype.registerHybridSetter("onEnd", &HybridVideoPlayerEventEmitterSpec::setOnEnd);
      prototype.registerHybridGetter("onExternalPlaybackChange", &HybridVideoPlayerEventEmitterSpec::getOnExternalPlaybackChange);
      prototype.registerHybridSetter("onExternalPlaybackChange", &HybridVideoPlayerEventEmitterSpec::setOnExternalPlaybackChange);
      prototype.registerHybridGetter("onLoad", &HybridVideoPlayerEventEmitterSpec::getOnLoad);
      prototype.registerHybridSetter("onLoad", &HybridVideoPlayerEventEmitterSpec::setOnLoad);
      prototype.registerHybridGetter("onLoadStart", &HybridVideoPlayerEventEmitterSpec::getOnLoadStart);
      prototype.registerHybridSetter("onLoadStart", &HybridVideoPlayerEventEmitterSpec::setOnLoadStart);
      prototype.registerHybridGetter("onPlaybackStateChange", &HybridVideoPlayerEventEmitterSpec::getOnPlaybackStateChange);
      prototype.registerHybridSetter("onPlaybackStateChange", &HybridVideoPlayerEventEmitterSpec::setOnPlaybackStateChange);
      prototype.registerHybridGetter("onPlaybackRateChange", &HybridVideoPlayerEventEmitterSpec::getOnPlaybackRateChange);
      prototype.registerHybridSetter("onPlaybackRateChange", &HybridVideoPlayerEventEmitterSpec::setOnPlaybackRateChange);
      prototype.registerHybridGetter("onProgress", &HybridVideoPlayerEventEmitterSpec::getOnProgress);
      prototype.registerHybridSetter("onProgress", &HybridVideoPlayerEventEmitterSpec::setOnProgress);
      prototype.registerHybridGetter("onReadyToDisplay", &HybridVideoPlayerEventEmitterSpec::getOnReadyToDisplay);
      prototype.registerHybridSetter("onReadyToDisplay", &HybridVideoPlayerEventEmitterSpec::setOnReadyToDisplay);
      prototype.registerHybridGetter("onSeek", &HybridVideoPlayerEventEmitterSpec::getOnSeek);
      prototype.registerHybridSetter("onSeek", &HybridVideoPlayerEventEmitterSpec::setOnSeek);
      prototype.registerHybridGetter("onTimedMetadata", &HybridVideoPlayerEventEmitterSpec::getOnTimedMetadata);
      prototype.registerHybridSetter("onTimedMetadata", &HybridVideoPlayerEventEmitterSpec::setOnTimedMetadata);
      prototype.registerHybridGetter("onTextTrackDataChanged", &HybridVideoPlayerEventEmitterSpec::getOnTextTrackDataChanged);
      prototype.registerHybridSetter("onTextTrackDataChanged", &HybridVideoPlayerEventEmitterSpec::setOnTextTrackDataChanged);
      prototype.registerHybridGetter("onTrackChange", &HybridVideoPlayerEventEmitterSpec::getOnTrackChange);
      prototype.registerHybridSetter("onTrackChange", &HybridVideoPlayerEventEmitterSpec::setOnTrackChange);
      prototype.registerHybridGetter("onVolumeChange", &HybridVideoPlayerEventEmitterSpec::getOnVolumeChange);
      prototype.registerHybridSetter("onVolumeChange", &HybridVideoPlayerEventEmitterSpec::setOnVolumeChange);
      prototype.registerHybridGetter("onStatusChange", &HybridVideoPlayerEventEmitterSpec::getOnStatusChange);
      prototype.registerHybridSetter("onStatusChange", &HybridVideoPlayerEventEmitterSpec::setOnStatusChange);
    });
  }

} // namespace margelo::nitro::video
