///
/// TimedMetadataObject.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::video {

  /**
   * A struct which can be represented as a JavaScript object (TimedMetadataObject).
   */
  struct TimedMetadataObject {
  public:
    std::string value     SWIFT_PRIVATE;
    std::string identifier     SWIFT_PRIVATE;

  public:
    TimedMetadataObject() = default;
    explicit TimedMetadataObject(std::string value, std::string identifier): value(value), identifier(identifier) {}
  };

} // namespace margelo::nitro::video

namespace margelo::nitro {

  // C++ TimedMetadataObject <> JS TimedMetadataObject (object)
  template <>
  struct JSIConverter<margelo::nitro::video::TimedMetadataObject> final {
    static inline margelo::nitro::video::TimedMetadataObject fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::video::TimedMetadataObject(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "value")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "identifier"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::video::TimedMetadataObject& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "value", JSIConverter<std::string>::toJSI(runtime, arg.value));
      obj.setProperty(runtime, "identifier", JSIConverter<std::string>::toJSI(runtime, arg.identifier));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "value"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "identifier"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
