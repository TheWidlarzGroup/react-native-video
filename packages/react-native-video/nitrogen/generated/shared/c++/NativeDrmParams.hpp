///
/// NativeDrmParams.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `OnGetLicensePayload` to properly resolve imports.
namespace margelo::nitro::video { struct OnGetLicensePayload; }

#include <string>
#include <optional>
#include <NitroModules/Promise.hpp>
#include "OnGetLicensePayload.hpp"
#include <functional>

namespace margelo::nitro::video {

  /**
   * A struct which can be represented as a JavaScript object (NativeDrmParams).
   */
  struct NativeDrmParams {
  public:
    std::optional<std::string> type     SWIFT_PRIVATE;
    std::optional<std::string> licenseUrl     SWIFT_PRIVATE;
    std::optional<std::string> certificateUrl     SWIFT_PRIVATE;
    std::optional<std::string> contentId     SWIFT_PRIVATE;
    std::optional<bool> multiSession     SWIFT_PRIVATE;
    std::optional<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const OnGetLicensePayload& /* payload */)>> getLicense     SWIFT_PRIVATE;

  public:
    NativeDrmParams() = default;
    explicit NativeDrmParams(std::optional<std::string> type, std::optional<std::string> licenseUrl, std::optional<std::string> certificateUrl, std::optional<std::string> contentId, std::optional<bool> multiSession, std::optional<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const OnGetLicensePayload& /* payload */)>> getLicense): type(type), licenseUrl(licenseUrl), certificateUrl(certificateUrl), contentId(contentId), multiSession(multiSession), getLicense(getLicense) {}
  };

} // namespace margelo::nitro::video

namespace margelo::nitro {

  using namespace margelo::nitro::video;

  // C++ NativeDrmParams <> JS NativeDrmParams (object)
  template <>
  struct JSIConverter<NativeDrmParams> final {
    static inline NativeDrmParams fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return NativeDrmParams(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "type")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "licenseUrl")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "certificateUrl")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "contentId")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "multiSession")),
        JSIConverter<std::optional<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const OnGetLicensePayload& /* payload */)>>>::fromJSI(runtime, obj.getProperty(runtime, "getLicense"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const NativeDrmParams& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "type", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.type));
      obj.setProperty(runtime, "licenseUrl", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.licenseUrl));
      obj.setProperty(runtime, "certificateUrl", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.certificateUrl));
      obj.setProperty(runtime, "contentId", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.contentId));
      obj.setProperty(runtime, "multiSession", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.multiSession));
      obj.setProperty(runtime, "getLicense", JSIConverter<std::optional<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const OnGetLicensePayload& /* payload */)>>>::toJSI(runtime, arg.getLicense));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "type"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "licenseUrl"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "certificateUrl"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "contentId"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "multiSession"))) return false;
      if (!JSIConverter<std::optional<std::function<std::shared_ptr<Promise<std::shared_ptr<Promise<std::string>>>>(const OnGetLicensePayload& /* payload */)>>>::canConvert(runtime, obj.getProperty(runtime, "getLicense"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
