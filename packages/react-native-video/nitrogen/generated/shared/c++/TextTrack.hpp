///
/// TextTrack.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::video {

  /**
   * A struct which can be represented as a JavaScript object (TextTrack).
   */
  struct TextTrack {
  public:
    std::string id     SWIFT_PRIVATE;
    std::string label     SWIFT_PRIVATE;
    std::optional<std::string> language     SWIFT_PRIVATE;
    bool selected     SWIFT_PRIVATE;

  public:
    TextTrack() = default;
    explicit TextTrack(std::string id, std::string label, std::optional<std::string> language, bool selected): id(id), label(label), language(language), selected(selected) {}
  };

} // namespace margelo::nitro::video

namespace margelo::nitro {

  // C++ TextTrack <> JS TextTrack (object)
  template <>
  struct JSIConverter<margelo::nitro::video::TextTrack> final {
    static inline margelo::nitro::video::TextTrack fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::video::TextTrack(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "id")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "label")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "language")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "selected"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::video::TextTrack& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "id", JSIConverter<std::string>::toJSI(runtime, arg.id));
      obj.setProperty(runtime, "label", JSIConverter<std::string>::toJSI(runtime, arg.label));
      obj.setProperty(runtime, "language", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.language));
      obj.setProperty(runtime, "selected", JSIConverter<bool>::toJSI(runtime, arg.selected));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "id"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "label"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "language"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "selected"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
