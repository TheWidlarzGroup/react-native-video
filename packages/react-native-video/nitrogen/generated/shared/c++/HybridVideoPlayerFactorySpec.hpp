///
/// HybridVideoPlayerFactorySpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridVideoPlayerSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerSpec; }
// Forward declaration of `HybridVideoPlayerSourceSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerSourceSpec; }

#include <memory>
#include "HybridVideoPlayerSpec.hpp"
#include "HybridVideoPlayerSourceSpec.hpp"

namespace margelo::nitro::video {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `VideoPlayerFactory`
   * Inherit this class to create instances of `HybridVideoPlayerFactorySpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridVideoPlayerFactory: public HybridVideoPlayerFactorySpec {
   * public:
   *   HybridVideoPlayerFactory(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridVideoPlayerFactorySpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridVideoPlayerFactorySpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridVideoPlayerFactorySpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<HybridVideoPlayerSpec> createPlayer(const std::shared_ptr<HybridVideoPlayerSourceSpec>& source) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "VideoPlayerFactory";
  };

} // namespace margelo::nitro::video
