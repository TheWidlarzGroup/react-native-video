///
/// onLoadData.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `VideoOrientation` to properly resolve imports.
namespace margelo::nitro::video { enum class VideoOrientation; }

#include "VideoOrientation.hpp"

namespace margelo::nitro::video {

  /**
   * A struct which can be represented as a JavaScript object (onLoadData).
   */
  struct onLoadData {
  public:
    double currentTime     SWIFT_PRIVATE;
    double duration     SWIFT_PRIVATE;
    double height     SWIFT_PRIVATE;
    double width     SWIFT_PRIVATE;
    VideoOrientation orientation     SWIFT_PRIVATE;

  public:
    onLoadData() = default;
    explicit onLoadData(double currentTime, double duration, double height, double width, VideoOrientation orientation): currentTime(currentTime), duration(duration), height(height), width(width), orientation(orientation) {}
  };

} // namespace margelo::nitro::video

namespace margelo::nitro {

  using namespace margelo::nitro::video;

  // C++ onLoadData <> JS onLoadData (object)
  template <>
  struct JSIConverter<onLoadData> final {
    static inline onLoadData fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return onLoadData(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "currentTime")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "duration")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "height")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "width")),
        JSIConverter<VideoOrientation>::fromJSI(runtime, obj.getProperty(runtime, "orientation"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const onLoadData& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "currentTime", JSIConverter<double>::toJSI(runtime, arg.currentTime));
      obj.setProperty(runtime, "duration", JSIConverter<double>::toJSI(runtime, arg.duration));
      obj.setProperty(runtime, "height", JSIConverter<double>::toJSI(runtime, arg.height));
      obj.setProperty(runtime, "width", JSIConverter<double>::toJSI(runtime, arg.width));
      obj.setProperty(runtime, "orientation", JSIConverter<VideoOrientation>::toJSI(runtime, arg.orientation));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "currentTime"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "duration"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "height"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "width"))) return false;
      if (!JSIConverter<VideoOrientation>::canConvert(runtime, obj.getProperty(runtime, "orientation"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
