///
/// HybridVideoPlayerFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridVideoPlayerFactorySpec``
public protocol HybridVideoPlayerFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createPlayer(source: (any HybridVideoPlayerSourceSpec)) throws -> (any HybridVideoPlayerSpec)
}

/// See ``HybridVideoPlayerFactorySpec``
open class HybridVideoPlayerFactorySpec_base {
  private weak var cxxWrapper: HybridVideoPlayerFactorySpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridVideoPlayerFactorySpec_cxx {
  #if DEBUG
    guard self is HybridVideoPlayerFactorySpec else {
      fatalError("`self` is not a `HybridVideoPlayerFactorySpec`! Did you accidentally inherit from `HybridVideoPlayerFactorySpec_base` instead of `HybridVideoPlayerFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridVideoPlayerFactorySpec_cxx(self as! HybridVideoPlayerFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the VideoPlayerFactory HybridObject.
 * Implement this protocol to create Swift-based instances of VideoPlayerFactory.
 * ```swift
 * class HybridVideoPlayerFactory : HybridVideoPlayerFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridVideoPlayerFactorySpec = HybridVideoPlayerFactorySpec_protocol & HybridVideoPlayerFactorySpec_base
