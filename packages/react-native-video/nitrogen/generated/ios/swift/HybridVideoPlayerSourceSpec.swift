///
/// HybridVideoPlayerSourceSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridVideoPlayerSourceSpec``
public protocol HybridVideoPlayerSourceSpec_protocol: HybridObject {
  // Properties
  var uri: String { get }
  var config: NativeVideoConfig { get }

  // Methods
  func getAssetInformationAsync() throws -> Promise<VideoInformation>
}

/// See ``HybridVideoPlayerSourceSpec``
public class HybridVideoPlayerSourceSpec_base {
  private weak var cxxWrapper: HybridVideoPlayerSourceSpec_cxx? = nil
  public func getCxxWrapper() -> HybridVideoPlayerSourceSpec_cxx {
  #if DEBUG
    guard self is HybridVideoPlayerSourceSpec else {
      fatalError("`self` is not a `HybridVideoPlayerSourceSpec`! Did you accidentally inherit from `HybridVideoPlayerSourceSpec_base` instead of `HybridVideoPlayerSourceSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridVideoPlayerSourceSpec_cxx(self as! HybridVideoPlayerSourceSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the VideoPlayerSource HybridObject.
 * Implement this protocol to create Swift-based instances of VideoPlayerSource.
 * ```swift
 * class HybridVideoPlayerSource : HybridVideoPlayerSourceSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridVideoPlayerSourceSpec = HybridVideoPlayerSourceSpec_protocol & HybridVideoPlayerSourceSpec_base
