///
/// HybridVideoViewViewManagerFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridVideoViewViewManagerFactorySpec``
public protocol HybridVideoViewViewManagerFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func createViewManager(nitroId: Double) throws -> (any HybridVideoViewViewManagerSpec)
}

/// See ``HybridVideoViewViewManagerFactorySpec``
public class HybridVideoViewViewManagerFactorySpec_base {
  private weak var cxxWrapper: HybridVideoViewViewManagerFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridVideoViewViewManagerFactorySpec_cxx {
  #if DEBUG
    guard self is HybridVideoViewViewManagerFactorySpec else {
      fatalError("`self` is not a `HybridVideoViewViewManagerFactorySpec`! Did you accidentally inherit from `HybridVideoViewViewManagerFactorySpec_base` instead of `HybridVideoViewViewManagerFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridVideoViewViewManagerFactorySpec_cxx(self as! HybridVideoViewViewManagerFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the VideoViewViewManagerFactory HybridObject.
 * Implement this protocol to create Swift-based instances of VideoViewViewManagerFactory.
 * ```swift
 * class HybridVideoViewViewManagerFactory : HybridVideoViewViewManagerFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridVideoViewViewManagerFactorySpec = HybridVideoViewViewManagerFactorySpec_protocol & HybridVideoViewViewManagerFactorySpec_base
