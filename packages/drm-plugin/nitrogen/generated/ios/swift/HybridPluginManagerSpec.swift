///
/// HybridPluginManagerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridPluginManagerSpec``
public protocol HybridPluginManagerSpec_protocol: HybridObject {
  // Properties
  var isEnabled: Bool { get }

  // Methods
  func enable() throws -> Void
  func disable() throws -> Void
}

/// See ``HybridPluginManagerSpec``
open class HybridPluginManagerSpec_base {
  private weak var cxxWrapper: HybridPluginManagerSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridPluginManagerSpec_cxx {
  #if DEBUG
    guard self is HybridPluginManagerSpec else {
      fatalError("`self` is not a `HybridPluginManagerSpec`! Did you accidentally inherit from `HybridPluginManagerSpec_base` instead of `HybridPluginManagerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridPluginManagerSpec_cxx(self as! HybridPluginManagerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the PluginManager HybridObject.
 * Implement this protocol to create Swift-based instances of PluginManager.
 * ```swift
 * class HybridPluginManager : HybridPluginManagerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridPluginManagerSpec = HybridPluginManagerSpec_protocol & HybridPluginManagerSpec_base
