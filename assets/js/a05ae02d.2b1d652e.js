"use strict";(self.webpackChunk_react_native_video_docs=self.webpackChunk_react_native_video_docs||[]).push([["2488"],{6883:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>o,default:()=>h,toc:()=>d,metadata:()=>r,assets:()=>a,contentTitle:()=>c});var r=JSON.parse('{"id":"player/player-lifecycle","title":"Player Lifecycle","description":"Understanding the lifecycle of the VideoPlayer is crucial for managing resources effectively and ensuring a smooth user experience.","source":"@site/docs/player/player-lifecycle.md","sourceDirName":"player","slug":"/player/player-lifecycle","permalink":"/react-native-video/docs/v7/player/player-lifecycle","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Player Lifecycle","sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Player","permalink":"/react-native-video/docs/v7/player/"},"next":{"title":"VideoView","permalink":"/react-native-video/docs/v7/video-view"}}'),s=i(5893),l=i(980);let o={sidebar_label:"Player Lifecycle",sidebar_position:5},c="Player Lifecycle",a={},d=[{value:"Creation and Initialization",id:"creation-and-initialization",level:2},{value:"Playing a Video",id:"playing-a-video",level:2},{value:"Controlling Playback",id:"controlling-playback",level:2},{value:"Changing Source",id:"changing-source",level:2},{value:"Releasing Resources",id:"releasing-resources",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Using with Hooks (<code>useVideoPlayer</code>)",id:"using-with-hooks-usevideoplayer",level:2}];function t(e){let n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"player-lifecycle",children:"Player Lifecycle"})}),"\n",(0,s.jsxs)(n.p,{children:["Understanding the lifecycle of the ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," is crucial for managing resources effectively and ensuring a smooth user experience."]}),"\n",(0,s.jsx)(n.h2,{id:"creation-and-initialization",children:"Creation and Initialization"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instantiation"}),": A ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," instance is created by calling its constructor with a video source (URL, ",(0,s.jsx)(n.code,{children:"VideoSource"}),", or ",(0,s.jsx)(n.code,{children:"VideoConfig"}),").","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const player = new VideoPlayer('https://example.com/video.mp4');\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Native Player Creation"}),": Internally this creates a native player instance tailored to the platform (iOS/Android)."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Player does not initialize asset right after JS class creation. Asset will be initialized when you call ",(0,s.jsx)(n.code,{children:"preload()"})," or access any property/method of the player."]})}),"\n",(0,s.jsx)(n.h2,{id:"playing-a-video",children:"Playing a Video"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Loading"}),": When ",(0,s.jsx)(n.code,{children:"play()"})," is called for the first time, or after ",(0,s.jsx)(n.code,{children:"replaceSourceAsync()"}),", the player starts loading the video metadata and buffering content.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onLoadStart"}),": Fired when the video starts loading."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onLoad"}),": Fired when the video metadata is loaded and the player is ready to play (duration, dimensions, etc., are available)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onBuffer"}),": Fired when buffering starts or ends."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Playback"}),": Once enough data is buffered, playback begins.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onPlaybackStateChange"}),": Fired when the playback state changes (e.g., from ",(0,s.jsx)(n.code,{children:"buffering"})," to ",(0,s.jsx)(n.code,{children:"playing"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onProgress"}),": Fired periodically with the current playback time."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"onReadyToDisplay"}),": Fired when the first frame is ready to be displayed."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"controlling-playback",children:"Controlling Playback"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pause()"}),": Pauses playback. ",(0,s.jsx)(n.code,{children:"status"})," changes to ",(0,s.jsx)(n.code,{children:"paused"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"seekTo(time)"}),", ",(0,s.jsx)(n.code,{children:"seekBy(time)"}),": Changes the current playback position. ",(0,s.jsx)(n.code,{children:"onSeek"})," is fired when the seek operation completes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"set volume(value)"}),", ",(0,s.jsx)(n.code,{children:"set muted(value)"}),", ",(0,s.jsx)(n.code,{children:"set loop(value)"}),", ",(0,s.jsx)(n.code,{children:"set rate(value)"}),": Modify player properties. Corresponding events like ",(0,s.jsx)(n.code,{children:"onVolumeChange"})," or ",(0,s.jsx)(n.code,{children:"onPlaybackRateChange"})," might be fired."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"changing-source",children:"Changing Source"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replaceSourceAsync(newSource)"}),": This method allows you to change the video source dynamically.","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The current native player resources associated with the old source are released (similar to ",(0,s.jsx)(n.code,{children:"release()"})," but specifically for the source)."]}),"\n",(0,s.jsxs)(n.li,{children:["A new native player instance (or reconfigured existing one) is prepared for the ",(0,s.jsx)(n.code,{children:"newSource"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The loading lifecycle events (",(0,s.jsx)(n.code,{children:"onLoadStart"}),", ",(0,s.jsx)(n.code,{children:"onLoad"}),", etc.) will fire for the new source."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"replaceSourceAsync(null)"}),": This effectively unloads the current video and releases its associated resources without loading a new one. This is useful for freeing up memory if the player is temporarily not needed but might be used again later."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"releasing-resources",children:"Releasing Resources"}),"\n",(0,s.jsx)(n.p,{children:"There are two main ways to release resources:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"replaceSourceAsync(null)"})}),": This is a less destructive way to free resources related ",(0,s.jsx)(n.em,{children:"only"})," to the current video source."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," instance itself remains usable."]}),"\n",(0,s.jsxs)(n.li,{children:["You can later call ",(0,s.jsx)(n.code,{children:"replaceSourceAsync(newSource)"})," to load and play a new video."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"release()"})}),": This is a destructive operation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["After calling ",(0,s.jsx)(n.code,{children:"release()"}),", the player instance becomes unusable. Any subsequent calls to its methods or property access will result in errors."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["It is recommended to use ",(0,s.jsx)(n.code,{children:"replaceSourceAsync(null)"})," when you want to free resources related to the current video source. You should call ",(0,s.jsx)(n.code,{children:"release()"})," only when you are 100% sure that you don't need the player instance anymore. Anyway garbage collector will release the player instance when it is no longer needed."]})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"onError"})," callback, if provided, will be called when a ",(0,s.jsx)(n.code,{children:"VideoRuntimeError"})," occurs. This allows you to handle issues like network errors, invalid source, or platform-specific playback problems."]}),"\n",(0,s.jsxs)(n.li,{children:["If ",(0,s.jsx)(n.code,{children:"onError"})," is not provided, errors might be thrown as exceptions."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"using-with-hooks-usevideoplayer",children:["Using with Hooks (",(0,s.jsx)(n.code,{children:"useVideoPlayer"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"useVideoPlayer"})," hook simplifies managing the ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," lifecycle within React components."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { useVideoPlayer } from 'react-native-video';\n\nconst MyComponent = () => {\n  const player = useVideoPlayer('https://example.com/video.mp4', (playerInstance) => {\n    // Optional setup function: configure the player instance after creation\n    playerInstance.loop = true;\n  });\n\n  // ... use player ...\n\n  return <VideoView player={player} />;\n};\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Creation"}),": ",(0,s.jsx)(n.code,{children:"useVideoPlayer"})," creates a ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," instance when the component mounts or when the source dependency changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Cleanup"}),": It automatically cleanup resources when the component unmounts or before recreating the player due to a source change. This prevents resource leaks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Management"}),": If the ",(0,s.jsx)(n.code,{children:"source"})," prop passed to ",(0,s.jsx)(n.code,{children:"useVideoPlayer"})," changes, the hook will clean up the old player instance and create a new one with the new source."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"useVideoPlayer"})," is the recommended way to manage ",(0,s.jsx)(n.code,{children:"VideoPlayer"})," instances in functional components to ensure proper lifecycle management and resource cleanup."]})})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(t,{...e})}):t(e)}},980:function(e,n,i){i.d(n,{Z:()=>c,a:()=>o});var r=i(7294);let s={},l=r.createContext(s);function o(e){let n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);