"use strict";(self.webpackChunk_react_native_video_docs=self.webpackChunk_react_native_video_docs||[]).push([["3885"],{369:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>l,default:()=>u,toc:()=>d,metadata:()=>r,assets:()=>o,contentTitle:()=>t});var r=JSON.parse('{"id":"other/plugin","title":"Plugins","description":"React Native Video Plugins Integration","source":"@site/versioned_docs/version-6.x/other/plugin.md","sourceDirName":"other","slug":"/other/plugin","permalink":"/react-native-video/docs/v6/other/plugin","draft":false,"unlisted":false,"tags":[],"version":"6.x","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Plugins","description":"React Native Video Plugins Integration"},"sidebar":"docsSidebar","previous":{"title":"Downloading","permalink":"/react-native-video/docs/v6/other/downloading"},"next":{"title":"Miscellaneous","permalink":"/react-native-video/docs/v6/other/misc"}}'),a=i(5893),s=i(980);let l={sidebar_position:4,title:"Plugins",description:"React Native Video Plugins Integration"},t="Plugins",o={},d=[{value:"Commercial Plugins",id:"commercial-plugins",level:2},{value:"Plugins for Analytics",id:"plugins-for-analytics",level:2},{value:"Warnings &amp; Considerations",id:"warnings--considerations",level:2},{value:"General Setup",id:"general-setup",level:2},{value:"Plugin Types",id:"plugin-types",level:2},{value:"Android Implementation",id:"android-implementation",level:2},{value:"1. Create the Plugin",id:"1-create-the-plugin",level:3},{value:"Base Plugin",id:"base-plugin",level:4},{value:"ExoPlayer-Specific Plugin",id:"exoplayer-specific-plugin",level:4},{value:"2. Register the Plugin",id:"2-register-the-plugin",level:3},{value:"Extending Core Functionality via Plugins",id:"extending-core-functionality-via-plugins",level:3},{value:"Plugin Extension Points (Android)",id:"plugin-extension-points-android",level:4},{value:"1. <code>overrideMediaItemBuilder</code>",id:"1-overridemediaitembuilder",level:5},{value:"2. <code>overrideMediaDataSourceFactory</code>",id:"2-overridemediadatasourcefactory",level:5},{value:"3. <code>overrideMediaSourceFactory</code>",id:"3-overridemediasourcefactory",level:5},{value:"4. <code>shouldDisableCache</code>",id:"4-shoulddisablecache",level:5},{value:"iOS Implementation",id:"ios-implementation",level:2},{value:"1. Podspec Integration",id:"1-podspec-integration",level:3},{value:"2. Create the Plugin",id:"2-create-the-plugin",level:3},{value:"Base Plugin",id:"base-plugin-1",level:4},{value:"AVPlayer-Specific Plugin",id:"avplayer-specific-plugin",level:4},{value:"<code>OverridePlayerAssetResult</code> and <code>OverridePlayerAssetType</code>",id:"overrideplayerassetresult-and-overrideplayerassettype",level:5},{value:"3. Register the Plugin",id:"3-register-the-plugin",level:3},{value:"Custom DRM Manager",id:"custom-drm-manager",level:2},{value:"Android Implementation",id:"android-implementation-1",level:3},{value:"1/ Create custom DRM manager",id:"1-create-custom-drm-manager",level:4},{value:"2/ Register DRM manager in your plugin",id:"2-register-drm-manager-in-your-plugin",level:4},{value:"iOS Implementation",id:"ios-implementation-1",level:3},{value:"1/ Create custom DRM manager",id:"1-create-custom-drm-manager-1",level:4},{value:"2/ Register DRM manager in your plugin",id:"2-register-drm-manager-in-your-plugin-1",level:4},{value:"Important notes about DRM managers:",id:"important-notes-about-drm-managers",level:3}];function c(e){let n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"plugins",children:"Plugins"})}),"\n",(0,a.jsxs)(n.p,{children:["Since version ",(0,a.jsx)(n.code,{children:"6.4.0"}),", it is possible to create plugins for analytics management and potentially more.\nA sample plugin is available in the repository: ",(0,a.jsx)(n.a,{href:"https://github.com/TheWidlarzGroup/react-native-video/tree/master/examples/react-native-video-plugin-sample",children:"example/react-native-video-plugin-sample"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"commercial-plugins",children:"Commercial Plugins"}),"\n",(0,a.jsxs)(n.p,{children:["We at The Widlarz Group have created a set of plugins for comprehensive offline video support. If you are interested, check out our ",(0,a.jsx)(n.a,{href:"https://www.thewidlarzgroup.com/offline-video-sdk/?utm_source=rnv&utm_medium=docs&utm_campaign=plugins&utm_id=text",children:"Offline Video SDK"}),". If you need additional plugins (analytics, processing, etc.), let us know."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Using or recommending our commercial software helps support the maintenance of this open-source project. Thank you!"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"plugins-for-analytics",children:"Plugins for Analytics"}),"\n",(0,a.jsxs)(n.p,{children:["Most analytics systems that track player data (e.g., bitrate, errors) can be integrated directly with ExoPlayer or AVPlayer.\nThis plugin system allows for non-intrusive analytics integration with ",(0,a.jsx)(n.code,{children:"react-native-video"}),". It should be implemented in native languages (Kotlin/Swift) to ensure efficiency."]}),"\n",(0,a.jsxs)(n.p,{children:["The goal is to enable easy analytics integration without modifying ",(0,a.jsx)(n.code,{children:"react-native-video"})," itself."]}),"\n",(0,a.jsx)(n.h2,{id:"warnings--considerations",children:"Warnings & Considerations"}),"\n",(0,a.jsxs)(n.p,{children:["This is an ",(0,a.jsx)(n.strong,{children:"experimental API"})," and may change over time. The API is simple yet flexible enough to implement analytics systems.\nIf additional metadata is needed, you should implement a setter in your custom package."]}),"\n",(0,a.jsxs)(n.p,{children:["Since the API is flexible, misuse is possible. The player handle should be treated as ",(0,a.jsx)(n.strong,{children:"read-only"}),". Modifying player behavior may cause unexpected issues in ",(0,a.jsx)(n.code,{children:"react-native-video"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"general-setup",children:"General Setup"}),"\n",(0,a.jsx)(n.p,{children:"First, create a new React Native package:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"npx create-react-native-library@latest react-native-video-custom-analytics\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Both Android and iOS implementations expose an ",(0,a.jsx)(n.code,{children:"RNVPlugin"})," interface.\nYour ",(0,a.jsx)(n.code,{children:"react-native-video-custom-analytics"})," package should implement this interface and register itself as a plugin for ",(0,a.jsx)(n.code,{children:"react-native-video"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"plugin-types",children:"Plugin Types"}),"\n",(0,a.jsx)(n.p,{children:"There are two types of plugins you can implement:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Base Plugin (",(0,a.jsx)(n.code,{children:"RNVPlugin"}),")"]}),": For general-purpose plugins that don't need specific player implementation details."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Player-Specific Plugins"}),":","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RNVAVPlayerPlugin"})," for iOS: Provides type-safe access to AVPlayer instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"RNVExoplayerPlugin"})," for Android: Provides type-safe access to ExoPlayer instances"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Choose the appropriate plugin type based on your needs. If you need direct access to player-specific APIs, use the player-specific plugin classes."}),"\n",(0,a.jsx)(n.h2,{id:"android-implementation",children:"Android Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"1-create-the-plugin",children:"1. Create the Plugin"}),"\n",(0,a.jsxs)(n.p,{children:["You can implement either the base ",(0,a.jsx)(n.code,{children:"RNVPlugin"})," interface or the player-specific ",(0,a.jsx)(n.code,{children:"RNVExoplayerPlugin"})," interface."]}),"\n",(0,a.jsx)(n.h4,{id:"base-plugin",children:"Base Plugin"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class MyAnalyticsPlugin : RNVPlugin {\n    override fun onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n\n    override fun onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"exoplayer-specific-plugin",children:"ExoPlayer-Specific Plugin"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class MyExoPlayerAnalyticsPlugin : RNVExoplayerPlugin {\n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer creation with type-safe access\n    }\n\n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle ExoPlayer removal with type-safe access\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"RNVPlugin"})," interface defines two functions:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"/**\n * Function called when a new player is created\n * @param id: a random string identifying the player\n * @param player: the instantiated player reference\n */\nfun onInstanceCreated(id: String, player: Any)\n\n/**\n * Function called when a player should be destroyed\n * when this callback is called, the plugin shall free all\n * resources and release all reference to Player object\n * @param id: a random string identifying the player\n * @param player: the player to release\n */\nfun onInstanceRemoved(id: String, player: Any)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-register-the-plugin",children:"2. Register the Plugin"}),"\n",(0,a.jsxs)(n.p,{children:["To register the plugin within the main ",(0,a.jsx)(n.code,{children:"react-native-video"})," package, call:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"ReactNativeVideoManager.getInstance().registerPlugin(plugin)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the sample implementation, the plugin is registered in the ",(0,a.jsx)(n.code,{children:"createNativeModules"})," entry point."]}),"\n",(0,a.jsx)(n.p,{children:"Once registered, your module can track player updates and report analytics data."}),"\n",(0,a.jsx)(n.h3,{id:"extending-core-functionality-via-plugins",children:"Extending Core Functionality via Plugins"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to analytics, plugins can also be used to modify or override core behavior of ",(0,a.jsx)(n.code,{children:"react-native-video"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"This allows native modules to deeply integrate with the playback system - for example:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"replacing the media source factory,"}),"\n",(0,a.jsx)(n.li,{children:"modifying the media item before playback starts (e.g., injecting stream keys),"}),"\n",(0,a.jsx)(n.li,{children:"disabling caching dynamically per source."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["These capabilities are available through the advanced Android plugin interface: ",(0,a.jsx)(n.code,{children:"RNVExoplayerPlugin"}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsx)(n.p,{children:"These extension points are optional \u2014 if no plugin provides them, the player behaves exactly as it did before."})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h4,{id:"plugin-extension-points-android",children:"Plugin Extension Points (Android)"}),"\n",(0,a.jsxs)(n.p,{children:["If your plugin implements ",(0,a.jsx)(n.code,{children:"RNVExoplayerPlugin"}),", you can override the following methods:"]}),"\n",(0,a.jsxs)(n.h5,{id:"1-overridemediaitembuilder",children:["1. ",(0,a.jsx)(n.code,{children:"overrideMediaItemBuilder"})]}),"\n",(0,a.jsxs)(n.p,{children:["Allows you to modify the ",(0,a.jsx)(n.code,{children:"MediaItem.Builder"})," before it\u2019s used. You can inject stream keys, cache keys, or override URIs."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"override fun overrideMediaItemBuilder(\n    source: Source,\n    mediaItemBuilder: MediaItem.Builder\n): MediaItem.Builder? {\n    // Return modified builder or null to use default\n}\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"2-overridemediadatasourcefactory",children:["2. ",(0,a.jsx)(n.code,{children:"overrideMediaDataSourceFactory"})]}),"\n",(0,a.jsx)(n.p,{children:"Lets you replace the data source used by ExoPlayer. Useful for implementing read-only cache or request interception."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"override fun overrideMediaDataSourceFactory(\n    source: Source,\n    mediaDataSourceFactory: DataSource.Factory\n): DataSource.Factory? {\n    // Return your custom factory or null to use default\n}\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"3-overridemediasourcefactory",children:["3. ",(0,a.jsx)(n.code,{children:"overrideMediaSourceFactory"})]}),"\n",(0,a.jsx)(n.p,{children:"Allows you to override the default MediaSource.Factory used by ExoPlayer for creating media sources.\nUse this if you need to inject a custom media source implementation. If you return null, the default media source factory will be used."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"override fun overrideMediaSourceFactory(\n    source: Source,\n    mediaSourceFactory: MediaSource.Factory,\n    mediaDataSourceFactory: DataSource.Factory\n  ): MediaSource.Factory? {\n    // Return your custom factory or null to use default\n  }\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"4-shoulddisablecache",children:["4. ",(0,a.jsx)(n.code,{children:"shouldDisableCache"})]}),"\n",(0,a.jsx)(n.p,{children:"Enables dynamic disabling of the caching system per source."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"override fun shouldDisableCache(source: Source): Boolean {\n    return true // your own logic\n}\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Once implemented, ",(0,a.jsx)(n.code,{children:"react-native-video"})," will automatically invoke these methods for each ",(0,a.jsx)(n.code,{children:"<Video />"})," instance."]}),"\n",(0,a.jsx)(n.h2,{id:"ios-implementation",children:"iOS Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"1-podspec-integration",children:"1. Podspec Integration"}),"\n",(0,a.jsxs)(n.p,{children:["Your new module must have access to ",(0,a.jsx)(n.code,{children:"react-native-video"}),". Add it as a dependency in your Podspec file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-podfile",children:'s.dependency "react-native-video"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-create-the-plugin",children:"2. Create the Plugin"}),"\n",(0,a.jsxs)(n.p,{children:["You can implement either the base ",(0,a.jsx)(n.code,{children:"RNVPlugin"})," class or the player-specific ",(0,a.jsx)(n.code,{children:"RNVAVPlayerPlugin"})," class."]}),"\n",(0,a.jsx)(n.h4,{id:"base-plugin-1",children:"Base Plugin"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class MyAnalyticsPlugin: RNVPlugin {\n    override func onInstanceCreated(id: String, player: Any) {\n        // Handle player creation\n    }\n\n    override func onInstanceRemoved(id: String, player: Any) {\n        // Handle player removal\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"avplayer-specific-plugin",children:"AVPlayer-Specific Plugin"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class MyAVPlayerAnalyticsPlugin: RNVAVPlayerPlugin {\n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle AVPlayer creation with type-safe access\n    }\n\n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle AVPlayer removal with type-safe access\n    }\n\n    /// Optionally override the asset used by the player before playback starts\n    override func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -> OverridePlayerAssetResult? {\n        // Return a modified asset or nil to use the default\n        return nil\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"RNVAVPlayerPlugin"})," class defines several extension points:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"/**\n * Function called when a new AVPlayer instance is created\n * @param id: a random string identifying the player\n * @param player: the instantiated AVPlayer\n */\nopen func onInstanceCreated(id: String, player: AVPlayer) { /* no-op */ }\n\n/**\n * Function called when an AVPlayer instance is being removed\n * @param id: a random string identifying the player\n * @param player: the AVPlayer to release\n */\nopen func onInstanceRemoved(id: String, player: AVPlayer) { /* no-op */ }\n\n/**\n * Optionally override the asset used by the player before playback starts.\n * Allows you to modify or replace the AVAsset before it is used to create the AVPlayerItem.\n * Return nil to use the default asset.\n *\n * @param source: The VideoSource describing the video (uri, type, headers, etc.)\n * @param asset: The AVAsset prepared by the player\n * @return: OverridePlayerAssetResult if you want to override, or nil to use the default\n */\nopen func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -> OverridePlayerAssetResult? { nil }\n"})}),"\n",(0,a.jsxs)(n.h5,{id:"overrideplayerassetresult-and-overrideplayerassettype",children:[(0,a.jsx)(n.code,{children:"OverridePlayerAssetResult"})," and ",(0,a.jsx)(n.code,{children:"OverridePlayerAssetType"})]}),"\n",(0,a.jsxs)(n.p,{children:["To override the asset, return an ",(0,a.jsx)(n.code,{children:"OverridePlayerAssetResult"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"public struct OverridePlayerAssetResult {\n  public let type: OverridePlayerAssetType\n  public let asset: AVAsset\n\n  public init(type: OverridePlayerAssetType, asset: AVAsset) {\n    self.type = type\n    self.asset = asset\n  }\n}\n\npublic enum OverridePlayerAssetType {\n  case partial // Return a partially modified asset; will go through the default prepare process\n  case full    // Return a fully modified asset; will skip the default prepare process\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:".partial"})," if you want the asset to continue through the player's normal preparation (e.g., for text tracks or metadata injection)."]}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:".full"})," if you want to provide a fully prepared asset that will be used as-is for playback."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:'override func overridePlayerAsset(source: VideoSource, asset: AVAsset) async -> OverridePlayerAssetResult? {\n    // Example: Replace the asset URL\n    let newAsset = AVAsset(url: URL(string: "https://example.com/override.mp4")!)\n    return Result(type: .full, asset: newAsset)\n}\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Only one plugin can override the player asset at a time. If multiple plugins implement this, only the first will be used."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-register-the-plugin",children:"3. Register the Plugin"}),"\n",(0,a.jsxs)(n.p,{children:["To register the plugin in ",(0,a.jsx)(n.code,{children:"react-native-video"}),", call:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"ReactNativeVideoManager.shared.registerPlugin(plugin: plugin)\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the sample implementation, the plugin is registered inside the ",(0,a.jsx)(n.code,{children:"VideoPluginSample"})," file within the ",(0,a.jsx)(n.code,{children:"init"})," function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"import react_native_video\n\n...\n\noverride init() {\n    super.init()\n    ReactNativeVideoManager.shared.registerPlugin(plugin: self)\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Once registered, your module can track player updates and report analytics data to your backend."}),"\n",(0,a.jsx)(n.h2,{id:"custom-drm-manager",children:"Custom DRM Manager"}),"\n",(0,a.jsx)(n.p,{children:"You can provide a custom DRM manager through your plugin to handle DRM in a custom way. This is useful when you need to integrate with a specific DRM provider or implement custom DRM logic."}),"\n",(0,a.jsx)(n.h3,{id:"android-implementation-1",children:"Android Implementation"}),"\n",(0,a.jsx)(n.h4,{id:"1-create-custom-drm-manager",children:"1/ Create custom DRM manager"}),"\n",(0,a.jsxs)(n.p,{children:["Create a class that implements the ",(0,a.jsx)(n.code,{children:"DRMManagerSpec"})," interface:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class CustomDRMManager : DRMManagerSpec {\n    @Throws(UnsupportedDrmException::class)\n    override fun buildDrmSessionManager(uuid: UUID, drmProps: DRMProps): DrmSessionManager? {\n        // Your custom implementation for building DRM session manager\n        // Return null if the DRM scheme is not supported\n        // Throw UnsupportedDrmException if the DRM scheme is invalid\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-register-drm-manager-in-your-plugin",children:"2/ Register DRM manager in your plugin"}),"\n",(0,a.jsxs)(n.p,{children:["Implement ",(0,a.jsx)(n.code,{children:"getDRMManager()"})," in your ExoPlayer plugin to provide the custom DRM manager:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-kotlin",children:"class CustomVideoPlugin : RNVExoplayerPlugin {\n    private val drmManager = CustomDRMManager()\n    \n    override fun getDRMManager(): DRMManagerSpec? {\n        return drmManager\n    }\n    \n    override fun onInstanceCreated(id: String, player: ExoPlayer) {\n        // Handle player creation\n    }\n    \n    override fun onInstanceRemoved(id: String, player: ExoPlayer) {\n        // Handle player removal\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"ios-implementation-1",children:"iOS Implementation"}),"\n",(0,a.jsx)(n.h4,{id:"1-create-custom-drm-manager-1",children:"1/ Create custom DRM manager"}),"\n",(0,a.jsxs)(n.p,{children:["Create a class that implements the ",(0,a.jsx)(n.code,{children:"DRMManagerSpec"})," protocol:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class CustomDRMManager: NSObject, DRMManagerSpec {\n    func createContentKeyRequest(\n        asset: AVContentKeyRecipient,\n        drmProps: DRMParams?,\n        reactTag: NSNumber?,\n        onVideoError: RCTDirectEventBlock?,\n        onGetLicense: RCTDirectEventBlock?\n    ) {\n        // Initialize content key session and handle key request\n    }\n    \n    func handleContentKeyRequest(keyRequest: AVContentKeyRequest) {\n        // Process the content key request\n    }\n    \n    func finishProcessingContentKeyRequest(keyRequest: AVContentKeyRequest, license: Data) throws {\n        // Finish processing the key request with the obtained license\n    }\n    \n    func handleError(_ error: Error, for keyRequest: AVContentKeyRequest) {\n        // Handle any errors during the DRM process\n    }\n    \n    func setJSLicenseResult(license: String, licenseUrl: String) {\n        // Handle successful license acquisition from JS side\n    }\n    \n    func setJSLicenseError(error: String, licenseUrl: String) {\n        // Handle license acquisition errors from JS side\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"2-register-drm-manager-in-your-plugin-1",children:"2/ Register DRM manager in your plugin"}),"\n",(0,a.jsxs)(n.p,{children:["Implement ",(0,a.jsx)(n.code,{children:"getDRMManager()"})," in your AVPlayer plugin to provide the custom DRM manager:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-swift",children:"class CustomVideoPlugin: RNVAVPlayerPlugin {\n    override func getDRMManager() -> DRMManagerSpec? {\n        return CustomDRMManager()\n    }\n    \n    override func onInstanceCreated(id: String, player: AVPlayer) {\n        // Handle player creation\n    }\n    \n    override func onInstanceRemoved(id: String, player: AVPlayer) {\n        // Handle player removal\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"important-notes-about-drm-managers",children:"Important notes about DRM managers:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Only one plugin can provide a DRM manager at a time. If multiple plugins try to provide DRM managers, only the first one will be used."}),"\n",(0,a.jsx)(n.li,{children:"The custom DRM manager will be used for all video instances in the app."}),"\n",(0,a.jsxs)(n.li,{children:["If no custom DRM manager is provided:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"On iOS, the default FairPlay-based implementation will be used"}),"\n",(0,a.jsx)(n.li,{children:"On Android, the default ExoPlayer DRM implementation will be used"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["The DRM manager must handle all DRM-related functionality:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"On iOS: key requests, license acquisition, and error handling through AVContentKeySession"}),"\n",(0,a.jsx)(n.li,{children:"On Android: DRM session management and license acquisition through ExoPlayer's DrmSessionManager"}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},980:function(e,n,i){i.d(n,{Z:()=>t,a:()=>l});var r=i(7294);let a={},s=r.createContext(a);function l(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);