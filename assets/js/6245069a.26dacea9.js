"use strict";(self.webpackChunk_react_native_video_docs=self.webpackChunk_react_native_video_docs||[]).push([["6891"],{7919:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>s,default:()=>a,toc:()=>o,metadata:()=>d,assets:()=>l,contentTitle:()=>c});var d=JSON.parse('{"id":"video-view","title":"VideoView Component","description":"React Native Video VideoView Component","source":"@site/docs/video-view.md","sourceDirName":".","slug":"/video-view","permalink":"/react-native-video/docs/v7/video-view","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"VideoView","description":"React Native Video VideoView Component"},"sidebar":"docsSidebar","previous":{"title":"Player Lifecycle","permalink":"/react-native-video/docs/v7/player/player-lifecycle"},"next":{"title":"Events","permalink":"/react-native-video/docs/v7/events/"}}'),t=n(5893),r=n(980);let s={sidebar_position:4,sidebar_label:"VideoView",description:"React Native Video VideoView Component"},c="VideoView Component",l={},o=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Props",id:"props",level:2},{value:"Events",id:"events",level:2},{value:"Refs and Imperative Methods",id:"refs-and-imperative-methods",level:2}];function h(e){let i={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"videoview-component",children:"VideoView Component"})}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"VideoView"})," component is responsible for rendering the video content managed by a ",(0,t.jsx)(i.code,{children:"VideoPlayer"})," instance onto the screen. It also provides UI functionalities like native controls, fullscreen, and picture-in-picture mode."]}),"\n",(0,t.jsx)(i.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsxs)(i.p,{children:["To use ",(0,t.jsx)(i.code,{children:"VideoView"}),", you need to pass a ",(0,t.jsx)(i.code,{children:"VideoPlayer"})," instance to its ",(0,t.jsx)(i.code,{children:"player"})," prop."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-tsx",children:"import React from 'react';\nimport { VideoPlayer, VideoView } from 'react-native-video';\nimport { StyleSheet } from 'react-native';\n\nconst App = () => {\n  const player = useVideoPlayer('https://example.com/video.mp4', (_player) => {\n    // This is optional setup function that will be called when the player is created.\n    _player.play();\n  });\n\n  return (\n    <VideoView\n      style={styles.video}\n      player={player}\n      controls={true}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  video: {\n    width: '100%',\n    height: 200,\n  },\n});\n\nexport default App;\n"})}),"\n",(0,t.jsx)(i.h2,{id:"props",children:"Props"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Prop"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Required"}),(0,t.jsx)(i.th,{children:"Default"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"player"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"VideoPlayer"})}),(0,t.jsx)(i.td,{children:"Yes"}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsxs)(i.td,{children:["The ",(0,t.jsx)(i.code,{children:"VideoPlayer"})," instance that manages the video to be displayed."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"style"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"ViewStyle"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:"-"}),(0,t.jsxs)(i.td,{children:["Standard React Native styles to control the layout and appearance of the ",(0,t.jsx)(i.code,{children:"VideoView"}),"."]})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"controls"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"false"})}),(0,t.jsx)(i.td,{children:"Whether to show the native video playback controls (play/pause, seek bar, volume, etc.)."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"pictureInPicture"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"false"})}),(0,t.jsx)(i.td,{children:"Whether to enable and show the picture-in-picture (PiP) button in the native controls (if supported by the platform and controls are visible)."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"autoEnterPictureInPicture"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"boolean"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"false"})}),(0,t.jsx)(i.td,{children:"Whether the video should automatically enter PiP mode when it starts playing and the app is backgrounded (behavior might vary by platform)."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"resizeMode"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"'contain' | 'cover' | 'stretch' | 'none'"})}),(0,t.jsx)(i.td,{children:"No"}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"'none'"})}),(0,t.jsx)(i.td,{children:"How the video should be resized to fit the view."})]})]})]}),"\n",(0,t.jsx)(i.h2,{id:"events",children:"Events"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.code,{children:"VideoView"})," also accepts several event callback props related to UI state changes:"]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Event"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"onPictureInPictureChange?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"(event: { isActive: boolean }) => void"})}),(0,t.jsx)(i.td,{children:"Fired when the picture-in-picture mode starts or stops."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"onFullscreenChange?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"(event: { isFullscreen: boolean }) => void"})}),(0,t.jsx)(i.td,{children:"Fired when the fullscreen mode starts or stops."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"willEnterFullscreen?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Fired just before the view enters fullscreen mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"willExitFullscreen?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Fired just before the view exits fullscreen mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"willEnterPictureInPicture?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Fired just before the view enters picture-in-picture mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"willExitPictureInPicture?"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Fired just before the view exits picture-in-picture mode."})]})]})]}),"\n",(0,t.jsx)(i.p,{children:"These can be used to update your component's state or UI in response to these changes."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-tsx",children:"<VideoView\n  player={player}\n  onFullscreenChange={({ isFullscreen }) => {\n    console.log(isFullscreen ? 'Entered fullscreen' : 'Exited fullscreen');\n  }}\n  onPictureInPictureChange={({ isActive }) => {\n    console.log(isActive ? 'PiP active' : 'PiP inactive');\n  }}\n/>\n"})}),"\n",(0,t.jsx)(i.h2,{id:"refs-and-imperative-methods",children:"Refs and Imperative Methods"}),"\n",(0,t.jsxs)(i.p,{children:["You can obtain a ref to the ",(0,t.jsx)(i.code,{children:"VideoView"})," component to call imperative methods:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-tsx",children:"const videoViewRef = React.useRef<VideoViewRef>(null);\n\n// ...\n\n<VideoView ref={videoViewRef} player={player} />\n\n// Later, you can call methods like:\nvideoViewRef.current?.enterFullscreen();\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Available methods on the ",(0,t.jsx)(i.code,{children:"VideoViewRef"}),":"]}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Method"}),(0,t.jsx)(i.th,{children:"Type"}),(0,t.jsx)(i.th,{children:"Description"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"enterFullscreen()"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Programmatically requests the video view to enter fullscreen mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"exitFullscreen()"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Programmatically requests the video view to exit fullscreen mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"enterPictureInPicture()"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Programmatically requests the video view to enter picture-in-picture mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"exitPictureInPicture()"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => void"})}),(0,t.jsx)(i.td,{children:"Programmatically requests the video view to exit picture-in-picture mode."})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"canEnterPictureInPicture()"})}),(0,t.jsx)(i.td,{children:(0,t.jsx)(i.code,{children:"() => boolean"})}),(0,t.jsxs)(i.td,{children:["Checks if picture-in-picture mode is currently available and supported. Returns ",(0,t.jsx)(i.code,{children:"true"})," if PiP can be entered, ",(0,t.jsx)(i.code,{children:"false"})," otherwise."]})]})]})]})]})}function a(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},980:function(e,i,n){n.d(i,{Z:()=>c,a:()=>s});var d=n(7294);let t={},r=d.createContext(t);function s(e){let i=d.useContext(r);return d.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),d.createElement(r.Provider,{value:i},e.children)}}}]);