"use strict";(self.webpackChunk_react_native_video_docs=self.webpackChunk_react_native_video_docs||[]).push([["4568"],{5661:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>d,default:()=>p,toc:()=>a,metadata:()=>t,assets:()=>l,contentTitle:()=>s});var t=JSON.parse('{"id":"other/expo","title":"Expo","description":"React Native Video Expo Plugin","source":"@site/versioned_docs/version-6.x/other/expo.md","sourceDirName":"other","slug":"/other/expo","permalink":"/react-native-video/docs/v6/other/expo","draft":false,"unlisted":false,"tags":[],"version":"6.x","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Expo","description":"React Native Video Expo Plugin"},"sidebar":"docsSidebar","previous":{"title":"Other","permalink":"/react-native-video/docs/v6/category/other"},"next":{"title":"Debugging","permalink":"/react-native-video/docs/v6/other/debug"}}'),o=i(5893),r=i(980);let d={sidebar_position:1,title:"Expo",description:"React Native Video Expo Plugin"},s="Expo",l={},a=[{value:"Expo Plugin",id:"expo-plugin",level:2},{value:"Example Configuration",id:"example-configuration",level:3},{value:"Expo Plugin Properties",id:"expo-plugin-properties",level:2}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"expo",children:"Expo"})}),"\n",(0,o.jsx)(n.h2,{id:"expo-plugin",children:"Expo Plugin"}),"\n",(0,o.jsxs)(n.p,{children:["Starting from version ",(0,o.jsx)(n.code,{children:"6.3.1"}),", ",(0,o.jsx)(n.code,{children:"react-native-video"})," supports an Expo plugin. You can configure ",(0,o.jsx)(n.code,{children:"react-native-video"})," properties in the ",(0,o.jsx)(n.code,{children:"app.json"}),", ",(0,o.jsx)(n.code,{children:"app.config.json"}),", or ",(0,o.jsx)(n.code,{children:"app.config.js"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["This is particularly useful when using the ",(0,o.jsx)(n.code,{children:"Expo"})," managed workflow (",(0,o.jsx)(n.code,{children:"expo prebuild"}),"), as it automatically sets up ",(0,o.jsx)(n.code,{children:"react-native-video"})," properties in the native part of the Expo project."]}),"\n",(0,o.jsx)(n.h3,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'// app.json\n{\n  "name": "my app",\n  "plugins": [\n    [\n      "react-native-video",\n      {\n        "enableNotificationControls": true,\n        "androidExtensions": {\n          "useExoplayerRtsp": false,\n          "useExoplayerSmoothStreaming": false,\n          "useExoplayerHls": false,\n          "useExoplayerDash": false\n        }\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"expo-plugin-properties",children:"Expo Plugin Properties"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Property"}),(0,o.jsx)(n.th,{children:"Type"}),(0,o.jsx)(n.th,{children:"Default"}),(0,o.jsx)(n.th,{children:"Description"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enableNotificationControls"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"Add required changes on android to use notification controls for video player"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enableBackgroundAudio"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"Add required changes to play video in background on iOS"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enableADSExtension"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"Add required changes to use ads extension for video player"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enableCacheExtension"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"Add required changes to use cache extension for video player on iOS"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"androidExtensions"}),(0,o.jsx)(n.td,{children:"object"}),(0,o.jsx)(n.td,{}),(0,o.jsx)(n.td,{children:"You can enable/disable extensions as per your requirement - this allow to reduce library size on android"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"enableAndroidPictureInPicture"}),(0,o.jsx)(n.td,{children:"boolean"}),(0,o.jsx)(n.td,{children:"false"}),(0,o.jsx)(n.td,{children:"Apply configs to be able to use Picture-in-picture on android"})]})]})]})]})}function p(e={}){let{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},980:function(e,n,i){i.d(n,{Z:()=>s,a:()=>d});var t=i(7294);let o={},r=t.createContext(o);function d(e){let n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);