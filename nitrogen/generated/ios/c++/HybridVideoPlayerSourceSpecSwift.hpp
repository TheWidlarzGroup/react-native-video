///
/// HybridVideoPlayerSourceSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridVideoPlayerSourceSpec.hpp"

// Forward declaration of `HybridVideoPlayerSourceSpecCxx` to properly resolve imports.
namespace NitroVideo { class HybridVideoPlayerSourceSpecCxx; }



#include <string>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroVideo-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::video {

  /**
   * The C++ part of HybridVideoPlayerSourceSpecCxx.swift.
   *
   * HybridVideoPlayerSourceSpecSwift (C++) accesses HybridVideoPlayerSourceSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridVideoPlayerSourceSpecCxx can directly inherit from the C++ class HybridVideoPlayerSourceSpec
   * to simplify the whole structure and memory management.
   */
  class HybridVideoPlayerSourceSpecSwift: public virtual HybridVideoPlayerSourceSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridVideoPlayerSourceSpecSwift(const NitroVideo::HybridVideoPlayerSourceSpecCxx& swiftPart):
      HybridObject(HybridVideoPlayerSourceSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroVideo::HybridVideoPlayerSourceSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::string getUri() noexcept override {
      auto __result = _swiftPart.getUri();
      return __result;
    }
    inline void setUri(const std::string& uri) noexcept override {
      _swiftPart.setUri(uri);
    }

  public:
    // Methods
    

  private:
    NitroVideo::HybridVideoPlayerSourceSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::video
