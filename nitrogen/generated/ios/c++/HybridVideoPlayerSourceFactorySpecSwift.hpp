///
/// HybridVideoPlayerSourceFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridVideoPlayerSourceFactorySpec.hpp"

// Forward declaration of `HybridVideoPlayerSourceFactorySpecCxx` to properly resolve imports.
namespace NitroVideo { class HybridVideoPlayerSourceFactorySpecCxx; }

// Forward declaration of `HybridVideoPlayerSourceSpec` to properly resolve imports.
namespace margelo::nitro::video { class HybridVideoPlayerSourceSpec; }

#include <memory>
#include "HybridVideoPlayerSourceSpec.hpp"
#include <string>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroVideo-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::video {

  /**
   * The C++ part of HybridVideoPlayerSourceFactorySpecCxx.swift.
   *
   * HybridVideoPlayerSourceFactorySpecSwift (C++) accesses HybridVideoPlayerSourceFactorySpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridVideoPlayerSourceFactorySpecCxx can directly inherit from the C++ class HybridVideoPlayerSourceFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridVideoPlayerSourceFactorySpecSwift: public virtual HybridVideoPlayerSourceFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridVideoPlayerSourceFactorySpecSwift(const NitroVideo::HybridVideoPlayerSourceFactorySpecCxx& swiftPart):
      HybridObject(HybridVideoPlayerSourceFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroVideo::HybridVideoPlayerSourceFactorySpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<margelo::nitro::video::HybridVideoPlayerSourceSpec> fromUri(const std::string& uri) override {
      auto __result = _swiftPart.fromUri(uri);
      return __result;
    }

  private:
    NitroVideo::HybridVideoPlayerSourceFactorySpecCxx _swiftPart;
  };

} // namespace margelo::nitro::video
