///
/// HybridVideoViewViewManagerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridVideoViewViewManagerSpec``
public protocol HybridVideoViewViewManagerSpec_protocol: AnyObject {
  // Properties
  var player: (any HybridVideoPlayerSpec)? { get set }

  // Methods
  
}

/// See ``HybridVideoViewViewManagerSpec``
public class HybridVideoViewViewManagerSpec_base: HybridObjectSpec {
  private weak var cxxWrapper: HybridVideoViewViewManagerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridVideoViewViewManagerSpec_cxx {
  #if DEBUG
    guard self is HybridVideoViewViewManagerSpec else {
      fatalError("`self` is not a `HybridVideoViewViewManagerSpec`! Did you accidentally inherit from `HybridVideoViewViewManagerSpec_base` instead of `HybridVideoViewViewManagerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridVideoViewViewManagerSpec_cxx(self as! HybridVideoViewViewManagerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
  public var memorySize: Int { return 0 }
}

/**
 * A Swift base-protocol representing the VideoViewViewManager HybridObject.
 * Implement this protocol to create Swift-based instances of VideoViewViewManager.
 * ```swift
 * class HybridVideoViewViewManager : HybridVideoViewViewManagerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridVideoViewViewManagerSpec = HybridVideoViewViewManagerSpec_protocol & HybridVideoViewViewManagerSpec_base
