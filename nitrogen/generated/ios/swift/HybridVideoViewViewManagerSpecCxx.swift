///
/// HybridVideoViewViewManagerSpecCxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * Helper class for converting instances of `HybridVideoViewViewManagerSpecCxx` from- and to unsafe pointers.
 * This is useful to pass Swift classes to C++, without having to strongly type the C++ function signature.
 * The actual Swift type can be included in the .cpp file, without having to forward-declare anything in .hpp.
 */
public final class HybridVideoViewViewManagerSpecCxxUnsafe {
  /**
   * Casts a `HybridVideoViewViewManagerSpecCxx` instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public static func toUnsafe(_ instance: HybridVideoViewViewManagerSpecCxx) -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(instance).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridVideoViewViewManagerSpecCxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridVideoViewViewManagerSpecCxx>`.
   * This removes one strong reference from the object!
   */
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridVideoViewViewManagerSpecCxx {
    return Unmanaged<HybridVideoViewViewManagerSpecCxx>.fromOpaque(pointer).takeRetainedValue()
  }
}

/**
 * A class implementation that bridges HybridVideoViewViewManagerSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridVideoViewViewManagerSpecCxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::video::bridge::swift`)
   * from `NitroVideo-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.video.bridge.swift

  /**
   * Holds an instance of the `HybridVideoViewViewManagerSpec` Swift protocol.
   */
  private var __implementation: any HybridVideoViewViewManagerSpec

  /**
   * Create a new `HybridVideoViewViewManagerSpecCxx` that wraps the given `HybridVideoViewViewManagerSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: some HybridVideoViewViewManagerSpec) {
    self.__implementation = implementation
    /* no base class */
  }

  /**
   * Get the actual `HybridVideoViewViewManagerSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridVideoViewViewManagerSpec() -> any HybridVideoViewViewManagerSpec {
    return __implementation
  }

  /**
   * Contains a (weak) reference to the C++ HybridObject to cache it.
   */
  public var hybridContext: margelo.nitro.HybridContext {
    @inline(__always)
    get {
      return self.__implementation.hybridContext
    }
    @inline(__always)
    set {
      self.__implementation.hybridContext = newValue
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return self.__implementation.memorySize
  }

  // Properties
  public var player: bridge.std__optional_std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec__ {
    @inline(__always)
    get {
      return { () -> bridge.std__optional_std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec__ in
        if let __unwrappedValue = self.__implementation.player {
          return bridge.create_std__optional_std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec__({ () -> bridge.std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec_ in
            let __cxxWrapped = HybridVideoPlayerSpecCxx(__unwrappedValue)
            let __pointer = HybridVideoPlayerSpecCxxUnsafe.toUnsafe(__cxxWrapped)
            return bridge.create_std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec_(__pointer)
          }())
        } else {
          return .init()
        }
      }()
    }
    @inline(__always)
    set {
      self.__implementation.player = { () -> (any HybridVideoPlayerSpec)? in
        if let __unwrapped = newValue.value {
          return { () -> HybridVideoPlayerSpec in
            let __unsafePointer = bridge.get_std__shared_ptr_margelo__nitro__video__HybridVideoPlayerSpec_(__unwrapped)
            let __instance = HybridVideoPlayerSpecCxxUnsafe.fromUnsafe(__unsafePointer)
            return __instance.getHybridVideoPlayerSpec()
          }()
        } else {
          return nil
        }
      }()
    }
  }

  // Methods
  
}
