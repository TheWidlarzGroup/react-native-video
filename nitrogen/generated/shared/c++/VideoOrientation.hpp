///
/// VideoOrientation.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::video {

  /**
   * An enum which can be represented as a JavaScript union (VideoOrientation).
   */
  enum class VideoOrientation {
    PORTRAIT      SWIFT_NAME(portrait) = 0,
    LANDSCAPE      SWIFT_NAME(landscape) = 1,
    PORTRAIT_UPSIDE_DOWN      SWIFT_NAME(portraitUpsideDown) = 2,
    LANDSCAPE_LEFT      SWIFT_NAME(landscapeLeft) = 3,
    LANDSCAPE_RIGHT      SWIFT_NAME(landscapeRight) = 4,
    UNKNOWN      SWIFT_NAME(unknown) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::video

namespace margelo::nitro {

  using namespace margelo::nitro::video;

  // C++ VideoOrientation <> JS VideoOrientation (union)
  template <>
  struct JSIConverter<VideoOrientation> {
    static inline VideoOrientation fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("portrait"): return VideoOrientation::PORTRAIT;
        case hashString("landscape"): return VideoOrientation::LANDSCAPE;
        case hashString("portrait-upside-down"): return VideoOrientation::PORTRAIT_UPSIDE_DOWN;
        case hashString("landscape-left"): return VideoOrientation::LANDSCAPE_LEFT;
        case hashString("landscape-right"): return VideoOrientation::LANDSCAPE_RIGHT;
        case hashString("unknown"): return VideoOrientation::UNKNOWN;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum VideoOrientation - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, VideoOrientation arg) {
      switch (arg) {
        case VideoOrientation::PORTRAIT: return JSIConverter<std::string>::toJSI(runtime, "portrait");
        case VideoOrientation::LANDSCAPE: return JSIConverter<std::string>::toJSI(runtime, "landscape");
        case VideoOrientation::PORTRAIT_UPSIDE_DOWN: return JSIConverter<std::string>::toJSI(runtime, "portrait-upside-down");
        case VideoOrientation::LANDSCAPE_LEFT: return JSIConverter<std::string>::toJSI(runtime, "landscape-left");
        case VideoOrientation::LANDSCAPE_RIGHT: return JSIConverter<std::string>::toJSI(runtime, "landscape-right");
        case VideoOrientation::UNKNOWN: return JSIConverter<std::string>::toJSI(runtime, "unknown");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert VideoOrientation to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("portrait"):
        case hashString("landscape"):
        case hashString("portrait-upside-down"):
        case hashString("landscape-left"):
        case hashString("landscape-right"):
        case hashString("unknown"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
